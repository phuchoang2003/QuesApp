/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2024-03-01 09:40:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class addQuestionToExam_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta charset=\"UTF-8\" />\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("    <title>List of Questions</title>\r\n");
      out.write("    <style>\r\n");
      out.write("    body {\r\n");
      out.write("      font-family: Arial, sans-serif;\r\n");
      out.write("      background: linear-gradient(90deg, #c7c5f4, #776bcc);\r\n");
      out.write("      margin: 0;\r\n");
      out.write("      padding: 0;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .container {\r\n");
      out.write("      max-width: 800px;\r\n");
      out.write("      margin: 50px auto;\r\n");
      out.write("      padding: 20px;\r\n");
      out.write("      background-color: rgba(255, 255, 255, 0.9);\r\n");
      out.write("      border-radius: 8px;\r\n");
      out.write("      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    h2 {\r\n");
      out.write("      text-align: center;\r\n");
      out.write("      color: #6c63ac;\r\n");
      out.write("      margin-bottom: 20px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .question-list {\r\n");
      out.write("      margin-bottom: 20px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .question-item {\r\n");
      out.write("      display: flex;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("      justify-content: space-between;\r\n");
      out.write("      background-color: rgba(255, 255, 255, 0.7);\r\n");
      out.write("      padding: 15px;\r\n");
      out.write("      margin-bottom: 10px;\r\n");
      out.write("      border-radius: 5px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .text-question {\r\n");
      out.write("      font-size: 1.2rem;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .checkbox-label {\r\n");
      out.write("      width: 20px;\r\n");
      out.write("      height: 20px;\r\n");
      out.write("      border: 1px solid #ccc;\r\n");
      out.write("      border-radius: 3px;\r\n");
      out.write("      display: inline-block;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .checkbox {\r\n");
      out.write("      display: none;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .checkbox:checked + .checkbox-label {\r\n");
      out.write("      background-color: #6c63ac;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .checkbox:checked + .checkbox-label::after {\r\n");
      out.write("      font-size: 14px;\r\n");
      out.write("      color: white;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    button {\r\n");
      out.write("      width: 100%;\r\n");
      out.write("      padding: 10px;\r\n");
      out.write("      background-color: #6c63ac;\r\n");
      out.write("      color: #fff;\r\n");
      out.write("      border: none;\r\n");
      out.write("      border-radius: 4px;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("      transition: background-color 0.3s;\r\n");
      out.write("      margin-top: 10px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    button:hover {\r\n");
      out.write("      background-color: #8e86d8;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </style>\r\n");
      out.write("\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("      <h2>From Add Question</h2>\r\n");
      out.write("      <div class=\"question-list\">\r\n");
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("      <button id=\"addAllQuestionsSelectedBtn\">Add All Questions Selected</button>\r\n");
      out.write("      <button id=\"addAllQuestionsBtn\">Select All Questions</button>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("\r\n");
      out.write("     // render ra tat ca cau hoi\r\n");
      out.write("     document.addEventListener(\"DOMContentLoaded\",async ()=>{\r\n");
      out.write("        await renderListQuestion();\r\n");
      out.write("     })\r\n");
      out.write("\r\n");
      out.write("     async function myFetch(url, options) {\r\n");
      out.write("           try {\r\n");
      out.write("             const response = await fetch(url, options);\r\n");
      out.write("             return response;\r\n");
      out.write("           } catch (error) {\r\n");
      out.write("             alert(error.message);\r\n");
      out.write("           }\r\n");
      out.write("         }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("     async function getQuestionsData(idSubject) {\r\n");
      out.write("           const url = `http://localhost:8080/QuesApp/auth/questions?subject=${idSubject}`;\r\n");
      out.write("\r\n");
      out.write("           const options = {\r\n");
      out.write("             method: \"GET\",\r\n");
      out.write("             headers: {\r\n");
      out.write("               \"Content-Type\": \"application/json\",\r\n");
      out.write("             },\r\n");
      out.write("           };\r\n");
      out.write("\r\n");
      out.write("           try {\r\n");
      out.write("             const response = await myFetch(url, options);\r\n");
      out.write("             const responseData = await response.json();\r\n");
      out.write("             return responseData;\r\n");
      out.write("           } catch (error) {\r\n");
      out.write("             alert(error.message);\r\n");
      out.write("           }\r\n");
      out.write("         }\r\n");
      out.write("\r\n");
      out.write("     async function renderListQuestion() {\r\n");
      out.write("         try {\r\n");
      out.write("             const idSubject = localStorage.getItem(\"idSubject\");\r\n");
      out.write("             const questions = await getQuestionsData(idSubject);\r\n");
      out.write("             const data = questions.data;\r\n");
      out.write("             console.log(\"phuc\", data);\r\n");
      out.write("\r\n");
      out.write("             const contentContainer = document.querySelector(\".question-list\");\r\n");
      out.write("             contentContainer.innerHTML = \"\";\r\n");
      out.write("\r\n");
      out.write("             let numQuestion = 1;\r\n");
      out.write("\r\n");
      out.write("             data.forEach(question => {\r\n");
      out.write("                 const questionItem = document.createElement('div');\r\n");
      out.write("                 questionItem.classList.add('question-item');\r\n");
      out.write("\r\n");
      out.write("                 const questionText = document.createElement('span');\r\n");
      out.write("                 questionText.classList.add('text-question');\r\n");
      out.write("                 questionText.textContent = `Question ${numQuestion}: ${question.content}`;\r\n");
      out.write("\r\n");
      out.write("                 const checkbox = document.createElement('input');\r\n");
      out.write("                 checkbox.type = 'checkbox';\r\n");
      out.write("                 checkbox.classList.add('checkbox');\r\n");
      out.write("                 checkbox.id = `question${numQuestion}`;\r\n");
      out.write("                 checkbox.setAttribute(\"data\",question.idQuestion);\r\n");
      out.write("\r\n");
      out.write("                 const label = document.createElement('label');\r\n");
      out.write("                 label.htmlFor = `question${numQuestion}`;\r\n");
      out.write("                 label.classList.add('checkbox-label');\r\n");
      out.write("\r\n");
      out.write("                 questionItem.appendChild(questionText);\r\n");
      out.write("                 questionItem.appendChild(checkbox);\r\n");
      out.write("                 questionItem.appendChild(label);\r\n");
      out.write("\r\n");
      out.write("                 contentContainer.appendChild(questionItem);\r\n");
      out.write("\r\n");
      out.write("                 ++numQuestion;\r\n");
      out.write("             });\r\n");
      out.write("         } catch (error) {\r\n");
      out.write("             alert(error.message);\r\n");
      out.write("         }\r\n");
      out.write("     }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("     // addAllQuestionsSelectedBtn\r\n");
      out.write("     document.addEventListener(\"DOMContentLoaded\", () => {\r\n");
      out.write("         // Add event listener for the button to select all questions\r\n");
      out.write("         const addAllQuestionsSelectedButton = document.getElementById(\"addAllQuestionsSelectedBtn\");\r\n");
      out.write("         addAllQuestionsSelectedButton.addEventListener(\"click\", addAllSelectedQuestions);\r\n");
      out.write("     });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    function addAllSelectedQuestions() {\r\n");
      out.write("         // luu tat ca id cua cau hoi duoc chon vao mot mang\r\n");
      out.write("        const selectedQuestionIds = [];\r\n");
      out.write("\r\n");
      out.write("        const checkboxes = document.querySelectorAll('.checkbox');\r\n");
      out.write("        checkboxes.forEach(checkbox => {\r\n");
      out.write("            if (checkbox.checked) {\r\n");
      out.write("                selectedQuestionIds.push(checkbox.getAttribute('data'));\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // luu vao localStorage de khi quay tro ve trang truoc co the dua vao day de goi API\r\n");
      out.write("        localStorage.setItem('selectedQuestionIds', JSON.stringify(selectedQuestionIds));\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // sau khi an them thi quay tro ve trang truoc\r\n");
      out.write("        const createExamFormUrlPage = \"http://localhost:8080/QuesApp/createExamForm\";\r\n");
      out.write("        window.location.href = createExamFormUrlPage;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("     // addAllQuestionsBtn\r\n");
      out.write("     document.addEventListener('DOMContentLoaded', () => {\r\n");
      out.write("         const selectAllButton = document.getElementById('addAllQuestionsBtn');\r\n");
      out.write("         selectAllButton.addEventListener('click', () => {\r\n");
      out.write("             const checkboxes = document.querySelectorAll('.checkbox');\r\n");
      out.write("             checkboxes.forEach(checkbox => {\r\n");
      out.write("                 checkbox.checked = !checkbox.checked;\r\n");
      out.write("                 checkbox.dispatchEvent(new Event('change'));\r\n");
      out.write("             });\r\n");
      out.write("         });\r\n");
      out.write("     });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
