Index: src/main/webapp/WEB-INF/web.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/WEB-INF/web.xml b/src/main/webapp/WEB-INF/web.xml
new file mode 100644
--- /dev/null	(date 1708157352187)
+++ b/src/main/webapp/WEB-INF/web.xml	(date 1708157352187)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
+        "http://java.sun.com/dtd/web-app_2_3.dtd">
+<web-app>
+  <display-name>Archetype Created Web Application</display-name>
+  <servlet-mapping>
+    <servlet-name>default</servlet-name>
+    <url-pattern>*.css</url-pattern>
+  </servlet-mapping>
+  <servlet-mapping>
+    <servlet-name>default</servlet-name>
+    <url-pattern>*.js</url-pattern>
+  </servlet-mapping>
+  <servlet-mapping>
+    <servlet-name>default</servlet-name>
+    <url-pattern>*.gif</url-pattern>
+  </servlet-mapping>
+  <servlet-mapping>
+    <servlet-name>default</servlet-name>
+    <url-pattern>*.jpg</url-pattern>
+  </servlet-mapping>
+  <servlet-mapping>
+    <servlet-name>default</servlet-name>
+    <url-pattern>*.png</url-pattern>
+  </servlet-mapping>
+  <!-- MIME mapping for CSS files -->
+  <mime-mapping>
+    <extension>css</extension>
+    <mime-type>text/css</mime-type>
+  </mime-mapping>
+</web-app>
Index: src/main/java/com/example/entity/Exam.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/entity/Exam.java b/src/main/java/com/example/entity/Exam.java
new file mode 100644
--- /dev/null	(date 1708271762002)
+++ b/src/main/java/com/example/entity/Exam.java	(date 1708271762002)
@@ -0,0 +1,57 @@
+package com.example.entity;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+public class Exam {
+    private int idExam;
+    private int timeLimit;
+
+    private int idSubject;
+    private String nameExam;
+
+    public Exam() {
+    }
+
+
+    public String getNameExam() {
+        return nameExam;
+    }
+
+    public void setNameExam(String nameExam) {
+        this.nameExam = nameExam;
+    }
+
+    @JsonCreator
+    public Exam(@JsonProperty("id_exam") int idExam,@JsonProperty("nameExam") String nameExam, @JsonProperty("timeLimit") int timeLimit, @JsonProperty("id_subject") int idSubject) {
+        this.idExam = idExam;
+        this.timeLimit = timeLimit;
+        this.idSubject = idSubject;
+        this.nameExam = nameExam;
+    }
+
+    public int getIdSubject() {
+        return idSubject;
+    }
+
+    public void setIdSubject(int idSubject) {
+        this.idSubject = idSubject;
+    }
+
+    public int getIdExam() {
+        return idExam;
+    }
+
+    public void setIdExam(int idExam) {
+        this.idExam = idExam;
+    }
+
+
+    public int getTimeLimit() {
+        return timeLimit;
+    }
+
+    public void setTimeLimit(int timeLimit) {
+        this.timeLimit = timeLimit;
+    }
+}
Index: src/main/java/com/example/entity/Result.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/entity/Result.java b/src/main/java/com/example/entity/Result.java
new file mode 100644
--- /dev/null	(date 1705677392550)
+++ b/src/main/java/com/example/entity/Result.java	(date 1705677392550)
@@ -0,0 +1,44 @@
+package com.example.entity;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+public class Result {
+    private int idResult;
+    private int idExam;
+    private double score;
+
+    public Result() {
+    }
+
+    @JsonCreator
+    public Result(@JsonProperty("id_result") int idResult, @JsonProperty("id_exam") int idExam,@JsonProperty("score") double score) {
+        this.idResult = idResult;
+        this.idExam = idExam;
+        this.score = score;
+    }
+
+    public int getIdResult() {
+        return idResult;
+    }
+
+    public void setIdResult(int idResult) {
+        this.idResult = idResult;
+    }
+
+    public int getIdExam() {
+        return idExam;
+    }
+
+    public void setIdExam(int idExam) {
+        this.idExam = idExam;
+    }
+
+    public double getScore() {
+        return score;
+    }
+
+    public void setScore(double score) {
+        this.score = score;
+    }
+}
Index: src/main/java/com/example/DTO/QuestionAnswerDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/DTO/QuestionAnswerDTO.java b/src/main/java/com/example/DTO/QuestionAnswerDTO.java
new file mode 100644
--- /dev/null	(date 1708964031235)
+++ b/src/main/java/com/example/DTO/QuestionAnswerDTO.java	(date 1708964031235)
@@ -0,0 +1,56 @@
+package com.example.DTO;
+
+import com.example.entity.Answer;
+import com.example.entity.Question;
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import java.util.List;
+
+public class QuestionAnswerDTO  {
+
+
+
+
+    @JsonCreator
+    public QuestionAnswerDTO(@JsonProperty("content") String content, @JsonProperty("answers") List<Answer> answers, @JsonProperty("idQuestion") int idQuestion){
+        this.content = content;
+        this.answers = answers;
+        this.idQuestion = idQuestion;
+    }
+
+    private int idQuestion;
+
+    private List<Answer> answers;
+    private String content;
+
+    public int getIdQuestion() {
+        return idQuestion;
+    }
+
+    public void setIdQuestion(int idQuestion) {
+        this.idQuestion = idQuestion;
+    }
+
+    public String getContent() {
+        return content;
+    }
+
+    public void setContent(String content) {
+        this.content = content;
+    }
+
+    public List<Answer> getAnswers() {
+        return answers;
+    }
+
+    public void setAnswers(List<Answer> answers) {
+        this.answers = answers;
+    }
+
+    public Question convertDtoToQuestion(){
+        Question question = new Question();
+        question.setContent(this.getContent());
+        return question;
+    }
+}
Index: src/main/webapp/views/home.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/home.jsp b/src/main/webapp/views/home.jsp
new file mode 100644
--- /dev/null	(date 1709402768491)
+++ b/src/main/webapp/views/home.jsp	(date 1709402768491)
@@ -0,0 +1,453 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
+<!DOC TYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <link
+      rel="stylesheet"
+      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"/>
+<link href="
+https://cdn.jsdelivr.net/npm/@icon/themify-icons@1.0.1-alpha.3/themify-icons.min.css
+" rel="stylesheet">
+
+    <style>
+
+
+     body {
+       background: linear-gradient(90deg, #c7c5f4, #776bcc);
+       margin: 0;
+       font-family: "Raleway", sans-serif;
+     }
+
+     .header,
+     .content {
+       margin: auto;
+       padding: 20px;
+       width: 80%;
+       box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
+       backdrop-filter: blur(5px); /* Apply blur effect */
+       border: 3px solid #a69ced; /* Lighter shade border color */
+       border-radius: 10px; /* Adjust border radius as needed */
+     }
+
+     .header {
+       display: flex;
+       justify-content: space-around;
+       align-items: center;
+       background: rgba(255, 255, 255, 0.2); /* White with 20% opacity */
+       margin-bottom: 20px;
+     }
+
+     .header div {
+       width: 40px;
+       height: 40px;
+       background: #bcb6eb;
+       margin: 0 5px;
+     }
+
+     .header .home,
+     .header .historyButton,
+     .header .add-subject,
+     .header .logo-user {
+       width: 40px;
+       height: 40px;
+       border-radius: 50%;
+       margin: 0 5px;
+       cursor: pointer;
+     }
+
+
+
+     .header .ti-search {
+       font-size: 20px;
+       color: #757575;
+       border: 2px solid #757575;
+       border-radius: 50%;
+       padding: 10px;
+       transition: all 0.3s ease;
+       margin-right: 10px;
+     }
+
+     .header .ti-search:hover {
+       background-color: #6a679e;
+       color: #fff;
+     }
+
+     .header .icon {
+       font-size: 20px;
+       color: #757575;
+       font-weight: 550;
+       display: flex;
+       justify-content: center;
+       align-items: center;
+       line-height: 40px;
+       text-align: center;
+       transition: transform 0.3s ease, box-shadow 0.3s ease, color 0.3s ease;
+       border-radius: 50%;
+       position: relative;
+     }
+
+     .header .icon:hover {
+       box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
+       color: whitesmoke;
+     }
+
+     .header .icon:hover ~ div {
+       filter: blur(2px);
+     }
+
+     .header .icon[title]:hover::after {
+       content: attr(title);
+       position: absolute;
+       left: 50%;
+       transform: translateX(-50%) translateY(100%);
+       background-color: #6a679e;
+       color: white;
+       padding: 3px 6px;
+       border-radius: 5px;
+       font-size: 12px;
+       z-index: 999;
+     }
+
+     .header .search {
+       flex-grow: 1;
+       height: 60px;
+       background: #fff;
+       border-radius: 30px;
+       margin: 0 5px;
+       display: flex;
+       align-items: center;
+     }
+
+     .header .search_input {
+       border: none;
+       outline: none;
+       background: none;
+       padding: 10px;
+       padding-left: 24px;
+       padding-right: 24px;
+       font-weight: 700;
+       width: 100%;
+       transition: 0.2s;
+       height: 40px;
+       text-align: center;
+       color: #5e5e5f;
+     }
+
+     .header .search_input:focus {
+       border-bottom: 2px solid #6a679e;
+     }
+
+     .header .search_input::placeholder {
+       color: #5e5e5f;
+       font-weight: 700;
+       opacity: 0.7;
+     }
+
+     .header .search:hover .search_input::placeholder {
+       opacity: 1;
+     }
+
+     .header .search:hover .search_input {
+       border-bottom: 2px solid #6a679e;
+     }
+
+     .content {
+       height: 640px;
+       background: rgba(255, 255, 255, 0.2);
+       position: relative;
+     }
+
+     .content .subject {
+       display: flex;
+       justify-content: space-between;
+       align-items: center;
+       background: rgba(255, 255, 255, 0.7);
+       padding: 10px 20px;
+       border-radius: 8px;
+       margin-bottom: 10px;
+     }
+
+     .content .subject {
+       cursor: pointer;
+     }
+
+     .content .subject .delete,
+     .content .subject .update {
+       padding: 5px 10px;
+       background: #bcb6eb;
+       color: white;
+       border-radius: 5px;
+       transition: background 0.3s ease;
+     }
+
+     .delete i,
+     .update i {
+       font-size: 16px;
+       color: #757575;
+       transition: color 0.3s ease;
+     }
+
+     .content .subject .delete:hover i,
+     .content .subject .update:hover i {
+       color: white;
+     }
+
+     .content .subject:hover {
+       background-color: #6b4d7e;
+     }
+
+     .subject .icon {
+       font-size: 20px;
+       color: #757575;
+       position: relative;
+     }
+
+     .subject .icon:hover {
+       color: whitesmoke;
+     }
+
+     .subject .icon:hover ~ div {
+       filter: blur(2px);
+     }
+
+     .subject .icon[title]:hover::after {
+       content: attr(title);
+       position: absolute;
+       left: 50%;
+       top: 10px;
+       transform: translateX(-50%) translateY(100%);
+       background-color: #6a679e;
+       color: white;
+       padding: 3px 6px;
+       border-radius: 5px;
+       font-size: 12px;
+
+     }
+
+     </style>
+
+    <title>Home</title>
+  </head>
+  <body>
+    <div class="header">
+      <div class="home">
+        <i class="ti ti-home icon" title="Home"></i>
+      </div>
+      <div class="historyButton">
+        <i class="ti ti-bar-chart icon" title="History"></i>
+      </div>
+
+      <div class="search">
+        <input
+          type="text"
+          class="search_input"
+          placeholder="Enter Name Your Subject"
+        />
+        <i class="ti ti-search"></i>
+      </div>
+
+      <div class="add-subject">
+        <i class="ti ti-plus icon" title="Create"></i>
+      </div>
+      <div class="logo-user">
+        <i class="ti ti-user icon"></i>
+
+      </div>
+    </div>
+    <div class="content">
+
+    </div>
+    <script >
+    document.addEventListener(
+      "DOMContentLoaded",
+      async () => {
+      await renderSubjects();
+      await engageSubject();
+  });
+
+
+    async function myFetch(url, options) {
+      try {
+        const response = await fetch(url, options);
+        console.log("phuc",response);
+        return response;
+      } catch (error) {
+        console.log("2", error.message);
+        alert(error.message);
+      }
+    }
+
+    async function getSubjectsData() {
+      const url = "http://localhost:8080/QuesApp/auth/subjects";
+
+      const options = {
+        method: "GET",
+        headers: {
+          "Content-Type": "application/json",
+        },
+      };
+
+      try {
+        const response = await myFetch(url, options);
+        const responseData = await response.json();
+        return responseData;
+      } catch (error) {
+        alert(error.message);
+      }
+    }
+
+ async function renderSubjects() {
+     try {
+         const subjects = await getSubjectsData();
+         const data = subjects.data;
+         console.log("phuc",data)
+
+         const contentContainer = document.querySelector(".content");
+         contentContainer.innerHTML = "";
+
+         data.forEach(subject => {
+             const subjectElement = document.createElement('div');
+             subjectElement.classList.add('subject');
+             subjectElement.setAttribute('data', subject.id);
+
+
+             const deleteElement = document.createElement('div');
+             deleteElement.classList.add('delete');
+             deleteElement.innerHTML = '<i class="ti ti-trash icon" title="Delete"></i>';
+
+             const nameElement = document.createElement('div');
+             nameElement.classList.add('name-subject');
+             nameElement.textContent = subject.nameSubject;
+
+             const updateElement = document.createElement('div');
+             updateElement.classList.add('update');
+
+             updateElement.innerHTML = '<i class="ti ti-settings icon" title="Update"></i>';
+
+             subjectElement.appendChild(deleteElement);
+             subjectElement.appendChild(nameElement);
+             subjectElement.appendChild(updateElement);
+
+             contentContainer.appendChild(subjectElement);
+         });
+     } catch (error) {
+         console.log("phuc1");
+         alert(error.message);
+     }
+ }
+
+ // history
+
+ document.addEventListener("DOMContentLoaded", () => {
+   const historyButton = document.querySelector(".historyButton");
+   historyButton.addEventListener("click",  () => {
+   const urlHistoryPage = "http://localhost:8080/QuesApp/history";
+   window.location.href = urlHistoryPage;
+   });
+ });
+
+// home
+document.addEventListener("DOMContentLoaded", () => {
+   const homeButton = document.querySelector(".home");
+   homeButton.addEventListener("click",  () => {
+   location.reload();
+   });
+ });
+
+ //add subject
+ document.addEventListener("DOMContentLoaded", () => {
+    const addSubjectButton = document.querySelector(".add-subject");
+    addSubjectButton.addEventListener("click",  () => {
+    const urlSubjectPage =  "http://localhost:8080/QuesApp/subjects";
+    window.location.href = urlSubjectPage;
+
+    });
+  });
+
+
+
+
+
+
+  // deleteButton
+  // sau su kien render ra mon hoc
+
+  async function sendIdSubject(idSubject){
+        const url = `http://localhost:8080/QuesApp/auth/subjects?id=${idSubject}`;
+        const options = {
+        method: "DELETE",
+        headers: {
+           "Content-Type": "application/json",
+           },
+         };
+
+         try {
+              const response = await myFetch(url, options);
+              if (response.status === 204) {
+                    return { success: true, message: `Delete subject with id ${idSubject} successful`};
+                      }
+              else{
+              const responseData = await response.json();
+              return { success: false, message: responseData.message };
+              }
+              } catch (error) {
+              alert(error.message);
+              }
+  }
+
+  async function deleteSubjectById(idSubject){
+    try{
+        const messageAfterDelete = await sendIdSubject(idSubject);
+        if (messageAfterDelete.success) {
+            alert(messageAfterDelete.message);
+            location.reload();
+            } else {
+            throw new Error(messageAfterDelete.message);
+            }
+    }
+    catch(error){
+    alert(error.message)
+    }
+  }
+
+
+
+  // update
+  // direct forward update form
+
+async function directForwardUpdateForm(){
+    const urlUpdateSubjectForm = "http://localhost:8080/QuesApp/formUpdateSubject";
+    window.location.href = urlUpdateSubjectForm;
+}
+
+
+// listQuestion
+async function engageSubject(){
+   const subjects = document.querySelectorAll(".subject");
+   subjects.forEach(subject => {
+       const idSubject = subject.getAttribute('data');
+       subject.addEventListener("click", async (event) => {
+           const clickedElement = event.target;
+           if (clickedElement.classList.contains("delete")|| clickedElement.parentElement.classList.contains("delete")) {
+               event.stopImmediatePropagation();
+               await deleteSubjectById(idSubject);
+           } else if (clickedElement.classList.contains("update")|| clickedElement.parentElement.classList.contains("update")) {
+               event.stopImmediatePropagation();
+               localStorage.setItem("idSubject",idSubject);
+               await directForwardUpdateForm();
+           } else {
+               localStorage.setItem("idSubject",idSubject);
+               const urlListQuestionPage = "http://localhost:8080/QuesApp/listQuestions";
+               window.location.href = urlListQuestionPage;
+           }
+       });
+   });
+}
+
+
+
+</script>
+  </body>
+</html>
Index: src/main/java/com/example/entity/History.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/entity/History.java b/src/main/java/com/example/entity/History.java
new file mode 100644
--- /dev/null	(date 1705677321523)
+++ b/src/main/java/com/example/entity/History.java	(date 1705677321523)
@@ -0,0 +1,66 @@
+package com.example.entity;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import java.time.LocalDateTime;
+import java.util.Date;
+
+public class History {
+    private int idHistory;
+    private int idUser;
+    private int idResult;
+    private LocalDateTime startTime;
+    private LocalDateTime endTime;
+
+    public int getIdUser() {
+        return idUser;
+    }
+
+    public void setIdUser(int idUser) {
+        this.idUser = idUser;
+    }
+
+    public History() {
+    }
+
+    @JsonCreator
+    public History(@JsonProperty("id_history") int idHistory,@JsonProperty("id_result") int idResult,@JsonProperty("startTime") LocalDateTime startTime, @JsonProperty("endTime") LocalDateTime endTime, @JsonProperty("id_user") int idUser) {
+        this.idHistory = idHistory;
+        this.idResult = idResult;
+        this.startTime = startTime;
+        this.endTime = endTime;
+    }
+
+    public int getIdHistory() {
+        return idHistory;
+    }
+
+    public void setIdHistory(int idHistory) {
+        this.idHistory = idHistory;
+    }
+
+    public int getIdResult() {
+        return idResult;
+    }
+
+    public void setIdResult(int idResult) {
+        this.idResult = idResult;
+    }
+
+    public LocalDateTime getStartTime() {
+        return startTime;
+    }
+
+    public void setStartTime(LocalDateTime startTime) {
+        this.startTime = startTime;
+    }
+
+    public LocalDateTime getEndTime() {
+        return endTime;
+    }
+
+    public void setEndTime(LocalDateTime endTime) {
+        this.endTime = endTime;
+    }
+}
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1704689766355)
+++ b/.idea/encodings.xml	(date 1704689766355)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/webapp/views/login.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/login.jsp b/src/main/webapp/views/login.jsp
new file mode 100644
--- /dev/null	(date 1708418004864)
+++ b/src/main/webapp/views/login.jsp	(date 1708418004864)
@@ -0,0 +1,344 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <link
+      rel="stylesheet"
+      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
+    />
+
+    <style>
+    * {
+             box-sizing: border-box;
+             margin: 0;
+             padding: 0;
+             font-family: "Raleway", sans-serif;
+           }
+
+        a {
+        text-decoration: none;
+         }
+
+           body {
+             background: linear-gradient(90deg, #c7c5f4, #776bcc);
+             margin: 0;
+           }
+
+           .container {
+             display: flex;
+             align-items: center;
+             justify-content: center;
+             min-height: 100vh;
+           }
+
+           .screen {
+             background: linear-gradient(90deg, #5d54a4, #7c78b8);
+             position: relative;
+             height: 600px;
+             width: 360px;
+             box-shadow: 0px 0px 24px #5c5696;
+           }
+
+           .screen__content {
+             z-index: 1;
+             position: relative;
+             height: 100%;
+           }
+
+           .screen__background {
+             position: absolute;
+             top: 0;
+             left: 0;
+             right: 0;
+             bottom: 0;
+             z-index: 0;
+             -webkit-clip-path: inset(0 0 0 0);
+             clip-path: inset(0 0 0 0);
+           }
+
+           .screen__background__shape {
+             transform: rotate(45deg);
+             position: absolute;
+           }
+
+           .screen__background__shape1 {
+             height: 520px;
+             width: 520px;
+             background: #fff;
+             top: -50px;
+             right: 120px;
+             border-radius: 0 72px 0 0;
+           }
+
+           .screen__background__shape2 {
+             height: 220px;
+             width: 220px;
+             background: #6c63ac;
+             top: -172px;
+             right: 0;
+             border-radius: 32px;
+           }
+
+           .screen__background__shape3 {
+             height: 540px;
+             width: 190px;
+             background: linear-gradient(270deg, #5d54a4, #6a679e);
+             top: -24px;
+             right: 0;
+             border-radius: 32px;
+           }
+
+           .screen__background__shape4 {
+             height: 400px;
+             width: 200px;
+             background: #7e7bb9;
+             top: 420px;
+             right: 50px;
+             border-radius: 60px;
+           }
+
+           .login,
+           .register {
+             width: 320px;
+             padding: 30px;
+             padding-top: 156px;
+           }
+
+           .login__field,
+           .register__field {
+             padding: 20px 0px;
+             position: relative;
+           }
+
+           .login__icon {
+             position: absolute;
+             top: 30px;
+             color: #7875b5;
+           }
+
+           .login__input,
+           .register__input {
+             border: none;
+             border-bottom: 2px solid #d1d1d4;
+             background: none;
+             padding: 10px;
+             padding-left: 24px;
+             font-weight: 700;
+             width: 75%;
+             transition: 0.2s;
+             color: #5e5e5f;
+           }
+
+           .login__input:active,
+           .login__input:focus,
+           .login__input:hover,
+           .register__input:active,
+           .register__input:focus,
+           .register__input:hover {
+             outline: none;
+             border-bottom-color: #6a679e;
+           }
+
+           .login__submit,
+           .register__submit {
+             background: #fff;
+             font-size: 14px;
+             margin-top: 30px;
+             padding: 16px 20px;
+             border-radius: 26px;
+             border: 1px solid #d4d3e8;
+             text-transform: uppercase;
+             font-weight: 700;
+             display: flex;
+             align-items: center;
+             width: 100%;
+             color: #4c489d;
+             box-shadow: 0px 2px 2px #5c5696;
+             cursor: pointer;
+             transition: 0.2s;
+           }
+
+           .login__submit:active,
+           .login__submit:focus,
+           .login__submit:hover,
+           .register__submit:active,
+           .register__submit:focus,
+           .register__submit:hover {
+             border-color: #6a679e;
+             outline: none;
+           }
+
+           .button__icon {
+             font-size: 24px;
+             margin-left: auto;
+             color: #7875b5;
+           }
+
+           .social-login {
+             position: absolute;
+             height: 140px;
+             width: 160px;
+             text-align: center;
+             bottom: 0px;
+             right: 0px;
+             color: #fff;
+           }
+
+           .social-icons {
+             display: flex;
+             align-items: center;
+             justify-content: center;
+           }
+
+           .social-login__icon {
+             padding: 20px 10px;
+             color: #fff;
+             text-decoration: none;
+             text-shadow: 0px 0px 8px #7875b5;
+           }
+
+           .social-login__icon:hover {
+             transform: scale(1.5);
+           }
+ </style>
+    <title>Login</title>
+  </head>
+  <body>
+    <div class="container">
+      <div class="screen">
+        <div class="screen__content">
+          <form class="login">
+            <div class="login__field">
+              <i class="login__icon fas fa-user"></i>
+              <input type="email" class="login__input" placeholder="Email" />
+            </div>
+            <div class="login__field">
+              <i class="login__icon fas fa-lock"></i>
+              <input
+                type="password"
+                class="login__input"
+                placeholder="Password"
+              />
+            </div>
+            <button class="button login__submit">
+              <span class="button__text">Log In</span>
+              <i class="button__icon fas fa-chevron-right"></i>
+            </button>
+
+            <a href="/src/views/register.jsp" class="button register__submit">
+              <span class="button__text">Register</span>
+              <i class="button__icon fas fa-chevron-right"></i>
+            </a>
+          </form>
+        </div>
+        <div class="screen__background">
+          <span
+            class="screen__background__shape screen__background__shape4"
+          ></span>
+          <span
+            class="screen__background__shape screen__background__shape3"
+          ></span>
+          <span
+            class="screen__background__shape screen__background__shape2"
+          ></span>
+          <span
+            class="screen__background__shape screen__background__shape1"
+          ></span>
+        </div>
+      </div>
+    </div>
+    <script>
+    document.addEventListener("DOMContentLoaded", () => {
+      const loginButton = document.querySelector(".login__submit");
+      loginButton.addEventListener("click", function (event) {
+        event.preventDefault();
+        loginUser(getUserInput());
+      });
+    });
+
+    document.addEventListener("DOMContentLoaded", () => {
+      const registerButton = document.querySelector(".register__submit");
+
+      registerButton.addEventListener("click", function (event) {
+        event.preventDefault();
+        const urlSignUpPage = "http://localhost:8080/QuesApp/signUp";
+        window.location.href = urlSignUpPage;
+      });
+    });
+
+    function getUserInput() {
+      const emailInput = document.querySelector(
+        '.login__input[placeholder="Email"]'
+      );
+      const passwordInput = document.querySelector(
+        '.login__input[placeholder="Password"]'
+      );
+
+      return { emailInput, passwordInput };
+    }
+
+    async function myFetch(url, options) {
+      try {
+        const response = await fetch(url, options);
+        return response;
+      } catch (error) {
+        console.log("2", error.message);
+        alert(error.message);
+      }
+    }
+
+    async function sendUserData(data) {
+      const url = "http://localhost:8080/QuesApp/login";
+
+      const options = {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify(data),
+      };
+
+      try {
+        const response = await myFetch(url, options);
+        const responseData = await response.json();
+        return responseData;
+      } catch (error) {
+        console.log("phuc");
+        alert(error.message);
+      }
+    }
+
+    async function loginUser(inputUser) {
+      const email = inputUser.emailInput;
+      const password = inputUser.passwordInput;
+
+      if (email && password) {
+        const user = {
+          email: email.value,
+          password: password.value,
+        };
+
+        try {
+          const authenticated = await sendUserData(user);
+          console.log("lc", authenticated);
+          if (authenticated.success) {
+            alert(authenticated.message);
+            const urlHomePage = "http://localhost:8080/QuesApp/home";
+            window.location.href = urlHomePage;
+          } else {
+            throw new Error(authenticated.message);
+          }
+        } catch (error) {
+          console.log("phuc1");
+          alert(error.message);
+        }
+      } else {
+        console.error("Không thể tìm thấy các phần tử input.");
+      }
+    }
+
+    </script>
+  </body>
+</html>
Index: src/main/java/com/example/entity/Answer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/entity/Answer.java b/src/main/java/com/example/entity/Answer.java
new file mode 100644
--- /dev/null	(date 1705651158457)
+++ b/src/main/java/com/example/entity/Answer.java	(date 1705651158457)
@@ -0,0 +1,59 @@
+package com.example.entity;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+public class Answer {
+    private int idAnswer;
+    private String contentOption;
+    private boolean isCorrect;
+    private int idQuestion;
+
+    public Answer() {
+    }
+
+    @JsonCreator
+    public Answer(
+            @JsonProperty("idAnswer") int idAnswer,
+            @JsonProperty("contentOption") String contentOption,
+            @JsonProperty("isCorrect") boolean isCorrect,
+            @JsonProperty("idQuestion") int idQuestion) {
+        this.idAnswer = idAnswer;
+        this.contentOption = contentOption;
+        this.isCorrect = isCorrect;
+        this.idQuestion = idQuestion;
+    }
+
+
+    public int getIdAnswer() {
+        return idAnswer;
+    }
+
+    public void setIdAnswer(int idAnswer) {
+        this.idAnswer = idAnswer;
+    }
+
+    public String getContentOption() {
+        return contentOption;
+    }
+
+    public void setContentOption(String contentOption) {
+        this.contentOption = contentOption;
+    }
+
+    public boolean isCorrect() {
+        return isCorrect;
+    }
+
+    public void setCorrect(boolean correct) {
+        isCorrect = correct;
+    }
+
+    public int getIdQuestion() {
+        return idQuestion;
+    }
+
+    public void setIdQuestion(int idQuestion) {
+        this.idQuestion = idQuestion;
+    }
+}
Index: src/main/java/com/example/entity/Subject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/entity/Subject.java b/src/main/java/com/example/entity/Subject.java
new file mode 100644
--- /dev/null	(date 1708495779946)
+++ b/src/main/java/com/example/entity/Subject.java	(date 1708495779946)
@@ -0,0 +1,49 @@
+package com.example.entity;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+public class Subject {
+    private String nameSubject;
+
+    private int id;
+
+    private int idUser;
+
+    public int getId() {
+        return id;
+    }
+
+    public int getIdUser() {
+        return idUser;
+    }
+
+    public void setIdUser(int idUser) {
+        this.idUser = idUser;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public Subject() {
+    }
+
+    @JsonCreator
+    public Subject(@JsonProperty("nameSubject") String nameSubject,@JsonProperty("id_subject") int id, @JsonProperty("idUser") int idUser) {
+        this.nameSubject = nameSubject;
+        this.id = id;
+        this.idUser = idUser;
+    }
+
+
+
+    public String getNameSubject() {
+        return nameSubject;
+    }
+
+    public void setNameSubject(String nameSubject) {
+        this.nameSubject = nameSubject;
+    }
+
+}
Index: src/main/java/com/example/viewController/ListQuestionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/viewController/ListQuestionController.java b/src/main/java/com/example/viewController/ListQuestionController.java
new file mode 100644
--- /dev/null	(date 1708683596746)
+++ b/src/main/java/com/example/viewController/ListQuestionController.java	(date 1708683596746)
@@ -0,0 +1,19 @@
+package com.example.viewController;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+
+@WebServlet(urlPatterns = "/listQuestions")
+public class ListQuestionController extends HttpServlet {
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/listQuestion.jsp");
+        dispatcher.forward(request, response);
+    }
+}
Index: src/main/resources/logback.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/logback.xml b/src/main/resources/logback.xml
new file mode 100644
--- /dev/null	(date 1704727206915)
+++ b/src/main/resources/logback.xml	(date 1704727206915)
@@ -0,0 +1,10 @@
+<configuration>
+    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
+        </encoder>
+    </appender>
+    <root level="info">
+        <appender-ref ref="CONSOLE"/>
+    </root>
+</configuration>
Index: src/main/webapp/views/listQuestion.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/listQuestion.jsp b/src/main/webapp/views/listQuestion.jsp
new file mode 100644
--- /dev/null	(date 1709206715665)
+++ b/src/main/webapp/views/listQuestion.jsp	(date 1709206715665)
@@ -0,0 +1,620 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8"
+    pageEncoding="UTF-8"%>
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <link
+      rel="stylesheet"
+      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
+    />
+    <link href="
+        https://cdn.jsdelivr.net/npm/@icon/themify-icons@1.0.1-alpha.3/themify-icons.min.css
+        " rel="stylesheet">
+
+     <style>
+
+     body {
+       background: linear-gradient(90deg, #c7c5f4, #776bcc);
+       margin: 0;
+       font-family: "Raleway", sans-serif;
+       margin-top: 100px;
+     }
+
+     html {
+       font-size: 62.5%;
+     }
+        .header .home,
+         .header .logo-user {
+                width: 40px;
+                height: 40px;
+                border-radius: 50%;
+                margin: 0 5px;
+                cursor: pointer;
+          }
+
+     .header,
+     .body,
+     .footer {
+       margin: auto;
+       padding: 20px;
+       width: 80%;
+       backdrop-filter: blur(5px);
+     }
+
+     .header {
+       display: flex;
+       justify-content: space-between;
+       align-items: center;
+       background: rgba(255, 255, 255, 0.7);
+     }
+
+     .header div {
+       width: 40px;
+       height: 40px;
+       background: #bcb6eb;
+       margin: 0 5px;
+       border-radius: 50%;
+     }
+
+     .header .ti-search {
+       font-size: 20px;
+       color: #757575;
+       border: 2px solid #757575;
+       border-radius: 50%;
+       padding: 10px;
+       transition: all 0.3s ease;
+       margin-right: 10px;
+     }
+
+     .header .ti-search:hover {
+       background-color: #6a679e;
+       color: #fff;
+     }
+
+     .header .icon {
+       font-size: 20px;
+       color: #757575;
+       font-weight: 550;
+       display: flex;
+       justify-content: center;
+       align-items: center;
+       line-height: 40px;
+       text-align: center;
+       transition: transform 0.3s ease, box-shadow 0.3s ease, color 0.3s ease;
+       border-radius: 50%;
+       position: relative;
+     }
+
+     .header .icon:hover {
+       box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
+       color: whitesmoke;
+     }
+
+     .header .icon:hover ~ div {
+       filter: blur(2px);
+     }
+
+     .header .icon[title]:hover::after {
+       content: attr(title);
+       position: absolute;
+       left: 50%;
+       transform: translateX(-50%) translateY(100%);
+       background-color: #6a679e;
+       color: white;
+       font-size: 12px;
+       z-index: 999;
+       justify-content: center;
+     }
+
+     .header .search {
+       flex-grow: 1;
+       height: 60px;
+       background: #fff;
+       border-radius: 30px;
+       margin: 0 5px;
+       display: flex;
+       align-items: center;
+     }
+
+     .header .search_input {
+       border: none;
+       outline: none;
+       background: none;
+       padding: 10px;
+       padding-left: 24px;
+       padding-right: 24px;
+       font-weight: 700;
+       width: 100%;
+       transition: 0.2s;
+       height: 40px;
+       text-align: center;
+       color: #5e5e5f;
+     }
+
+     .header .search_input:focus {
+       border-bottom: 2px solid #6a679e;
+     }
+
+     .header .search_input::placeholder {
+       color: #5e5e5f;
+       font-weight: 700;
+       opacity: 0.7;
+     }
+
+     .header .search:hover .search_input::placeholder {
+       opacity: 1;
+     }
+
+     .header .search:hover .search_input {
+       border-bottom: 2px solid #6a679e;
+     }
+
+
+
+     .body {
+       height: auto;
+       background: rgba(255, 255, 255, 0.7);
+     }
+
+     .list-quiz-button {
+       padding: 10px 20px;
+       background-color: #6c63ac;
+       color: #fff;
+       border: none;
+       border-radius: 5px;
+       cursor: pointer;
+       transition: background-color 0.3s, color 0.3s;
+       display: inline-flex;
+       align-items: center;
+       margin-left: 20px;
+     }
+
+     .list-quiz-button:hover {
+       background-color: #564c88;
+     }
+
+     .list-quiz-button .text-button {
+       font-size: 1.6rem;
+     }
+
+     .add-question {
+       padding: 12px 20px;
+       background-color: #6c63ac;
+       color: #fff;
+       border: none;
+       border-radius: 5px;
+       cursor: pointer;
+       transition: background-color 0.3s, color 0.3s;
+       display: inline-flex;
+       align-items: center;
+       margin-left: 40px;
+       font-size: 1.6rem;
+     }
+
+     .add-question:hover {
+       background: #564c88;
+     }
+
+     .delete,
+     .update {
+       background-color: #6c63ac;
+       color: #fff;
+       border: none;
+       border-radius: 5px;
+       cursor: pointer;
+       transition: background-color 0.3s, color 0.3s;
+       display: inline-flex;
+       align-items: center;
+       padding: 12px 20px;
+       margin-left: 20px;
+     }
+
+     .delete i,
+     .update i {
+       font-size: 16px;
+       color: #fff;
+       transition: color 0.3s ease;
+     }
+
+     .delete:hover,
+     .update:hover {
+       background-color: #564c88;
+     }
+
+     .start-list-button,
+     .add-question,
+     .delete,
+     .update {
+       display: inline-flex;
+       align-items: center;
+     }
+
+     .list-quiz-button,
+     .add-question,
+     .delete,
+     .update {
+       padding: 15px 30px;
+       background-color: #6c63ac;
+       color: #fff;
+       border: none;
+       border-radius: 5px;
+       cursor: pointer;
+       transition: background-color 0.3s, color 0.3s;
+       display: inline-flex;
+       align-items: center;
+       margin-right: 20px;
+     }
+
+     .question {
+       margin-top: 20px;
+     }
+
+     .content-question {
+       background-color: rgba(255, 255, 255, 0.7);
+       padding: 20px;
+       margin-bottom: 20px;
+       text-align: center;
+       border-radius: 10px;
+       font-size: 1.8rem;
+       transition: transform 0.3s ease;
+     }
+
+     .content-question:hover {
+       transform: translateY(-5px);
+     }
+
+     .answers {
+       display: grid;
+       grid-template-columns: repeat(2, 1fr);
+       gap: 0.4rem;
+       font-size: 1.8rem;
+     }
+
+     .answers div {
+       background-color: rgba(255, 255, 255, 0.7);
+       padding: 20px;
+       margin-bottom: 10px;
+       border-radius: 5px;
+       transition: transform 0.3s ease;
+     }
+
+     .answers div:hover {
+       background-color: #e0c2f0;
+     }
+
+     .footer {
+       display: flex;
+       justify-content: space-between;
+       align-items: center;
+       background: rgba(255, 255, 255, 0.7);
+       padding: 15px 20px;
+     }
+
+     .text-button,
+     .num-questions {
+       font-size: 1.8rem;
+     }
+
+     .back-button,
+     .next-button,
+     .num-questions {
+       padding: 15px 30px;
+       background-color: #6c63ac;
+       color: #fff;
+       border: none;
+       border-radius: 5px;
+       cursor: pointer;
+       transition: background-color 0.3s, color 0.3s;
+       display: flex;
+       align-items: center;
+     }
+
+     .back-button:hover,
+     .next-button:hover,
+     .num-questions:hover {
+       background-color: #564c88;
+     }
+
+
+      </style>
+
+    <title>List Question</title>
+  </head>
+  <body>
+    <div class="header">
+      <div class="home">
+        <i class="ti ti-home icon" title="Home"></i>
+      </div>
+      <div class="search">
+        <input
+          type="text"
+          class="search_input"
+          placeholder="Enter Name Your Subject"
+        />
+        <i class="ti ti-search"></i>
+      </div>
+       <div class="logo-user">
+              <i class="ti ti-user icon"></i>
+       </div>
+    </div>
+
+    <div class="body">
+      <div class="list-quiz-button">
+        <span class="text-button">List Exam</span>
+      </div>
+
+      <div class="add-question">
+        <i class="ti ti-plus icon"></i>
+      </div>
+
+      <div class="delete">
+        <i class="ti ti-trash icon" title="Delete"></i>
+      </div>
+
+      <div class="update">
+        <i class="ti ti-settings icon" title="Update"></i>
+      </div>
+
+      <div class="question">
+        <div class="content-question">
+          <span class="text-question"></span>
+        </div>
+
+        <div class="answers">
+          <div class="answerA" >
+            <span class="text-answer" id ="1"></span>
+          </div>
+          <div class="answerB">
+            <span class="text-answer"  id ="2"></span>
+          </div>
+          <div class="answerC">
+            <span class="text-answer"  id ="3"></span>
+          </div>
+          <div class="answerD">
+            <span class="text-answer"  id ="4"></span>
+          </div>
+        </div>
+      </div>
+    </div>
+    <div class="footer">
+      <div class="back-button">
+        <span class="text-button">Back</span>
+      </div>
+      <div class="num-questions"></div>
+
+      <div class="next-button">
+        <span class="text-button">Next</span>
+      </div>
+    </div>
+
+    <script>
+     // homeButton
+         document.addEventListener("DOMContentLoaded", () => {
+         const homeButton = document.querySelector(".home");
+         homeButton.addEventListener("click", () => {
+         const urlHomePage = "http://localhost:8080/QuesApp/home";
+         window.location.href = urlHomePage;
+         });
+       });
+
+
+     // listExamButton
+   document.addEventListener("DOMContentLoaded", () => {
+   const listQuizButton = document.querySelector(".list-quiz-button");
+   listQuizButton.addEventListener("click",  () => {
+    const urlListExamPage = "http://localhost:8080/QuesApp/exams"
+    window.location.href = urlListExamPage;
+   });
+ });
+
+
+     // addButton
+   document.addEventListener("DOMContentLoaded", () => {
+   const addQuestionButton = document.querySelector(".add-question");
+   addQuestionButton.addEventListener("click",  () => {
+    const urlCreateQuestionFormPage = "http://localhost:8080/QuesApp/createQuestionForm"
+    window.location.href = urlCreateQuestionFormPage;
+   });
+ });
+
+
+
+
+
+     // renderQuestion
+    let questionsData;
+    let indexCurrentQuestion = 0;
+
+         document.addEventListener("DOMContentLoaded",async ()=>{
+                 try {
+                         questionsData = await getQuestionsData();
+                         let data = questionsData.data
+                         console.log(data);
+                         renderPositionAndNumQuestions(data, indexCurrentQuestion);
+                         renderQuestion(data,indexCurrentQuestion);
+
+                     } catch (error) {
+                         alert(error.message);
+                     }
+         });
+
+
+
+
+     async function myFetch(url, options) {
+           try {
+             const response = await fetch(url, options);
+             return response;
+           } catch (error) {
+             alert(error.message);
+           }
+         }
+
+
+
+
+    // lay du lieu tat ca cac cau
+        async function getQuestionsData() {
+          const idSubject = localStorage.getItem("idSubject")
+          const url = `http://localhost:8080/QuesApp/auth/questions?subject=${idSubject}`;
+          const options = {
+            method: "GET",
+            headers: {
+              "Content-Type": "application/json",
+            },
+          };
+
+          try {
+            const response = await myFetch(url, options);
+            const responseData = await response.json();
+            return responseData;
+          } catch (error) {
+            alert(error.message);
+          }
+        }
+
+
+
+        // render ra mot cau
+        function renderQuestion(data, indexCurrentQuestion){
+               // lay du lieu tu cau hoi hien tai
+               const currentQuestion = data[indexCurrentQuestion];
+
+               const idQuestion = currentQuestion.idQuestion;
+               localStorage.setItem("idQuestion",idQuestion);
+
+               // lay ra thong tin cua cau hoi hien tai
+               const contentQuestion = currentQuestion.content;
+
+               // render ra noi dung cau hoi
+               const questionContentElement = document.querySelector(".text-question");
+               questionContentElement.textContent = contentQuestion;
+
+               // lay thon tin cac dap an
+               const answers = currentQuestion.answers;
+
+               // render ra noi dung dap an
+               let i = 1;
+               answers.forEach( answer => {
+                const answerContent = answer.contentOption;
+                const answerContentElement = document.getElementById(i.toString());
+                answerContentElement.textContent = answerContent;
+                i++;
+
+               });
+        }
+
+
+
+        // render ra so luong cau hoi va vi tri cau hien tai
+        function renderPositionAndNumQuestions(data, indexCurrentQuestion){
+            const index = indexCurrentQuestion + 1;
+            const numQuestion = data.length;
+            const numQuestionElement = document.querySelector(".num-questions");
+            if(numQuestion === 0){
+                numQuestionElement.textContent = `0/${numQuestion}`;
+            }
+        else{
+
+            numQuestionElement.textContent = `${index}/${numQuestion}`;
+        }
+        }
+
+
+        // click next render ra cau tiep theo an cau mot
+        document.querySelector(".next-button").addEventListener("click", () => {
+            if (indexCurrentQuestion < questionsData.data.length-1) {
+                indexCurrentQuestion++;
+                console.log(indexCurrentQuestion);
+                renderPositionAndNumQuestions(questionsData.data, indexCurrentQuestion);
+                renderQuestion(questionsData.data,indexCurrentQuestion);
+
+                } else {
+                    alert("This is the last question!")
+                 }
+        });
+
+        // click back button render ra cau truoc an cau mot
+         document.querySelector(".back-button").addEventListener("click", () => {
+                    if (indexCurrentQuestion > 0) {
+                        indexCurrentQuestion--;
+                        console.log(indexCurrentQuestion);
+                        renderPositionAndNumQuestions(questionsData.data, indexCurrentQuestion);
+                        renderQuestion(questionsData.data,indexCurrentQuestion);
+
+                        } else {
+                            alert("No previous question!")
+                         }
+                });
+
+
+
+
+
+
+         // deleteButton
+         document.addEventListener("DOMContentLoaded", () => {
+           const deleteButton = document.querySelector(".delete");
+           deleteButton.addEventListener("click",  async () => {
+               await deleteQuestionById();
+
+           });
+         });
+
+
+        async function sendIdQuestionToDelete(idQuestion) {
+                  const url = `http://localhost:8080/QuesApp/auth/questions?id=${idQuestion}`;
+                  const options = {
+                    method: "DELETE",
+                    headers: {
+                      "Content-Type": "application/json",
+                    },
+                  };
+
+                 try {
+                               const response = await myFetch(url, options);
+                               if (response.status === 204) {
+                                     return { success: true, message: `Delete question with id ${idQuestion} successful`};
+                                       }
+                               else{
+                               const responseData = await response.json();
+                               return { success: false, message: responseData.message };
+                               }
+                               } catch (error) {
+                               alert(error.message);
+                               }
+                }
+
+                async function deleteQuestionById(){
+                    try{
+                        const idQuestion = localStorage.getItem("idQuestion");
+                        const messageAfterDelete = await sendIdQuestionToDelete(idQuestion);
+                        if (messageAfterDelete.success) {
+                            alert(messageAfterDelete.message);
+                            location.reload();
+                            } else {
+                            throw new Error(messageAfterDelete.message);
+                            }
+                    }
+                    catch(error){
+                    alert(error.message)
+                    }
+                  }
+
+
+         // updateButton
+        document.addEventListener("DOMContentLoaded", () => {
+        const updateButton = document.querySelector(".update");
+        updateButton.addEventListener("click", () => {
+              const urlUpdateFormQuestionPage = "http://localhost:8080/QuesApp/updateQuestionForm";
+              window.location.href = urlUpdateFormQuestionPage;
+         });
+        });
+
+
+     </script>
+
+  </body>
+</html>
Index: src/main/java/com/example/viewController/HomeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/viewController/HomeController.java b/src/main/java/com/example/viewController/HomeController.java
new file mode 100644
--- /dev/null	(date 1708417874234)
+++ b/src/main/java/com/example/viewController/HomeController.java	(date 1708417874234)
@@ -0,0 +1,19 @@
+package com.example.viewController;
+
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+@WebServlet(urlPatterns = "/home")
+public class HomeController extends HttpServlet {
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/home.jsp");
+        dispatcher.forward(request, response);
+    }
+}
Index: src/main/java/com/example/DTO/SubmitExamDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/DTO/SubmitExamDTO.java b/src/main/java/com/example/DTO/SubmitExamDTO.java
new file mode 100644
--- /dev/null	(date 1706030714122)
+++ b/src/main/java/com/example/DTO/SubmitExamDTO.java	(date 1706030714122)
@@ -0,0 +1,26 @@
+package com.example.DTO;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import java.util.List;
+
+public class SubmitExamDTO {
+
+    private List<AnswerUserDTO> answersUser;
+
+
+
+    public List<AnswerUserDTO> getAnswersUser() {
+        return answersUser;
+    }
+
+    public void setAnswersUser(List<AnswerUserDTO> answersUser) {
+        this.answersUser = answersUser;
+    }
+
+    @JsonCreator
+    public SubmitExamDTO(@JsonProperty("answersUser") List<AnswerUserDTO> answersUser) {
+        this.answersUser = answersUser;
+    }
+}
Index: src/main/resources/db.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/db.properties b/src/main/resources/db.properties
new file mode 100644
--- /dev/null	(date 1704971284845)
+++ b/src/main/resources/db.properties	(date 1704971284845)
@@ -0,0 +1,4 @@
+
+db.url=jdbc:mysql://localhost:3306/ques_app
+db.username = root
+db.password=@Phuc31703
\ No newline at end of file
Index: src/main/java/com/example/DataSource/ConnectionPool.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/DataSource/ConnectionPool.java b/src/main/java/com/example/DataSource/ConnectionPool.java
new file mode 100644
--- /dev/null	(date 1705592543889)
+++ b/src/main/java/com/example/DataSource/ConnectionPool.java	(date 1705592543889)
@@ -0,0 +1,42 @@
+package com.example.DataSource;
+
+import com.mchange.v2.c3p0.ComboPooledDataSource;
+
+import javax.sql.DataSource;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.Properties;
+
+
+public class ConnectionPool
+    {
+        private static final String DB_USERNAME="db.username";
+        private static final String DB_PASSWORD="db.password";
+        private static final String DB_URL ="db.url";
+
+        private static Properties properties = null;
+        private static ComboPooledDataSource dataSource;
+        static{
+            try {
+                properties = new Properties();
+                properties.load(new FileInputStream("src/main/resources/db.properties"));
+
+                dataSource = new ComboPooledDataSource();
+
+                dataSource.setJdbcUrl(properties.getProperty(DB_URL));
+                dataSource.setUser(properties.getProperty(DB_USERNAME));
+                dataSource.setPassword(properties.getProperty(DB_PASSWORD));
+
+                dataSource.setMinPoolSize(100);
+                dataSource.setMaxPoolSize(1000);
+                dataSource.setAcquireIncrement(5);
+
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+
+        public static DataSource getDataSource(){
+            return dataSource;
+        }
+}
Index: src/main/java/com/example/APIcontroller/ExamCRUDAPIController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/APIcontroller/ExamCRUDAPIController.java b/src/main/java/com/example/APIcontroller/ExamCRUDAPIController.java
new file mode 100644
--- /dev/null	(date 1709684237579)
+++ b/src/main/java/com/example/APIcontroller/ExamCRUDAPIController.java	(date 1709684237579)
@@ -0,0 +1,108 @@
+package com.example.APIcontroller;
+
+import com.example.DTO.ExamDTO;
+import com.example.DTO.ExamQuestionIdsDTO;
+import com.example.DTO.QuestionAnswerDTO;
+import com.example.DTO.SubmitExamDTO;
+import com.example.ExceptionHandling.DuplicateSubjectException;
+import com.example.mySQLImplDao.*;
+import com.example.service.ExamService;
+import com.example.utility.Helper;
+import com.example.utility.ResponseUtility;
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
+import java.io.IOException;
+import java.time.LocalDateTime;
+import java.util.List;
+
+@WebServlet(urlPatterns = "/auth/exams")
+public class ExamCRUDAPIController extends HttpServlet {
+    private final ExamService examService = new ExamService(new ExamImplDao(),new HistoryImplDao(), new ResultImplDao(),new QuestionImplDao(),new AnswerimplDao());
+
+    private final ObjectMapper mapper = new ObjectMapper();
+
+    @Override
+    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+
+        try {
+            int idSubject = Integer.valueOf(request.getParameter("id_subject"));
+                ExamQuestionIdsDTO examQuestionDTO = mapper.readValue(request.getReader(), ExamQuestionIdsDTO.class);
+
+                ExamQuestionIdsDTO resultExam = examService.createExamOfSubject(idSubject, examQuestionDTO);
+
+                if (resultExam != null) {
+                    ResponseUtility.sendJsonResponse(response, "Create exam successful!",resultExam, HttpServletResponse.SC_CREATED,true);
+                } else {
+                    ResponseUtility.sendJsonResponse(response, "Failed to create exam.", null,HttpServletResponse.SC_BAD_REQUEST,false);
+                }
+        } catch (IllegalArgumentException e) {
+            ResponseUtility.sendJsonResponse(response, e.getMessage(), null,HttpServletResponse.SC_BAD_REQUEST,false);
+        } catch (RuntimeException e) {
+            ResponseUtility.sendJsonResponse(response, "Failed to create exam: " + e.getMessage(), null,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+        }
+    }
+
+
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+
+
+        int idSubject = Integer.valueOf(request.getParameter("id_subject"));
+
+
+        try {
+            List<ExamDTO> examDTOS = examService.getAllExamsOfSubject(idSubject);
+
+            ResponseUtility.sendJsonResponse(response, null,examDTOS, HttpServletResponse.SC_OK,true);
+        } catch (IllegalArgumentException e) {
+            ResponseUtility.sendJsonResponse(response, "Invalid input data. " + e.getMessage(), null,HttpServletResponse.SC_BAD_REQUEST,false);
+        } catch (DuplicateSubjectException e) {
+            ResponseUtility.sendJsonResponse(response, "Duplicate subject error: " + e.getMessage(), null,HttpServletResponse.SC_CONFLICT,false);
+        } catch (RuntimeException e) {
+            e.printStackTrace();
+            ResponseUtility.sendJsonResponse(response, "Error retrieving exams of subject: " + e.getMessage(),null, HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+        }
+    }
+
+    @Override
+    protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+        String idExam = request.getParameter("id_exam");
+
+        try {
+            if(idExam == null || idExam.isEmpty()){
+                ResponseUtility.sendJsonResponse(response, "Invalid or missing 'id' parameter. Please provide a valid integer id.",null, HttpServletResponse.SC_BAD_REQUEST,false);
+                return;
+            }
+            int id = Helper.parseId(idExam);
+            if(id== -1|| !examService.deleteExamById(id)){
+                ResponseUtility.sendJsonResponse(response, "Exam with id " + id + " not found.", null,HttpServletResponse.SC_NOT_FOUND,false);
+                return;
+            }
+            ResponseUtility.sendJsonResponse(response, "Delete Exam with id " + id + " successful", null,HttpServletResponse.SC_NO_CONTENT,true);
+
+        }
+        catch (Exception e){
+            ResponseUtility.sendJsonResponse(response,"Error deleting exam",null,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+
+        }
+
+
+
+
+
+
+
+    }
+}
Index: src/main/java/com/example/service/AuthService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/service/AuthService.java b/src/main/java/com/example/service/AuthService.java
new file mode 100644
--- /dev/null	(date 1706266406001)
+++ b/src/main/java/com/example/service/AuthService.java	(date 1706266406001)
@@ -0,0 +1,70 @@
+package com.example.service;
+
+import com.example.ExceptionHandling.DuplicateUserException;
+import com.example.dao.UserDao;
+import com.example.entity.User;
+import com.example.utility.Encryption;
+
+import java.sql.SQLIntegrityConstraintViolationException;
+
+public class AuthService {
+    private final UserDao userDao;
+
+    public AuthService(UserDao userDao) {
+        this.userDao = userDao;
+    }
+
+    public void register(User user) throws DuplicateUserException {
+        try {
+            // Encrypt password
+            String encryptedPassword = Encryption.encryptPassword(user.getPassword());
+            user.setPassword(encryptedPassword);
+
+            // save user
+            User userCurrent = userDao.create(user);
+            if(userCurrent== null) throw new RuntimeException("Created user failed");
+
+        } catch (DuplicateUserException e) {
+            throw e;
+        } catch (Exception e) {
+            if (isDuplicateKeyException(e)) {
+                throw new DuplicateUserException("Duplicate key error. This user already exists.", e);
+            } else {
+                throw new RuntimeException("Registration failed due to a database error", e);
+            }
+        }
+
+
+
+    }
+    private boolean checkUserPassword(User user, String password) {
+        return user != null && Encryption.checkPassword(password, user.getPassword());
+    }
+
+    public int loginAndGetIdUser(String email, String password) {
+        try {
+            // Find user by email
+            User user = userDao.findUserByEmail(email);
+
+            // Check password
+            if (user != null && checkUserPassword(user, password)) {
+                // if login successful return id user
+                return user.getId_user();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return -1;
+    }
+
+
+
+    private boolean isDuplicateKeyException(Exception e) {
+        return e instanceof SQLIntegrityConstraintViolationException &&
+                e.getMessage() != null && e.getMessage().contains("Duplicate entry");
+    }
+
+
+
+
+}
Index: src/main/java/com/example/entity/Question.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/entity/Question.java b/src/main/java/com/example/entity/Question.java
new file mode 100644
--- /dev/null	(date 1705851118238)
+++ b/src/main/java/com/example/entity/Question.java	(date 1705851118238)
@@ -0,0 +1,45 @@
+package com.example.entity;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+public class Question {
+        private int idQuestion;
+        private String content;
+        private int idSubject;
+
+        public Question() {
+        }
+
+        @JsonCreator
+        public Question( @JsonProperty("id_question") int idQuestion,@JsonProperty("content") String content,@JsonProperty("id_subject") int idSubject) {
+                this.idQuestion = idQuestion;
+                this.content = content;
+                this.idSubject = idSubject;
+        }
+
+
+        public int getIdQuestion() {
+                return idQuestion;
+        }
+
+        public void setIdQuestion(int idQuestion) {
+                this.idQuestion = idQuestion;
+        }
+
+        public String getContent() {
+                return content;
+        }
+
+        public void setContent(String content) {
+                this.content = content;
+        }
+
+        public int getIdSubject() {
+                return idSubject;
+        }
+
+        public void setIdSubject(int idSubject) {
+                this.idSubject = idSubject;
+        }
+}
Index: src/main/java/com/example/dao/Dao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/dao/Dao.java b/src/main/java/com/example/dao/Dao.java
new file mode 100644
--- /dev/null	(date 1705229217874)
+++ b/src/main/java/com/example/dao/Dao.java	(date 1705229217874)
@@ -0,0 +1,15 @@
+package com.example.dao;
+
+import com.example.ExceptionHandling.DuplicateUserException;
+
+import java.util.List;
+
+public interface Dao<T> {
+
+    T create(T T) throws DuplicateUserException;
+    T updateById(int id,T t);
+    boolean deleteById(int id);
+    List<T> findAll();
+
+    T findById(int id);
+}
Index: src/main/java/com/example/APIcontroller/DoExamAPIController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/APIcontroller/DoExamAPIController.java b/src/main/java/com/example/APIcontroller/DoExamAPIController.java
new file mode 100644
--- /dev/null	(date 1709515224146)
+++ b/src/main/java/com/example/APIcontroller/DoExamAPIController.java	(date 1709515224146)
@@ -0,0 +1,123 @@
+package com.example.APIcontroller;
+
+import com.example.DTO.ExamQuestionDetailsDTO;
+import com.example.DTO.SubmitExamDTO;
+import com.example.mySQLImplDao.*;
+import com.example.service.ExamService;
+import com.example.utility.Helper;
+import com.example.utility.ResponseUtility;
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
+import java.io.IOException;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+import java.util.logging.Logger;
+
+
+@WebServlet(urlPatterns = "/auth/do/exams")
+public class DoExamAPIController extends HttpServlet {
+
+    private final ExamService examService = new ExamService(new ExamImplDao(),new HistoryImplDao(), new ResultImplDao(),new QuestionImplDao(),new AnswerimplDao());
+
+    private final ObjectMapper mapper = new ObjectMapper();
+
+
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+
+        String idExamParam = request.getParameter("id_exam");
+
+        try {
+            if (idExamParam == null || idExamParam.isEmpty()) {
+                ResponseUtility.sendJsonResponse(response, "Invalid or missing 'id_exam' parameter. Please provide a valid integer id.",null, HttpServletResponse.SC_BAD_REQUEST,false);
+                return;
+            }
+
+            int idExam = Helper.parseId(idExamParam);
+            if (idExam == -1) {
+                ResponseUtility.sendJsonResponse(response, "Invalid 'id_exam' parameter. Please provide a valid integer id.", null,HttpServletResponse.SC_BAD_REQUEST,false);
+                return;
+            }
+
+            ExamQuestionDetailsDTO examDetails = examService.takeExam(idExam);
+
+
+            // set session attribute thoi gian het bai va thoi gian bat dau
+            HttpSession session = request.getSession(false);
+            if(session == null){
+                ResponseUtility.sendJsonResponse(response, "Unauthorized. Please login.",null, HttpServletResponse.SC_UNAUTHORIZED,false);
+                return;
+            }
+
+
+            LocalDateTime startTime = LocalDateTime.now();
+            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS");
+            String formattedStartTimeString = startTime.format(formatter);
+
+            session.setAttribute("startTime", formattedStartTimeString);
+            session.setAttribute("isTakeExam",true);
+
+            if (examDetails != null) {
+                ResponseUtility.sendJsonResponse(response, null,examDetails, HttpServletResponse.SC_OK,true);
+
+            } else {
+                ResponseUtility.sendJsonResponse(response, "Exam with id " + idExam + " not found.",null, HttpServletResponse.SC_NOT_FOUND,false);
+            }
+        } catch (Exception e) {
+            ResponseUtility.sendJsonResponse(response, "Error processing exam details request.",null, HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+        }
+    }
+
+    @Override
+    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+
+        HttpSession session = request.getSession(false);
+        if(session == null){
+            ResponseUtility.sendJsonResponse(response, "Unauthorized. Please login.", null,HttpServletResponse.SC_UNAUTHORIZED,false);
+            return;
+        }
+
+        try {
+            Boolean isTakeExam = (Boolean) session.getAttribute("isTakeExam");
+            if (isTakeExam != null && isTakeExam) {
+                String idExam = request.getParameter("id_exam");
+                int id = Integer.valueOf(idExam);
+
+                Integer idUser = (Integer) session.getAttribute("id_user");
+                SubmitExamDTO submitExamDTO = mapper.readValue(request.getReader(), SubmitExamDTO.class);
+
+
+                // loi o day
+                String startTimeString = (String) session.getAttribute("startTime");
+                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS");
+                LocalDateTime startTime = LocalDateTime.parse(startTimeString, formatter);
+
+
+
+                examService.submitExam(id,  idUser, startTime, submitExamDTO);
+
+                session.setAttribute("isTakeExam", false);
+
+                ResponseUtility.sendJsonResponse(response, "Exam submitted successfully.", submitExamDTO,HttpServletResponse.SC_OK,true);
+            } else {
+                ResponseUtility.sendJsonResponse(response, "You must take the exam before submitting.", null, HttpServletResponse.SC_BAD_REQUEST, false);
+            }
+        } catch (IllegalArgumentException e) {
+            ResponseUtility.sendJsonResponse(response, e.getMessage(), null, HttpServletResponse.SC_BAD_REQUEST, false);
+        } catch (RuntimeException e) {
+            e.printStackTrace();
+            ResponseUtility.sendJsonResponse(response, e.toString(), null, HttpServletResponse.SC_INTERNAL_SERVER_ERROR, false);
+        }
+    }
+
+}
Index: src/main/java/com/example/viewController/DoExamController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/viewController/DoExamController.java b/src/main/java/com/example/viewController/DoExamController.java
new file mode 100644
--- /dev/null	(date 1709219423866)
+++ b/src/main/java/com/example/viewController/DoExamController.java	(date 1709219423866)
@@ -0,0 +1,18 @@
+package com.example.viewController;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+@WebServlet(urlPatterns = "/doExam")
+public class DoExamController extends HttpServlet {
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/doExam.jsp");
+        dispatcher.forward(request, response);
+    }
+}
\ No newline at end of file
Index: src/main/java/com/example/viewController/UpdateExamFormController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/viewController/UpdateExamFormController.java b/src/main/java/com/example/viewController/UpdateExamFormController.java
new file mode 100644
--- /dev/null	(date 1709221212639)
+++ b/src/main/java/com/example/viewController/UpdateExamFormController.java	(date 1709221212639)
@@ -0,0 +1,20 @@
+package com.example.viewController;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+
+@WebServlet(urlPatterns = "/updateExamForm")
+public class UpdateExamFormController extends HttpServlet {
+
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/updateExamForm.jsp");
+        dispatcher.forward(request, response);
+    }
+}
Index: src/main/java/com/example/service/ExamService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/service/ExamService.java b/src/main/java/com/example/service/ExamService.java
new file mode 100644
--- /dev/null	(date 1709708629747)
+++ b/src/main/java/com/example/service/ExamService.java	(date 1709708629747)
@@ -0,0 +1,189 @@
+package com.example.service;
+
+import com.example.DTO.*;
+import com.example.dao.*;
+import com.example.entity.*;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+import java.time.temporal.ChronoUnit;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class ExamService {
+    private final ExamDao examDao;
+
+    private final HistoryDao historyDao;
+
+    private final ResultDao resultDao;
+
+    private final QuestionDao questionDao;
+
+    private final AnswerDao answerDao;
+
+    public ExamService(ExamDao examDao, HistoryDao historyDao, ResultDao resultDao, QuestionDao questionDao, AnswerDao answerDao) {
+        this.examDao = examDao;
+        this.historyDao = historyDao;
+        this.resultDao = resultDao;
+        this.questionDao = questionDao;
+        this.answerDao = answerDao;
+    }
+
+
+    // tao bai kiem tra
+    public ExamQuestionIdsDTO createExamOfSubject(int idSubject, ExamQuestionIdsDTO examQuestionIdsDTO) {
+        try {
+            List<String> questionIds = examQuestionIdsDTO.getQuestionIds();
+            // phai co it nhat 1 question trong exam thi moi duoc tao
+            if (questionIds == null || questionIds.isEmpty()) {
+                throw new IllegalArgumentException("Exam must have at least one question");
+            }
+
+            List<Integer> listIds = questionIds.stream()
+                    .map(Integer::parseInt)
+                    .toList();
+
+            Exam exam = examQuestionIdsDTO.convertToExam();
+            exam.setIdSubject(idSubject);
+
+            boolean allQuestionIdsValid = true;
+            for (int questionId : listIds) {
+                if (questionId <= 0) {
+                    allQuestionIdsValid = false;
+                    break;
+                }
+
+                Question question = questionDao.findById(questionId);
+                if (question == null || question.getIdSubject() != idSubject) {
+                    allQuestionIdsValid = false;
+                    break;
+                }
+            }
+
+            if (!allQuestionIdsValid) {
+                throw new IllegalArgumentException("Some question Id are invalid");
+            }
+
+            Exam finalExam = examDao.create(exam);
+            int idResultExam = finalExam.getIdExam();
+            questionDao.addQuestionsToExam(listIds,idResultExam);
+
+            return new ExamQuestionIdsDTO(finalExam.getNameExam(), finalExam.getTimeLimit(), questionIds);
+        } catch (IllegalArgumentException e) {
+            throw new RuntimeException(e.getMessage());
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Create exam failed due to a database error", e);
+        }
+    }
+
+
+    // Xoa bai kiem tra theo id
+    public boolean deleteExamById(int idExam){
+        List<Result> results = resultDao.findAllResultOfExam(idExam);
+        results.stream()
+                .forEach(result -> {
+                    int idResult = result.getIdResult();
+                    historyDao.deleteHistoryByResult(idResult);
+                    resultDao.deleteById(idResult);
+                });
+
+        return examDao.deleteById(idExam);
+    }
+
+
+    // lam bai kiem tra
+    public ExamQuestionDetailsDTO takeExam(int idExam){
+        // tu idExam lay ra danh sach cau hoi va cau tra loi tuong ung
+        List<Question> allQuestions = questionDao.findAllQuestionOfExam(idExam);
+        List<QuestionAnswerDTO> allQuestionOfExam = new ArrayList<>();
+        for(var question : allQuestions){
+            int idQuestion = question.getIdQuestion();
+            List<Answer> answerOfQuestion = answerDao.findAllAnswerByQuestion(idQuestion);
+            QuestionAnswerDTO questionAnswerDTO = new QuestionAnswerDTO(question.getContent(),answerOfQuestion,idQuestion);
+            allQuestionOfExam.add(questionAnswerDTO);
+        }
+
+        // tu idExam lay ra exam va bat dau tinh gio dem nguoc
+        Exam exam = examDao.findById(idExam);
+
+        // Lay thoi gian bat dau lam bai
+        LocalDateTime startTime = LocalDateTime.now();
+        int timeLimit = exam.getTimeLimit() / 60;
+        LocalDateTime endTime = startTime.plus(timeLimit, ChronoUnit.MINUTES);
+
+        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS");
+        String isoStartTime = startTime.format(formatter);
+        String isoEndTime = endTime.format(formatter);
+
+        ExamQuestionDetailsDTO examQuestionDetailsDTO = new ExamQuestionDetailsDTO(
+                exam.getNameExam(),
+                exam.getTimeLimit(),
+                allQuestionOfExam
+        );
+
+        return examQuestionDetailsDTO;
+    }
+
+    // nop bai kiem tra => tao result va history
+    public void submitExam(int idExam ,int idUser ,LocalDateTime startTime, SubmitExamDTO submitExamDTO) {
+        LocalDateTime currentTime = LocalDateTime.now();
+        double score = calcScore(idExam, submitExamDTO);
+        try{
+            // Tao result
+            Result result = new Result();
+            result.setIdExam(idExam);
+            result.setScore(score);
+            Result currentRes = resultDao.create(result);
+
+            if(currentRes != null){
+                // Tao history
+                History history = new History();
+                history.setIdUser(idUser);
+                history.setIdResult(currentRes.getIdResult());
+
+                // set thoi gian
+                history.setEndTime(currentTime);
+                history.setStartTime(startTime);
+
+                History currentHis = historyDao.create(history);
+            }
+
+
+        }
+        catch (Exception e){
+            throw new RuntimeException(e);
+        }
+    }
+
+    // ham private tinh score => luu score vao result
+    private double calcScore(int idExam , SubmitExamDTO submitExamDTO) {
+        int numQuestion = questionDao.findAllQuestionOfExam(idExam).size();
+        int numCorrectQuestion = 0;
+        for (var answerUser : submitExamDTO.getAnswersUser()) {
+            Answer answer = answerDao.findById(answerUser.getSelectedAnswerId());
+            if (answer != null && answer.isCorrect()) {
+                ++numCorrectQuestion;
+            }
+        }
+        return (numQuestion > 0) ? ((double) numCorrectQuestion / numQuestion) * 10 : 0;
+    }
+
+
+    public List<ExamDTO> getAllExamsOfSubject(int idSubject){
+        List<Exam> exams = examDao.findAllExamOfSubject(idSubject);
+
+        return exams.stream()
+                .map(exam -> {
+                    List<Question> questions = questionDao.findAllQuestionOfExam(exam.getIdExam());
+                    int numberQuestion = questions.size();
+                    return new ExamDTO(exam.getNameExam(),numberQuestion,exam.getTimeLimit(),exam.getIdExam());
+                }).collect(Collectors.toList());
+    }
+
+
+
+
+}
Index: src/main/java/com/example/mySQLImplDao/UserImplDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/mySQLImplDao/UserImplDao.java b/src/main/java/com/example/mySQLImplDao/UserImplDao.java
new file mode 100644
--- /dev/null	(date 1706664784832)
+++ b/src/main/java/com/example/mySQLImplDao/UserImplDao.java	(date 1706664784832)
@@ -0,0 +1,117 @@
+package com.example.mySQLImplDao;
+
+import com.example.DataSource.ConnectionPool;
+import com.example.ExceptionHandling.DuplicateUserException;
+import com.example.dao.UserDao;
+import com.example.entity.User;
+
+import java.sql.*;
+import java.util.ArrayList;
+import java.util.List;
+
+public class UserImplDao implements UserDao {
+    @Override
+    public User updateById(int id, User user) {
+        return null;
+    }
+
+    @Override
+    public User findById(int id) {
+        String query = "SELECT * FROM users WHERE id_user = ?";
+        User user = null;
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)){
+             preparedStatement.setInt(1,id);
+             ResultSet resultSet = preparedStatement.executeQuery();
+
+             if (resultSet.next()) {
+                 user = new User();
+                 user.setPassword(resultSet.getString("password"));
+                 user.setEmail(resultSet.getString("email"));
+                 user.setUserName(resultSet.getString("userName"));
+                }
+            }
+         catch (SQLException e) {
+            throw new RuntimeException("Error fetching users", e);
+        }
+
+        return user;
+    }
+
+    @Override
+    public User create(User user) throws DuplicateUserException {
+        String query = "INSERT INTO users (email, password, user_name) VALUES (?, ?, ?)";
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setString(1, user.getEmail());
+            preparedStatement.setString(2, user.getPassword());
+            preparedStatement.setString(3, user.getUserName());
+            preparedStatement.executeUpdate();
+        } catch (SQLIntegrityConstraintViolationException e) {
+            throw new DuplicateUserException("Duplicate key error. This user already exists.", e);
+        } catch (SQLException e) {
+            throw new RuntimeException("Registration failed due to a database error", e);
+        }
+        return user;
+    }
+
+
+    @Override
+    public boolean deleteById(int id) {
+        String query = "DELETE FROM users WHERE id_user = ?";
+
+        return true;
+    }
+
+    @Override
+    public List<User> findAll() {
+        String query = "SELECT * FROM users";
+        List<User> userList = new ArrayList<>();
+
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query);
+             ResultSet resultSet = preparedStatement.executeQuery()) {
+
+            while (resultSet.next()) {
+                User user = new User();
+                user.setPassword(resultSet.getString("password"));
+                user.setEmail(resultSet.getString("email"));
+                user.setUserName(resultSet.getString("userName"));
+
+                userList.add(user);
+            }
+        } catch (SQLException e) {
+            throw new RuntimeException("Error fetching users", e);
+        }
+
+        return userList;
+    }
+
+
+
+    @Override
+    public User findUserByEmail(String email) {
+        String query = "SELECT * FROM users WHERE email = ?";
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setString(1, email);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    User user = new User();
+                    user.setPassword(resultSet.getString("password"));
+                    user.setEmail(resultSet.getString("email"));
+                    user.setId_user(resultSet.getInt("id_user"));
+                    return user;
+                }
+            }
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+}
+
+
+
+
+
Index: src/main/java/com/example/DTO/ExamQuestionIdsDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/DTO/ExamQuestionIdsDTO.java b/src/main/java/com/example/DTO/ExamQuestionIdsDTO.java
new file mode 100644
--- /dev/null	(date 1709313682329)
+++ b/src/main/java/com/example/DTO/ExamQuestionIdsDTO.java	(date 1709313682329)
@@ -0,0 +1,52 @@
+package com.example.DTO;
+
+import com.example.entity.Exam;
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import java.util.List;
+
+public class ExamQuestionIdsDTO {
+        private String nameExam;
+        private int timeLimit;
+        private List<String> questionIds;
+
+    public String getNameExam() {
+        return nameExam;
+    }
+
+    public void setNameExam(String nameExam) {
+        this.nameExam = nameExam;
+    }
+
+    public int getTimeLimit() {
+        return timeLimit;
+    }
+
+    public void setTimeLimit(int timeLimit) {
+        this.timeLimit = timeLimit;
+    }
+
+    @JsonCreator
+        public ExamQuestionIdsDTO(@JsonProperty("nameExam") String nameExam, @JsonProperty("timeLimit") int timeLimit, @JsonProperty("questionIds") List<String> questionIds) {
+            this.nameExam = nameExam;
+            this.timeLimit = timeLimit;
+            this.questionIds = questionIds;
+        }
+
+
+        public List<String> getQuestionIds() {
+            return questionIds;
+        }
+
+        public void setQuestionIds(List<String> questionIds) {
+            this.questionIds = questionIds;
+        }
+
+    public Exam convertToExam(){
+        Exam exam = new Exam();
+        exam.setNameExam(this.getNameExam());
+        exam.setTimeLimit(this.getTimeLimit());
+        return exam;
+    }
+}
Index: src/main/java/com/example/APIcontroller/HistoryAPIController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/APIcontroller/HistoryAPIController.java b/src/main/java/com/example/APIcontroller/HistoryAPIController.java
new file mode 100644
--- /dev/null	(date 1708419548853)
+++ b/src/main/java/com/example/APIcontroller/HistoryAPIController.java	(date 1708419548853)
@@ -0,0 +1,45 @@
+package com.example.APIcontroller;
+
+import com.example.DTO.HistoryResultDTO;
+import com.example.mySQLImplDao.*;
+import com.example.service.HistoryService;
+import com.example.utility.ResponseUtility;
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
+import java.io.IOException;
+import java.util.List;
+
+
+@WebServlet(urlPatterns = "/auth/history")
+public class HistoryAPIController extends HttpServlet {
+    private  final ObjectMapper mapper = new ObjectMapper();
+    private final HistoryService historyService = new HistoryService(new ResultImplDao(),new HistoryImplDao(),new SubjectImplDao(),new ExamImplDao(),new QuestionImplDao());
+
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+
+        HttpSession session = request.getSession(false);
+        if (session == null) {
+            ResponseUtility.sendJsonResponse(response, "Unauthorized. Please login.", null,HttpServletResponse.SC_UNAUTHORIZED,false);
+            return;
+        }
+        Integer idUser = (Integer) session.getAttribute("id_user");
+
+        try {
+            List<HistoryResultDTO> historyResultDTOS = historyService.getAllHistoriesOfUser(idUser);
+            ResponseUtility.sendJsonResponse(response, null,historyResultDTOS, HttpServletResponse.SC_OK,true);
+
+        } catch (Exception e) {
+            ResponseUtility.sendJsonResponse(response, "Error retrieving user history.", null,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+        }
+    }
+
+}
Index: src/main/webapp/views/updateExamForm.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/updateExamForm.jsp b/src/main/webapp/views/updateExamForm.jsp
new file mode 100644
--- /dev/null	(date 1709403158375)
+++ b/src/main/webapp/views/updateExamForm.jsp	(date 1709403158375)
@@ -0,0 +1,324 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <title>Update Exam</title>
+    <style>
+
+    body {
+      font-family: Arial, sans-serif;
+      background: linear-gradient(90deg, #c7c5f4, #776bcc);
+      margin: 0;
+      padding: 0;
+    }
+
+    .container {
+      max-width: 800px;
+      margin: 50px auto;
+      padding: 20px;
+      background-color: rgba(255, 255, 255, 0.9);
+      border-radius: 8px;
+      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
+    }
+
+    h2 {
+      text-align: center;
+      color: #6c63ac;
+      margin-bottom: 20px;
+    }
+
+    .form-group {
+      margin-bottom: 20px;
+    }
+
+    label {
+      font-weight: bold;
+      color: #6c63ac;
+    }
+
+    input[type="text"],
+    input[type="number"] {
+      width: calc(100% - 20px);
+      padding: 10px;
+      margin-top: 5px;
+      margin-bottom: 10px;
+      border: 1px solid #ccc;
+      border-radius: 4px;
+      box-sizing: border-box;
+    }
+
+    button[type="button"],
+    button[type="submit"] {
+      width: 100%;
+      padding: 10px;
+      background-color: #8e86d8;
+      color: #fff;
+      border: none;
+      border-radius: 4px;
+      cursor: pointer;
+      transition: background-color 0.3s;
+      margin-top: 20px;
+    }
+
+    button#addQuestionBtn {
+      background-color: #8e86d8;
+    }
+
+    button#addQuestionBtn:hover {
+      background-color: #776bcc;
+    }
+
+    .content-question {
+      font-weight: bold;
+      color: #6c63ac;
+      font-size: 1.2rem;
+      margin-bottom: 10px;
+    }
+
+    .question {
+      background-color: rgba(255, 255, 255, 0.7);
+      padding: 20px;
+      margin-bottom: 20px;
+      border-radius: 10px;
+      font-size: 1.4rem;
+    }
+
+    .text-question {
+      font-size: 1.2rem;
+    }
+
+    .answers {
+      display: grid;
+      grid-template-columns: repeat(2, 1fr);
+      gap: 2rem;
+      font-size: 1.2rem;
+    }
+
+    .answers div {
+      background-color: rgba(255, 255, 255, 0.7);
+      padding: 15px;
+      margin-bottom: 10px;
+      border-radius: 5px;
+      border: 1px solid #ccc;
+    }
+
+
+    </style>
+
+</head>
+<body>
+    <div class="container">
+        <h2>Create Exam</h2>
+        <form id="examForm">
+            <div class="form-group">
+                <label for="exam">Name Exam:</label>
+                <input type="text" id="exam" name="exam" required />
+            </div>
+            <div class="form-group">
+                <label for="timeLimit">Time Limit (minutes):</label>
+                <input type="number" id="timeLimit" name="timeLimit" min="1" required />
+            </div>
+            <div id="questionsContainer">
+
+                </div>
+
+            <button type="button" id="addQuestionBtn">Add Question</button>
+            <button type="submit" class ="createBtn">Update</button>
+            <button type="button" class ="backBtn">Back</button>
+
+        </form>
+    </div>
+
+
+
+ <script>
+// add question button
+document.addEventListener("DOMContentLoaded",()=>{
+    const addQuestionButton = document.querySelector("#addQuestionBtn");
+    addQuestionButton.addEventListener("click",()=>{
+        // hien ra mot trang moi de them cau hoi
+        const urlAddQuestionToExamPage = "http://localhost:8080/QuesApp/addQuestionToExam";
+        window.location.href = urlAddQuestionToExamPage;
+    })
+})
+
+
+// render ra question vua tich
+document.addEventListener("DOMContentLoaded",async ()=>{
+    await renderQuestionSelected();
+    })
+
+
+
+async function myFetch(url, options) {
+      try {
+        const response = await fetch(url, options);
+        console.log("phuc",response);
+        return response;
+      } catch (error) {
+        console.log("2", error.message);
+        alert(error.message);
+      }
+    }
+
+
+
+
+async function getQuestionsSelectedData(listIds){
+    console.log(listIds);
+    const url = `http://localhost:8080/QuesApp/auth/questions?ids=${listIds}`;
+
+          const options = {
+            method: "GET",
+            headers: {
+              "Content-Type": "application/json",
+            },
+          };
+
+          try {
+            const response = await myFetch(url, options);
+            const responseData = await response.json();
+            return responseData;
+          } catch (error) {
+            alert(error.message);
+          }
+}
+
+
+async function renderQuestionSelected() {
+    try {
+        const selectedQuestionIds = JSON.parse(localStorage.getItem("selectedQuestionIds"));
+        const listIds = selectedQuestionIds.join(",");
+
+
+        const questions = await getQuestionsSelectedData(listIds);
+        const data = questions.data;
+
+        const questionsContainer = document.getElementById("questionsContainer");
+        questionsContainer.innerHTML = "";
+
+        data.forEach((question, index) => {
+            // Create a div element for the question
+            const questionDiv = document.createElement("div");
+            questionDiv.classList.add("form-group", "question");
+
+            questionDiv.innerHTML = `
+                <div class="content-question">
+                    <span class="text-question">Question ${index + 1}: ${question.content}</span>
+                </div>
+                <div class="answers">
+                    <div class="answerA">
+                        <span class="text-answer">${question.answers[0].contentOption}</span>
+                    </div>
+                    <div class="answerB">
+                        <span class="text-answer">${question.answers[1].contentOption}</span>
+                    </div>
+                    <div class="answerC">
+                        <span class="text-answer">${question.answers[2].contentOption}</span>
+                    </div>
+                    <div class="answerD">
+                        <span class="text-answer">${question.answers[3].contentOption}</span>
+                    </div>
+                </div>
+            `;
+
+            questionsContainer.appendChild(questionDiv);
+        });
+    } catch (error) {
+        if(!error.message === "Cannot read properties of null (reading 'join')")
+        alert(error.message);
+    }
+}
+
+// get input user
+function getInputUser(){
+    const examValue = document.getElementById("exam").value;
+    const timeLimitValue = document.getElementById("timeLimit").value;
+    return {examValue,timeLimitValue};
+}
+
+
+
+// create exam button
+
+    async function sendExamData(data){
+            const idSubject = localStorage.getItem("idSubject");
+            console.log("messi",idSubject);
+            const url = `http://localhost:8080/QuesApp/auth/exams?id_subject=${idSubject}`;
+              const options = {
+                method: "POST",
+                headers: {
+                  "Content-Type": "application/json",
+                },
+
+                body: JSON.stringify(data),
+              };
+
+              try {
+                const response = await myFetch(url, options);
+                const responseData = await response.json();
+                return responseData;
+              } catch (error) {
+                console.log("phuc");
+                alert(error.message);
+              }
+
+
+    }
+
+    async function createExam(inputValue){
+        const questionIds = JSON.parse(localStorage.getItem("selectedQuestionIds"));
+
+        const nameExam = inputValue.examValue;
+        const timeLimit = inputValue.timeLimitValue;
+
+        if(nameExam && timeLimit && questionIds) {
+                           const exam = {
+                                nameExam: nameExam,
+                                timeLimit: timeLimit * 60,
+                                questionIds: questionIds
+                            };
+                            console.log(JSON.stringify(exam));
+        try {
+                const responseData = await sendExamData(exam);
+                if (responseData.success) {
+                alert(responseData.message);
+                const urlListExamPage = "http://localhost:8080/QuesApp/exams";
+                window.location.href = urlListExamPage;
+                } else {
+                throw new Error(responseSubject.message);
+             }
+            } catch (error) {
+            alert(error.message);
+          }
+            } else {
+                console.error("Không thể tìm thấy các phần tử input.");
+            }
+        }
+
+document.addEventListener("DOMContentLoaded", () => {
+            const createBtn = document.querySelector(".createBtn");
+            createBtn.addEventListener("click", async (event) => {
+                event.preventDefault();
+                await createExam(getInputUser());
+            });
+        });
+
+
+
+// back button
+document.addEventListener("DOMContentLoaded", () => {
+          const backButton = document.querySelector(".backBtn");
+          backButton.addEventListener("click",  () => {
+          localStorage.removeItem("selectedQuestionIds");
+          const listExamUrlPage = "http://localhost:8080/QuesApp/exams";
+          window.location.href = listExamUrlPage;
+              });
+          });
+
+
+ </script>
+</body>
+</html>
Index: src/main/java/com/example/DTO/HistoryResultDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/DTO/HistoryResultDTO.java b/src/main/java/com/example/DTO/HistoryResultDTO.java
new file mode 100644
--- /dev/null	(date 1708274094520)
+++ b/src/main/java/com/example/DTO/HistoryResultDTO.java	(date 1708274094520)
@@ -0,0 +1,101 @@
+package com.example.DTO;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import java.time.LocalDateTime;
+
+public class HistoryResultDTO {
+    private String nameExam;
+    private String nameSubject;
+
+    private int numberQuestion;
+
+    private int timeLimit;
+
+    private int numberCorrectAnswer;
+
+    private String startTime;
+    private String endTime;
+
+    public String getNameExam() {
+        return nameExam;
+    }
+
+    public void setNameExam(String nameExam) {
+        this.nameExam = nameExam;
+    }
+
+    public String getNameSubject() {
+        return nameSubject;
+    }
+
+    public void setNameSubject(String nameSubject) {
+        this.nameSubject = nameSubject;
+    }
+
+    public int getNumberQuestion() {
+        return numberQuestion;
+    }
+
+    public void setNumberQuestion(int numberQuestion) {
+        this.numberQuestion = numberQuestion;
+    }
+
+    public int getTimeLimit() {
+        return timeLimit;
+    }
+
+    public void setTimeLimit(int timeLimit) {
+        this.timeLimit = timeLimit;
+    }
+
+    public int getNumberCorrectAnswer() {
+        return numberCorrectAnswer;
+    }
+
+    public void setNumberCorrectAnswer(int numberCorrectAnswer) {
+        this.numberCorrectAnswer = numberCorrectAnswer;
+    }
+
+    private double score;
+
+    public String getStartTime() {
+        return startTime;
+    }
+
+    public void setStartTime(String startTime) {
+        this.startTime = startTime;
+    }
+
+    public String getEndTime() {
+        return endTime;
+    }
+
+    public void setEndTime(String endTime) {
+        this.endTime = endTime;
+    }
+
+    public double getScore() {
+        return score;
+    }
+
+    public void setScore(double score) {
+        this.score = score;
+    }
+
+
+    @JsonCreator
+    public HistoryResultDTO(@JsonProperty("nameExam") String nameExam,@JsonProperty("nameSubject") String nameSubject,@JsonProperty("numberQuestion") int numberQuestion,@JsonProperty("timeLimit") int timeLimit,@JsonProperty("numberCorrectAnswer") int numberCorrectAnswer, @JsonProperty("startTime") String startTime,
+                            @JsonProperty("endTime")String endTime,
+                            @JsonProperty("score") double score) {
+        this.nameExam = nameExam;
+        this.nameSubject = nameSubject;
+        this.numberQuestion = numberQuestion;
+        this.timeLimit = timeLimit;
+        this.numberCorrectAnswer = numberCorrectAnswer;
+        this.startTime = startTime;
+        this.endTime = endTime;
+        this.score = score;
+    }
+}
Index: src/main/java/com/example/service/HistoryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/service/HistoryService.java b/src/main/java/com/example/service/HistoryService.java
new file mode 100644
--- /dev/null	(date 1709706169911)
+++ b/src/main/java/com/example/service/HistoryService.java	(date 1709706169911)
@@ -0,0 +1,97 @@
+package com.example.service;
+
+import com.example.DTO.HistoryResultDTO;
+import com.example.dao.*;
+import com.example.entity.*;
+
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+import java.util.ArrayList;
+import java.util.List;
+
+public class HistoryService {
+    private final ResultDao resultDao;
+    private final HistoryDao historyDao;
+
+    private final SubjectDao subjectDao;
+
+    private final ExamDao examDao;
+
+    private final QuestionDao questionDao;
+
+
+    public HistoryService(ResultDao resultDao, HistoryDao historyDao, SubjectDao subjectDao, ExamDao examDao, QuestionDao questionDao) {
+        this.resultDao = resultDao;
+        this.historyDao = historyDao;
+        this.subjectDao = subjectDao;
+        this.examDao = examDao;
+        this.questionDao = questionDao;
+    }
+
+
+
+
+    public List<HistoryResultDTO> getAllHistoriesOfUser(int idUser){
+        // lay history
+        List<History> histories = historyDao.findAllHistoriesOfUser(idUser);
+
+        // Neu rong thi tra ve loi luon
+        if(histories.isEmpty()){
+            throw new RuntimeException("History is empty");
+        }
+
+        // lay them thong tin result tuong ung voi cac lich su . result - history la moi quan he 1 : 1
+        List<Result> results = resultDao.findAllResultCorrespondingHistory(histories);
+
+        // Tu results se lay duoc cac bai kiem tra da lam
+//        List<Exam> exams = examDao.findAllExamSubmitted(results);
+
+        // tu cac bai kiem tra da lam se lay duoc bai kiem tra thuoc mon hoc nao
+//        List<Subject> subjects = subjectDao.findAllSubjectFromExam(exams);
+
+
+        // form data time
+        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS");
+
+
+        // his : 1(1) 2(1) 3(2)
+        // res : 1(1) 2(1) 3(2)
+        // exam :1(1) 2(1)
+        // subject: 1
+
+        int size = results.size();
+
+        List<HistoryResultDTO> res = new ArrayList<>();
+
+        for(int i = 0;i < size;++i){
+            // lay thong tin cua Histories
+            LocalDateTime startTime = histories.get(i).getStartTime();
+            LocalDateTime endTime = histories.get(i).getEndTime();
+            String isoStartTime = startTime.format(formatter);
+            String isoEndTime = endTime.format(formatter);
+
+            // lay thong tin cua res
+            Result result = results.get(i);
+            double score = result.getScore();
+
+            // lay thong tin cua exam
+            int idExam = result.getIdExam();
+            Exam exam = examDao.findById(idExam);
+            String nameExam = exam.getNameExam();
+            int timeLimit = exam.getTimeLimit();
+
+            // lay thong tin so luong cau hoi trong bai kiem tra
+            List<Question> questionsOfExam = questionDao.findAllQuestionOfExam(idExam);
+            int numQuestions = questionsOfExam.size();
+            int numCorrectAnswer = (int)(numQuestions * score) / 10;
+
+            // lay thong tin cua mon hoc trong bai kiem tra
+            int idSubject = exam.getIdSubject();
+            Subject subject = subjectDao.findById(idSubject);
+            String nameSubject = subject.getNameSubject();
+
+            res.add(new HistoryResultDTO(nameExam,nameSubject,numQuestions,timeLimit,numCorrectAnswer,isoStartTime,isoEndTime,score));
+        }
+        return res;
+    }
+}
Index: src/main/java/com/example/DTO/ExamDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/DTO/ExamDTO.java b/src/main/java/com/example/DTO/ExamDTO.java
new file mode 100644
--- /dev/null	(date 1709220021014)
+++ b/src/main/java/com/example/DTO/ExamDTO.java	(date 1709220021014)
@@ -0,0 +1,53 @@
+package com.example.DTO;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+public class ExamDTO {
+    private String nameExam;
+    private int numberQuestion;
+
+    private int timeLimit;
+
+    private int idExam;
+
+    public int getIdExam() {
+        return idExam;
+    }
+
+    public void setIdExam(int idExam) {
+        this.idExam = idExam;
+    }
+
+    @JsonCreator
+    public ExamDTO(@JsonProperty("nameExam") String nameExam,@JsonProperty("numberQuestion") int numberQuestion,@JsonProperty("timeLimit") int timeLimit,@JsonProperty("idExam") int idExam) {
+        this.nameExam = nameExam;
+        this.numberQuestion = numberQuestion;
+        this.timeLimit = timeLimit;
+        this.idExam = idExam;
+    }
+
+    public String getNameExam() {
+        return nameExam;
+    }
+
+    public void setNameExam(String nameExam) {
+        this.nameExam = nameExam;
+    }
+
+    public int getNumberQuestion() {
+        return numberQuestion;
+    }
+
+    public void setNumberQuestion(int numberQuestion) {
+        this.numberQuestion = numberQuestion;
+    }
+
+    public int getTimeLimit() {
+        return timeLimit;
+    }
+
+    public void setTimeLimit(int timeLimit) {
+        this.timeLimit = timeLimit;
+    }
+}
Index: src/main/webapp/views/doExam.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/doExam.jsp b/src/main/webapp/views/doExam.jsp
new file mode 100644
--- /dev/null	(date 1709572422052)
+++ b/src/main/webapp/views/doExam.jsp	(date 1709572422052)
@@ -0,0 +1,479 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
+    <style>
+    * {
+      box-sizing: border-box;
+      margin: 0;
+      padding: 0;
+    }
+
+    html {
+      font-size: 62.5%;
+    }
+
+    body {
+      background: linear-gradient(90deg, #c7c5f4, #776bcc);
+      font-family: "Raleway", sans-serif;
+      width: 100%;
+      color: #0e0101;
+    }
+
+    .header,
+    .content,
+    .footer {
+      margin: auto;
+      padding: 20px;
+      width: 80%;
+      backdrop-filter: blur(5px);
+      border-radius: 10px;
+    }
+
+    .header,
+    .footer {
+      display: flex;
+      justify-content: space-between;
+      align-items: center;
+      background-color: rgba(255, 255, 255, 0.7);
+      padding: 15px 20px;
+    }
+
+    .header {
+      margin-top: 40px;
+    }
+
+    .name-exam {
+      font-size: 1.8rem;
+      padding: 10px 20px;
+      background-color: #6c63ac;
+      color: white;
+      border-radius: 5px;
+      transition: transform 0.3s ease;
+    }
+
+    .name-exam:hover {
+      transform: scale(1.1); /* scale on hover */
+    }
+
+    .content {
+      margin-top: 20px;
+      height: auto;
+    }
+
+    .time {
+      display: flex;
+      align-items: center;
+      justify-content: center;
+      margin-bottom: 20px;
+    }
+
+    .clock {
+      width: 100px;
+      height: 100px;
+      background-color: rgba(255, 255, 255, 0.7);
+      border-radius: 50%;
+      border: 3px solid #6c63ac;
+      display: flex;
+      justify-content: center;
+      align-items: center;
+      font-size: 2rem;
+      font-weight: bold;
+      color: #6c63ac;
+      transition: transform 0.3s ease; /* add transition */
+    }
+
+    .clock:hover {
+      transform: rotate(360deg); /* rotate on hover */
+    }
+
+    .content-question {
+      background-color: rgba(255, 255, 255, 0.7);
+      padding: 20px;
+      margin-bottom: 20px;
+      text-align: center;
+      border-radius: 10px;
+      font-size: 1.8rem;
+      transition: transform 0.3s ease;
+    }
+
+    .content-question:hover {
+      transform: translateY(-5px);
+    }
+
+    .answers {
+      display: grid;
+      grid-template-columns: repeat(2, 1fr);
+      gap: 0.4rem;
+      font-size: 1.8rem;
+    }
+
+    .answers div {
+      background-color: rgba(255, 255, 255, 0.7);
+      padding: 20px;
+      margin-bottom: 10px;
+      border-radius: 5px;
+      transition: transform 0.3s ease;
+    }
+
+    .answers div:hover {
+      background-color: #e0c2f0;
+    }
+
+    .footer {
+      margin-top: 20px;
+      height: auto;
+    }
+
+    .text-button,
+    .num-questions {
+      font-size: 1.8rem;
+    }
+
+    .submit {
+      font-size: 1.8rem;
+    }
+
+    .back-button,
+    .next-button,
+    .num-questions,
+    .submit {
+      padding: 15px 30px;
+      background-color: #6c63ac;
+      color: #fff;
+      border: none;
+      border-radius: 5px;
+      cursor: pointer;
+      transition: background-color 0.3s, color 0.3s;
+      display: flex;
+      align-items: center;
+    }
+
+    .back-button:hover,
+    .next-button:hover,
+    .num-questions:hover,
+    .submit:hover {
+      background-color: #564c88;
+    }
+
+
+    .answer.selected {
+      background-color: #e0c2f0;
+    }
+
+
+
+    </style>
+
+    <title>Exam</title>
+</head>
+<body>
+    <div class="header">
+        <div class="name-exam">
+            <span class="text-name-exam"></span>
+        </div>
+<button class="submit" onclick="submitExam()">Submit</button>
+    </div>
+    <div class="content">
+        <div class="time">
+            <div class="clock"></div>
+        </div>
+        <div class="content-question">
+            <span class="text-question"></span>
+        </div>
+        <div class="answers">
+            <div class="answer">
+                <span class="text-answer" id ="1"></span>
+            </div>
+            <div class="answer">
+                <span class="text-answer" id ="2"></span>
+            </div>
+            <div class="answer">
+                <span class="text-answer" id ="3"></span>
+            </div>
+            <div class="answer">
+                <span class="text-answer" id ="4"></span>
+            </div>
+        </div>
+    </div>
+    <div class="footer">
+        <div class="back-button">
+            <span class="text-button">Back</span>
+        </div>
+        <div class="num-questions">1/20</div>
+        <div class="next-button">
+            <span class="text-button">Next</span>
+        </div>
+    </div>
+</body>
+<script>
+
+// render ra cau hoi
+let questionsData;
+let indexCurrentQuestion = 0;
+let answersUser = [];
+
+
+ document.addEventListener("DOMContentLoaded",async ()=>{
+     try {
+         let examData = await getExamData();
+         questionsData = examData.data.questionAnswerDTOS;
+         let dataNameExam = examData.data.nameExam;
+         let dataTimeLimit = examData.data.timeLimit;
+
+         renderNameExamAndTimeLimit(dataNameExam, dataTimeLimit);
+         renderPositionAndNumQuestions(questionsData, indexCurrentQuestion);
+         renderQuestion(questionsData,indexCurrentQuestion);
+
+         let endTime;
+         const storedEndTime = localStorage.getItem("endTime");
+         if (storedEndTime) {
+             endTime = parseInt(storedEndTime, 10);
+         } else {
+             endTime = new Date().getTime() + (dataTimeLimit * 1000);
+             console.log(dataTimeLimit * 60 * 1000);
+             localStorage.setItem("endTime", endTime.toString());
+         }
+          countdownTimer(endTime);
+
+     } catch (error) {
+         alert(error.message);
+     }
+ });
+
+async function myFetch(url, options) {
+   try {
+     const response = await fetch(url, options);
+     return response;
+   } catch (error) {
+     alert(error.message);
+   }
+}
+
+// render nameExam va TimeLimit
+function renderNameExamAndTimeLimit(nameExam, timeLimit) {
+    const nameExamElement = document.querySelector(".text-name-exam");
+    nameExamElement.textContent = nameExam;
+
+    const timeLimitElement = document.querySelector(".clock");
+    const minutes = Math.floor(timeLimit / 60) ;
+    console.log(minutes,"phuc")
+    const seconds = timeLimit % 60;
+    timeLimitElement.textContent = `${minutes}:${formatTime(seconds)}`;
+}
+
+// render ra mot cau
+function renderQuestion(data, indexCurrentQuestion) {
+    document.querySelectorAll('.answer').forEach(ans => ans.classList.remove('selected'));
+
+    const currentQuestion = data[indexCurrentQuestion];
+
+    const idQuestion = currentQuestion.idQuestion;
+    localStorage.setItem("idQuestion", idQuestion);
+
+    const contentQuestion = currentQuestion.content;
+
+    const questionContentElement = document.querySelector(".text-question");
+    questionContentElement.textContent = contentQuestion;
+
+    const answers = currentQuestion.answers;
+
+    let i = 1;
+    answers.forEach(answer => {
+        const answerContent = answer.contentOption;
+        const idAnswer = answer.idAnswer;
+        const answerContentElement = document.getElementById(i.toString());
+        answerContentElement.textContent = answerContent;
+
+        answerContentElement.setAttribute("data-idQuestion", idQuestion);
+        answerContentElement.setAttribute("data-selectedAnswerId", idAnswer);
+
+        i++;
+    });
+
+    const selectedAnswerId = localStorage.getItem(`selectedAnswer_${idQuestion}`);
+    if (selectedAnswerId) {
+        const selectedAnswerElement = document.querySelector(`.answer .text-answer[data-idQuestion="${idQuestion}"][data-selectedAnswerId="${selectedAnswerId}"]`);
+        if (selectedAnswerElement) {
+            selectedAnswerElement.closest('.answer').classList.add('selected');
+        }
+    }
+
+    // Update indexCurrentQuestion and number of questions
+    renderPositionAndNumQuestions(data, indexCurrentQuestion);
+}
+
+
+// render ra so luong cau hoi va vi tri cau hien tai
+function renderPositionAndNumQuestions(data, indexCurrentQuestion){
+    const index = indexCurrentQuestion + 1;
+    const numQuestion = data.length;
+    const numQuestionElement = document.querySelector(".num-questions");
+    if(numQuestion === 0){
+        numQuestionElement.textContent = `0/${numQuestion}`;
+    } else {
+        numQuestionElement.textContent = `${index}/${numQuestion}`;
+    }
+}
+
+// click next render ra cau tiep theo an cau mot
+document.querySelector(".next-button").addEventListener("click", () => {
+    if (indexCurrentQuestion < questionsData.length-1) {
+        indexCurrentQuestion++;
+        renderPositionAndNumQuestions(questionsData, indexCurrentQuestion);
+        renderQuestion(questionsData,indexCurrentQuestion);
+    } else {
+        alert("This is the last question!");
+    }
+});
+
+// click back button render ra cau truoc an cau mot
+document.querySelector(".back-button").addEventListener("click", () => {
+    if (indexCurrentQuestion > 0) {
+        indexCurrentQuestion--;
+        renderPositionAndNumQuestions(questionsData, indexCurrentQuestion);
+        renderQuestion(questionsData,indexCurrentQuestion);
+    } else {
+        alert("No previous question!");
+    }
+});
+
+// render ra thoi gian va ten bai kiem tra
+async function getExamData(){
+    const idSubject = localStorage.getItem("idSubject");
+    const idExam = localStorage.getItem("idExam");
+    const url = `http://localhost:8080/QuesApp/auth/do/exams?id_subject=${idSubject}&id_exam=${idExam}`;
+    const options = {
+        method: "GET",
+        headers: {
+            "Content-Type": "application/json",
+        },
+    };
+
+    try {
+        const response = await myFetch(url, options);
+        const responseData = await response.json();
+        return responseData;
+    } catch (error) {
+        alert(error.message);
+    }
+}
+
+// xu ly dong ho dem nguoc
+ function countdownTimer(endTime) {
+    const countDownDate = new Date(endTime).getTime();
+    const x = setInterval(function() {
+        const now = new Date().getTime();
+        const distance = countDownDate - now;
+
+        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
+        const seconds = Math.floor((distance % (1000 * 60)) / 1000);
+
+        const clockElement = document.querySelector(".clock");
+        clockElement.textContent = formatTime(minutes) + ":" + formatTime(seconds);
+
+        if (distance < 0) {
+            clearInterval(x);
+            clockElement.textContent = "00:00";
+
+            // tu dong submit
+             submitExam();
+
+        }
+    }, 1000);
+}
+
+function formatTime(time) {
+    return time < 10 ? "0" + time : time;
+}
+
+// xu ly khi chon dap an
+document.querySelectorAll('.answer').forEach(answer => {
+    answer.addEventListener('click', () => {
+        handleAnswerSelection(answer);
+    });
+});
+
+function handleAnswerSelection(selectedAnswerElement) {
+    const idQuestion = selectedAnswerElement.querySelector('.text-answer').getAttribute('data-idQuestion');
+        const selectedAnswerId = selectedAnswerElement.querySelector('.text-answer').getAttribute('data-selectedAnswerId');
+        console.log(idQuestion);
+    localStorage.setItem(`selectedAnswer_${idQuestion}`, selectedAnswerId);
+
+    document.querySelectorAll('.answer').forEach(ans => ans.classList.remove('selected'));
+    selectedAnswerElement.classList.add('selected');
+}
+
+// submit button
+async function sendDataToSubmit(data){
+const idSubject = localStorage.getItem("idSubject");
+const idExam = localStorage.getItem("idExam");
+const url = `http://localhost:8080/QuesApp/auth/do/exams?id_subject=${idSubject}&id_exam=${idExam}`;
+
+              const options = {
+                method: "POST",
+                headers: {
+                  "Content-Type": "application/json",
+                },
+                body: JSON.stringify(data),
+              };
+
+              try {
+                const response = await myFetch(url, options);
+                const responseData = await response.json();
+                return responseData;
+              } catch (error) {
+                console.log("phuc");
+                alert(error.message);
+              }
+}
+
+
+async function submitExam() {
+    let answersUser = [];
+    for (let i = 0; i < questionsData.length; i++) {
+        const idQuestion = questionsData[i].idQuestion;
+        const selectedAnswerId = localStorage.getItem(`selectedAnswer_${idQuestion}`);
+        if (selectedAnswerId) {
+            answersUser.push({
+                idQuestion: idQuestion,
+                selectedAnswerId: parseInt(selectedAnswerId)
+            });
+        }
+    }
+
+    const data = { answersUser: answersUser };
+    try {
+        const response = await sendDataToSubmit(data);
+
+
+        if(response.success){
+                //xoa localStorage
+                // xoa het selectedAnswer_
+                localStorage.clear();
+
+                alert(response.message);
+                const urlHistoryPage = "http://localhost:8080/QuesApp/history";
+                window.location.href = urlHistoryPage;
+
+
+        }
+        else{
+            console.log(response);
+            throw new Error(response.message);
+        }
+    } catch (error) {
+        console.log("phuc1");
+        alert(error.message);
+    }
+}
+
+
+
+
+
+</script>
+</html>
Index: src/main/java/com/example/utility/TokenBucketAlgorithm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/utility/TokenBucketAlgorithm.java b/src/main/java/com/example/utility/TokenBucketAlgorithm.java
new file mode 100644
--- /dev/null	(date 1706549570367)
+++ b/src/main/java/com/example/utility/TokenBucketAlgorithm.java	(date 1706549570367)
@@ -0,0 +1,48 @@
+package com.example.utility;
+
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+
+public class TokenBucketAlgorithm {
+    private int bucketSize;
+    private int numberOfTokenAvailable;
+    private int refillRate;
+
+    private long intervalRefill;
+
+    public TokenBucketAlgorithm(int bucketSize, int refillRate) {
+        this.bucketSize = bucketSize;
+        this.refillRate = refillRate;
+        this.numberOfTokenAvailable = bucketSize;
+        this.intervalRefill = refillRate/1000;
+
+        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
+
+
+
+
+        try {
+            scheduler.scheduleAtFixedRate(this::refillToken, 0, intervalRefill, TimeUnit.MILLISECONDS);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    public synchronized boolean tryConsumeToken() {
+        if (numberOfTokenAvailable > 0) {
+            numberOfTokenAvailable--;
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    private synchronized void refillToken() {
+        if (numberOfTokenAvailable < bucketSize) {
+            numberOfTokenAvailable++;
+        }
+    }
+
+
+}
Index: src/main/java/com/example/utility/ResponseUtility.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/utility/ResponseUtility.java b/src/main/java/com/example/utility/ResponseUtility.java
new file mode 100644
--- /dev/null	(date 1707929045532)
+++ b/src/main/java/com/example/utility/ResponseUtility.java	(date 1707929045532)
@@ -0,0 +1,43 @@
+package com.example.utility;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.io.PrintWriter;
+
+public class ResponseUtility {
+    private final String message;
+    private final int statusCode;
+    private static final ObjectMapper mapper = new ObjectMapper();
+
+
+    public ResponseUtility(String message, int statusCode) {
+        this.message = message;
+        this.statusCode = statusCode;
+    }
+
+
+    public static void sendJsonResponse(HttpServletResponse response,String message, Object data, int statusCode,Boolean isSuccess) throws IOException {
+        PrintWriter out = response.getWriter();
+        ObjectMapper mapper = new ObjectMapper();
+
+        RestAPIResponse apiResponse = new RestAPIResponse();
+        apiResponse.setData(data);
+        apiResponse.setIsSuccess(isSuccess);
+        apiResponse.setStatus(statusCode);
+        apiResponse.setMessage(message);
+
+        String jsonResponse = mapper.writeValueAsString(apiResponse);
+
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+        response.setStatus(statusCode);
+
+        out.print(jsonResponse);
+        out.flush();
+    }
+
+
+
+}
Index: src/main/java/com/example/viewController/UpdateQuestionFormController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/viewController/UpdateQuestionFormController.java b/src/main/java/com/example/viewController/UpdateQuestionFormController.java
new file mode 100644
--- /dev/null	(date 1709049575154)
+++ b/src/main/java/com/example/viewController/UpdateQuestionFormController.java	(date 1709049575154)
@@ -0,0 +1,18 @@
+package com.example.viewController;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+@WebServlet(urlPatterns = "/updateQuestionForm")
+public class UpdateQuestionFormController extends HttpServlet {
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/updateQuestionForm.jsp");
+        dispatcher.forward(request, response);
+    }
+}
Index: src/main/java/com/example/dao/HistoryDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/dao/HistoryDao.java b/src/main/java/com/example/dao/HistoryDao.java
new file mode 100644
--- /dev/null	(date 1709708629764)
+++ b/src/main/java/com/example/dao/HistoryDao.java	(date 1709708629764)
@@ -0,0 +1,13 @@
+package com.example.dao;
+
+import com.example.entity.History;
+
+import java.util.List;
+
+public interface HistoryDao extends Dao<History>{
+    List<History> findAllHistoriesOfUser(int idUser);
+
+    boolean deleteHistoryByResult(int idResult);
+
+    History findHistoryByResult(int idResult);
+}
Index: src/main/java/com/example/mySQLImplDao/HistoryImplDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/mySQLImplDao/HistoryImplDao.java b/src/main/java/com/example/mySQLImplDao/HistoryImplDao.java
new file mode 100644
--- /dev/null	(date 1709708629757)
+++ b/src/main/java/com/example/mySQLImplDao/HistoryImplDao.java	(date 1709708629757)
@@ -0,0 +1,195 @@
+package com.example.mySQLImplDao;
+
+import com.example.DataSource.ConnectionPool;
+import com.example.ExceptionHandling.DuplicateUserException;
+import com.example.dao.HistoryDao;
+import com.example.entity.Answer;
+import com.example.entity.Exam;
+import com.example.entity.History;
+
+import java.sql.*;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.List;
+
+public class HistoryImplDao implements HistoryDao {
+    @Override
+    public History findHistoryByResult(int idResult) {
+        String query = "SELECT * FROM history WHERE id_result = ?";
+        History history = null;
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setInt(1, idResult);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    // set time
+                    Timestamp startTimeTimestamp = resultSet.getTimestamp("start_time");
+                    Timestamp endTimeTimestamp = resultSet.getTimestamp("end_time");
+                    // Convert Timestamp to LocalDateTime
+                    LocalDateTime startTime = startTimeTimestamp.toLocalDateTime();
+                    LocalDateTime endTime = endTimeTimestamp.toLocalDateTime();
+
+
+                    history.setStartTime(startTime);
+                    history.setEndTime(endTime);
+                    history.setIdUser(resultSet.getInt("id_user"));
+                    history.setIdHistory(resultSet.getInt("id_history"));
+                    history.setIdResult(idResult);
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding history by id due to a database error", e);
+        }
+
+        return history;
+    }
+
+    @Override
+    public boolean deleteHistoryByResult(int idResult) {
+        String query = "DELETE FROM history WHERE id_result = ?";
+        try(Connection connection = ConnectionPool.getDataSource().getConnection();
+            PreparedStatement preparedStatement = connection.prepareStatement(query)){
+            preparedStatement.setInt(1,idResult);
+            int rowAffected = preparedStatement.executeUpdate();
+            if(rowAffected > 0) return true;
+        }
+        catch (Exception e) {
+            throw new RuntimeException("Delete results failed", e);
+        }
+        return false;
+    }
+
+    @Override
+    public List<History> findAllHistoriesOfUser(int idUser) {
+        String query = "SELECT * FROM history WHERE id_user = ?";
+        List<History> histories = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setInt(1, idUser);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    int idResult = resultSet.getInt("id_result");
+                    Timestamp startTimeTimestamp = resultSet.getTimestamp("start_time");
+                    Timestamp endTimeTimestamp = resultSet.getTimestamp("end_time");
+
+                    // Convert Timestamp to LocalDateTime
+                    LocalDateTime startTime = startTimeTimestamp.toLocalDateTime();
+                    LocalDateTime endTime = endTimeTimestamp.toLocalDateTime();
+
+                    int idHistory = resultSet.getInt("id_history");
+                    var history = new History(idHistory, idResult, startTime, endTime, idUser);
+                    histories.add(history);
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Error finding histories of user due to a database error", e);
+        }
+
+        return histories;
+    }
+
+
+    @Override
+    public History create(History history) throws DuplicateUserException {
+        String query = "INSERT INTO history (id_result, start_time, end_time,id_user) VALUES (?, ?, ?, ?)";
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
+            preparedStatement.setInt(1, history.getIdResult());
+            preparedStatement.setTimestamp(2, Timestamp.valueOf(history.getStartTime()));
+            preparedStatement.setTimestamp(3, Timestamp.valueOf(history.getEndTime()));
+            preparedStatement.setInt(4,history.getIdUser());
+            preparedStatement.executeUpdate();
+
+
+            try (ResultSet resultSet = preparedStatement.getGeneratedKeys()) {
+                if (resultSet.next()) {
+                    // 1 is the column index of the generated key
+                    history.setIdHistory(resultSet.getInt(1));
+                } else {
+                    throw new SQLException("Creating history, no ID obtained.");
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Create history failed due to a database error", e);
+        }
+        return history;
+    }
+
+    @Override
+    public History updateById(int id, History history) {
+        return null;
+    }
+
+    @Override
+    public boolean deleteById(int id) {
+        return false;
+    }
+
+    @Override
+    public List<History> findAll() {
+        String query = "SELECT * FROM history";
+        List<History> histories = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    var history = new History();
+
+
+                    // set time
+                    Timestamp startTimeTimestamp = resultSet.getTimestamp("start_time");
+                    Timestamp endTimeTimestamp = resultSet.getTimestamp("end_time");
+                    // Convert Timestamp to LocalDateTime
+                    LocalDateTime startTime = startTimeTimestamp.toLocalDateTime();
+                    LocalDateTime endTime = endTimeTimestamp.toLocalDateTime();
+
+
+                    history.setStartTime(startTime);
+                    history.setEndTime(endTime);
+                    history.setIdUser(resultSet.getInt("id_user"));
+                    history.setIdHistory(resultSet.getInt("id_history"));
+                    history.setIdResult(resultSet.getInt("id_result"));
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding all histories due to a database error", e);
+        }
+
+        return histories;
+    }
+
+
+    @Override
+    public History findById(int id) {
+        String query = "SELECT * FROM history WHERE id_history = ?";
+
+        History history = null;
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setInt(1, id);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    // set time
+                    Timestamp startTimeTimestamp = resultSet.getTimestamp("start_time");
+                    Timestamp endTimeTimestamp = resultSet.getTimestamp("end_time");
+                    // Convert Timestamp to LocalDateTime
+                    LocalDateTime startTime = startTimeTimestamp.toLocalDateTime();
+                    LocalDateTime endTime = endTimeTimestamp.toLocalDateTime();
+
+
+                    history.setStartTime(startTime);
+                    history.setEndTime(endTime);
+                    history.setIdUser(resultSet.getInt("id_user"));
+                    history.setIdHistory(resultSet.getInt("id_history"));
+                    history.setIdResult(resultSet.getInt("id_result"));
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding history by id due to a database error", e);
+        }
+
+        return history;
+    }
+}
Index: src/main/webapp/views/createExamForm.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/createExamForm.jsp b/src/main/webapp/views/createExamForm.jsp
new file mode 100644
--- /dev/null	(date 1709314674358)
+++ b/src/main/webapp/views/createExamForm.jsp	(date 1709314674358)
@@ -0,0 +1,324 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <title>Create Exam</title>
+    <style>
+
+    body {
+      font-family: Arial, sans-serif;
+      background: linear-gradient(90deg, #c7c5f4, #776bcc);
+      margin: 0;
+      padding: 0;
+    }
+
+    .container {
+      max-width: 800px;
+      margin: 50px auto;
+      padding: 20px;
+      background-color: rgba(255, 255, 255, 0.9);
+      border-radius: 8px;
+      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
+    }
+
+    h2 {
+      text-align: center;
+      color: #6c63ac;
+      margin-bottom: 20px;
+    }
+
+    .form-group {
+      margin-bottom: 20px;
+    }
+
+    label {
+      font-weight: bold;
+      color: #6c63ac;
+    }
+
+    input[type="text"],
+    input[type="number"] {
+      width: calc(100% - 20px);
+      padding: 10px;
+      margin-top: 5px;
+      margin-bottom: 10px;
+      border: 1px solid #ccc;
+      border-radius: 4px;
+      box-sizing: border-box;
+    }
+
+    button[type="button"],
+    button[type="submit"] {
+      width: 100%;
+      padding: 10px;
+      background-color: #8e86d8;
+      color: #fff;
+      border: none;
+      border-radius: 4px;
+      cursor: pointer;
+      transition: background-color 0.3s;
+      margin-top: 20px;
+    }
+
+    button#addQuestionBtn {
+      background-color: #8e86d8;
+    }
+
+    button#addQuestionBtn:hover {
+      background-color: #776bcc;
+    }
+
+    .content-question {
+      font-weight: bold;
+      color: #6c63ac;
+      font-size: 1.2rem;
+      margin-bottom: 10px;
+    }
+
+    .question {
+      background-color: rgba(255, 255, 255, 0.7);
+      padding: 20px;
+      margin-bottom: 20px;
+      border-radius: 10px;
+      font-size: 1.4rem;
+    }
+
+    .text-question {
+      font-size: 1.2rem;
+    }
+
+    .answers {
+      display: grid;
+      grid-template-columns: repeat(2, 1fr);
+      gap: 2rem;
+      font-size: 1.2rem;
+    }
+
+    .answers div {
+      background-color: rgba(255, 255, 255, 0.7);
+      padding: 15px;
+      margin-bottom: 10px;
+      border-radius: 5px;
+      border: 1px solid #ccc;
+    }
+
+
+    </style>
+
+</head>
+<body>
+    <div class="container">
+        <h2>Create Exam</h2>
+        <form id="examForm">
+            <div class="form-group">
+                <label for="exam">Name Exam:</label>
+                <input type="text" id="exam" name="exam" required />
+            </div>
+            <div class="form-group">
+                <label for="timeLimit">Time Limit (minutes):</label>
+                <input type="number" id="timeLimit" name="timeLimit" min="1" required />
+            </div>
+            <div id="questionsContainer">
+
+                </div>
+
+            <button type="button" id="addQuestionBtn">Add Question</button>
+            <button type="submit" class ="createBtn">Create</button>
+            <button type="button" class ="backBtn">Back</button>
+
+        </form>
+    </div>
+
+
+
+ <script>
+// add question button
+document.addEventListener("DOMContentLoaded",()=>{
+    const addQuestionButton = document.querySelector("#addQuestionBtn");
+    addQuestionButton.addEventListener("click",()=>{
+        // hien ra mot trang moi de them cau hoi
+        const urlAddQuestionToExamPage = "http://localhost:8080/QuesApp/addQuestionToExam";
+        window.location.href = urlAddQuestionToExamPage;
+    })
+})
+
+
+// render ra question vua tich
+document.addEventListener("DOMContentLoaded",async ()=>{
+    await renderQuestionSelected();
+    })
+
+
+
+async function myFetch(url, options) {
+      try {
+        const response = await fetch(url, options);
+        console.log("phuc",response);
+        return response;
+      } catch (error) {
+        console.log("2", error.message);
+        alert(error.message);
+      }
+    }
+
+
+
+
+async function getQuestionsSelectedData(listIds){
+    console.log(listIds);
+    const url = `http://localhost:8080/QuesApp/auth/questions?ids=${listIds}`;
+
+          const options = {
+            method: "GET",
+            headers: {
+              "Content-Type": "application/json",
+            },
+          };
+
+          try {
+            const response = await myFetch(url, options);
+            const responseData = await response.json();
+            return responseData;
+          } catch (error) {
+            alert(error.message);
+          }
+}
+
+
+async function renderQuestionSelected() {
+    try {
+        const selectedQuestionIds = JSON.parse(localStorage.getItem("selectedQuestionIds"));
+        const listIds = selectedQuestionIds.join(",");
+
+
+        const questions = await getQuestionsSelectedData(listIds);
+        const data = questions.data;
+
+        const questionsContainer = document.getElementById("questionsContainer");
+        questionsContainer.innerHTML = "";
+
+        data.forEach((question, index) => {
+            // Create a div element for the question
+            const questionDiv = document.createElement("div");
+            questionDiv.classList.add("form-group", "question");
+
+            questionDiv.innerHTML = `
+                <div class="content-question">
+                    <span class="text-question">Question ${index + 1}: ${question.content}</span>
+                </div>
+                <div class="answers">
+                    <div class="answerA">
+                        <span class="text-answer">${question.answers[0].contentOption}</span>
+                    </div>
+                    <div class="answerB">
+                        <span class="text-answer">${question.answers[1].contentOption}</span>
+                    </div>
+                    <div class="answerC">
+                        <span class="text-answer">${question.answers[2].contentOption}</span>
+                    </div>
+                    <div class="answerD">
+                        <span class="text-answer">${question.answers[3].contentOption}</span>
+                    </div>
+                </div>
+            `;
+
+            questionsContainer.appendChild(questionDiv);
+        });
+    } catch (error) {
+        if(!error.message === "Cannot read properties of null (reading 'join')")
+        alert(error.message);
+    }
+}
+
+// get input user
+function getInputUser(){
+    const examValue = document.getElementById("exam").value;
+    const timeLimitValue = document.getElementById("timeLimit").value;
+    return {examValue,timeLimitValue};
+}
+
+
+
+// create exam button
+
+    async function sendExamData(data){
+            const idSubject = localStorage.getItem("idSubject");
+            console.log("messi",idSubject);
+            const url = `http://localhost:8080/QuesApp/auth/exams?id_subject=${idSubject}`;
+              const options = {
+                method: "POST",
+                headers: {
+                  "Content-Type": "application/json",
+                },
+
+                body: JSON.stringify(data),
+              };
+
+              try {
+                const response = await myFetch(url, options);
+                const responseData = await response.json();
+                return responseData;
+              } catch (error) {
+                console.log("phuc");
+                alert(error.message);
+              }
+
+
+    }
+
+    async function createExam(inputValue){
+        const questionIds = JSON.parse(localStorage.getItem("selectedQuestionIds"));
+
+        const nameExam = inputValue.examValue;
+        const timeLimit = inputValue.timeLimitValue;
+
+        if(nameExam && timeLimit && questionIds) {
+                           const exam = {
+                                nameExam: nameExam,
+                                timeLimit: timeLimit * 60,
+                                questionIds: questionIds
+                            };
+                            console.log(JSON.stringify(exam));
+        try {
+                const responseData = await sendExamData(exam);
+                if (responseData.success) {
+                alert(responseData.message);
+                const urlListExamPage = "http://localhost:8080/QuesApp/exams";
+                window.location.href = urlListExamPage;
+                } else {
+                throw new Error(responseSubject.message);
+             }
+            } catch (error) {
+            alert(error.message);
+          }
+            } else {
+                console.error("Không thể tìm thấy các phần tử input.");
+            }
+        }
+
+document.addEventListener("DOMContentLoaded", () => {
+            const createBtn = document.querySelector(".createBtn");
+            createBtn.addEventListener("click", async (event) => {
+                event.preventDefault();
+                await createExam(getInputUser());
+            });
+        });
+
+
+
+// back button
+document.addEventListener("DOMContentLoaded", () => {
+          const backButton = document.querySelector(".backBtn");
+          backButton.addEventListener("click",  () => {
+          localStorage.removeItem("selectedQuestionIds");
+          const listExamUrlPage = "http://localhost:8080/QuesApp/exams";
+          window.location.href = listExamUrlPage;
+              });
+          });
+
+
+ </script>
+</body>
+</html>
Index: src/main/java/com/example/dao/ResultDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/dao/ResultDao.java b/src/main/java/com/example/dao/ResultDao.java
new file mode 100644
--- /dev/null	(date 1709706284084)
+++ b/src/main/java/com/example/dao/ResultDao.java	(date 1709706284084)
@@ -0,0 +1,14 @@
+package com.example.dao;
+
+import com.example.entity.History;
+import com.example.entity.Result;
+
+import java.util.List;
+
+public interface ResultDao extends Dao<Result>{
+    List<Result> findAllResultCorrespondingHistory(List<History> histories);
+
+    boolean deleteResultsByExamId(int idExam);
+
+    List<Result> findAllResultOfExam(int idExam);
+}
Index: src/main/java/com/example/viewController/CreateExamFormController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/viewController/CreateExamFormController.java b/src/main/java/com/example/viewController/CreateExamFormController.java
new file mode 100644
--- /dev/null	(date 1709053318057)
+++ b/src/main/java/com/example/viewController/CreateExamFormController.java	(date 1709053318057)
@@ -0,0 +1,18 @@
+package com.example.viewController;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+@WebServlet(urlPatterns = "/createExamForm")
+public class  CreateExamFormController extends HttpServlet {
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/createExamForm.jsp");
+        dispatcher.forward(request, response);
+    }
+}
Index: src/main/java/com/example/mySQLImplDao/ResultImplDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/mySQLImplDao/ResultImplDao.java b/src/main/java/com/example/mySQLImplDao/ResultImplDao.java
new file mode 100644
--- /dev/null	(date 1709707416366)
+++ b/src/main/java/com/example/mySQLImplDao/ResultImplDao.java	(date 1709707416366)
@@ -0,0 +1,170 @@
+package com.example.mySQLImplDao;
+
+import com.example.DataSource.ConnectionPool;
+import com.example.ExceptionHandling.DuplicateUserException;
+import com.example.dao.ResultDao;
+import com.example.entity.History;
+import com.example.entity.Result;
+import com.example.utility.Helper;
+
+import java.sql.*;
+import java.util.ArrayList;
+import java.util.List;
+
+public class ResultImplDao implements ResultDao {
+
+    @Override
+    public List<Result> findAllResultOfExam(int idExam) {
+        String query = "SELECT * FROM results WHERE id_exam = ?";
+        List<Result> results = new ArrayList<>();
+
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    int idResult = resultSet.getInt("id_result");
+                    double score = resultSet.getDouble("score");
+                    var result = new Result(idResult, idExam, score);
+                    results.add(result);
+                }
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Error finding results corresponding to histories due to a database error", e);
+        }
+
+        return results;
+    }
+
+    @Override
+    public boolean deleteResultsByExamId(int idExam) {
+        String query = "DELETE FROM exams WHERE id_exam = ?";
+        try(Connection connection = ConnectionPool.getDataSource().getConnection();
+            PreparedStatement preparedStatement = connection.prepareStatement(query)){
+            preparedStatement.setInt(1,idExam);
+            int rowAffected = preparedStatement.executeUpdate();
+            if(rowAffected > 0) return true;
+        }
+        catch (Exception e) {
+            throw new RuntimeException("Delete results failed", e);
+        }
+        return false;
+    }
+
+    @Override
+    public List<Result> findAllResultCorrespondingHistory(List<History> histories) {
+        // SELECT * FROM results WHERE id_result IN (?, ? , ? , v.v)
+        String query = "SELECT * FROM results WHERE id_result" + Helper.supportINClause(histories);
+
+        List<Result> results = new ArrayList<>();
+
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            for (int i = 0; i < histories.size(); i++) {
+                preparedStatement.setInt(i + 1, histories.get(i).getIdResult());
+            }
+
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    int idResult = resultSet.getInt("id_result");
+                    int idExam = resultSet.getInt("id_exam");
+                    double score = resultSet.getDouble("score");
+                    var result = new Result(idResult, idExam, score);
+                    results.add(result);
+                }
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Error finding results corresponding to histories due to a database error", e);
+        }
+
+        return results;
+    }
+
+
+
+    @Override
+    public Result create(Result result) throws DuplicateUserException {
+        String query = "INSERT INTO results (id_exam, score) VALUES (?, ?)";
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
+            preparedStatement.setInt(1, result.getIdExam());
+            preparedStatement.setDouble(2, result.getScore());
+            preparedStatement.executeUpdate();
+
+
+            try (ResultSet resultSet = preparedStatement.getGeneratedKeys()) {
+                if (resultSet.next()) {
+                    // 1 is the column index of the generated key
+                    result.setIdResult(resultSet.getInt(1));
+                } else {
+                    throw new SQLException("Creating result, no ID obtained.");
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Create result failed due to a database error", e);
+        }
+        return result;
+    }
+
+    @Override
+    public Result updateById(int id, Result result) {
+        return null;
+    }
+
+    @Override
+    public boolean deleteById(int id) {
+        return false;
+    }
+
+    @Override
+    public List<Result> findAll() {
+        String query = "SELECT * FROM results";
+        List<Result> results = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)){
+            ResultSet resultSet = preparedStatement.executeQuery();
+            while (resultSet.next()) {
+                int idResult = resultSet.getInt("id_result");
+                int idExam = resultSet.getInt("id_exam");
+                double score = resultSet.getDouble("score");
+                var result = new Result(idResult, idExam, score);
+                results.add(result);
+                }
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Error finding all results due to a database error", e);
+        }
+
+        return results;
+     }
+
+    @Override
+    public Result findById(int id) {
+        String query = "SELECT * FROM results WHERE id_result = ?";
+        Result result = null;
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)){
+            preparedStatement.setInt(1,id);
+            ResultSet resultSet = preparedStatement.executeQuery();
+            if (resultSet.next()) {
+                int idResult = resultSet.getInt("id_result");
+                int idExam = resultSet.getInt("id_exam");
+                double score = resultSet.getDouble("score");
+                result = new Result(idResult, idExam, score);
+
+            }
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Error finding result by id due to a database error", e);
+        }
+
+        return result;
+    }
+}
Index: src/main/java/com/example/ExceptionHandling/DuplicateUserException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/ExceptionHandling/DuplicateUserException.java b/src/main/java/com/example/ExceptionHandling/DuplicateUserException.java
new file mode 100644
--- /dev/null	(date 1705220207626)
+++ b/src/main/java/com/example/ExceptionHandling/DuplicateUserException.java	(date 1705220207626)
@@ -0,0 +1,11 @@
+package com.example.ExceptionHandling;
+
+import java.sql.SQLException;
+
+public class DuplicateUserException extends SQLException {
+    public DuplicateUserException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+
+}
Index: src/main/java/com/example/service/SubjectService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/service/SubjectService.java b/src/main/java/com/example/service/SubjectService.java
new file mode 100644
--- /dev/null	(date 1709685288380)
+++ b/src/main/java/com/example/service/SubjectService.java	(date 1709685288380)
@@ -0,0 +1,59 @@
+package com.example.service;
+
+
+import com.example.ExceptionHandling.DuplicateSubjectException;
+import com.example.dao.ExamDao;
+import com.example.dao.SubjectDao;
+import com.example.entity.Subject;
+import java.util.List;
+
+public class SubjectService {
+    private final SubjectDao subjectDao;
+
+    private final ExamDao examDao;
+    public SubjectService(SubjectDao subjectDao, ExamDao examDao) {
+        this.subjectDao = subjectDao;
+        this.examDao = examDao;
+    }
+
+
+    public Subject createSubjectOfUser(Subject subject) {
+        try {
+            // Check if user already has that subject
+            Subject existingSubject = subjectDao.findByName(subject.getNameSubject(), subject.getIdUser());
+
+            if (existingSubject != null) {
+                throw new DuplicateSubjectException("Subject already exists for user " + subject.getIdUser());
+            } else {
+                // Create the subject if it doesn't exist
+                Subject subjectCurrent = subjectDao.create(subject);
+                if(subjectCurrent == null) throw new RuntimeException("Create subject failed due to a database error");
+                return subjectCurrent;
+            }
+        } catch (DuplicateSubjectException e) {
+            throw e;
+        } catch (Exception e) {
+            throw new RuntimeException("Create subject failed due to a database error", e);
+        }
+    }
+
+
+    public List<Subject> getAllSubjectsByUser(int idUser){
+            return subjectDao.findAllSubjetsOfUser(idUser);
+    }
+
+    public Subject getSubjectUserByName(String name,int idUser){
+        return subjectDao.findByName(name,idUser);
+    }
+
+
+    public boolean deleteSubjectById(int id){
+        return examDao.deleteAllExamByIdSubject(id) && subjectDao.deleteById(id);
+    }
+
+    public Subject updateSubjectById(int id, Subject newSubject){
+        return subjectDao.updateById(id,newSubject);
+    }
+
+
+}
Index: src/main/java/com/example/dao/UserDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/dao/UserDao.java b/src/main/java/com/example/dao/UserDao.java
new file mode 100644
--- /dev/null	(date 1704992030016)
+++ b/src/main/java/com/example/dao/UserDao.java	(date 1704992030016)
@@ -0,0 +1,9 @@
+package com.example.dao;
+
+
+import com.example.entity.User;
+
+public interface UserDao extends Dao<User> {
+
+    User findUserByEmail(String email);
+}
Index: src/main/java/com/example/dao/ExamDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/dao/ExamDao.java b/src/main/java/com/example/dao/ExamDao.java
new file mode 100644
--- /dev/null	(date 1709685202190)
+++ b/src/main/java/com/example/dao/ExamDao.java	(date 1709685202190)
@@ -0,0 +1,17 @@
+package com.example.dao;
+
+import com.example.entity.Exam;
+import com.example.entity.Result;
+
+import java.util.List;
+
+public interface ExamDao extends Dao<Exam>{
+    List<Exam> findAllExamOfSubject(int idSubject);
+    List<Exam> findAllExamOfUser(int idUser);
+
+
+    // tim cac bai kiem tra tu result tuong tung
+    List<Exam> findAllExamSubmitted(List<Result> idResults);
+
+    boolean deleteAllExamByIdSubject(int idSubject);
+}
Index: src/main/java/com/example/utility/Validate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/utility/Validate.java b/src/main/java/com/example/utility/Validate.java
new file mode 100644
--- /dev/null	(date 1705662575122)
+++ b/src/main/java/com/example/utility/Validate.java	(date 1705662575122)
@@ -0,0 +1,23 @@
+package com.example.utility;
+
+import com.example.entity.Subject;
+import com.example.entity.User;
+
+public class Validate {
+    public static boolean isInvalidRegisterUserData(User user) {
+        return user.getEmail() == null || user.getEmail().trim().isEmpty() ||
+                user.getUserName() == null || user.getUserName().trim().isEmpty() ||
+                user.getPassword() == null || user.getPassword().trim().isEmpty();
+    }
+
+    public static boolean isInvalidLoginUserData(User user) {
+        return user.getEmail() == null || user.getEmail().trim().isEmpty() ||
+                user.getPassword() == null || user.getPassword().trim().isEmpty();
+    }
+
+    public static boolean isInvalidSubjectUserData(Subject subject) {
+        return subject.getNameSubject() == null || subject.getNameSubject().trim().isEmpty();
+    }
+
+
+}
Index: src/main/webapp/views/updateQuestionForm.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/updateQuestionForm.jsp b/src/main/webapp/views/updateQuestionForm.jsp
new file mode 100644
--- /dev/null	(date 1709050002670)
+++ b/src/main/webapp/views/updateQuestionForm.jsp	(date 1709050002670)
@@ -0,0 +1,236 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8"
+    pageEncoding="UTF-8"%>
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Create Question</title>
+    <style>
+        body {
+            font-family: Arial, sans-serif;
+            background: linear-gradient(90deg, #c7c5f4, #776bcc);
+            margin: 0;
+            padding: 0;
+        }
+
+        .container {
+            max-width: 800px;
+            margin: 50px auto;
+            padding: 20px;
+            background-color: rgba(255, 255, 255, 0.9);
+            border-radius: 8px;
+            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
+        }
+
+        h2 {
+            text-align: center;
+            color: #6c63ac;
+        }
+
+        .form-group {
+            margin-bottom: 20px;
+        }
+
+        label {
+            font-weight: bold;
+            color: #6c63ac;
+            display: block;
+        }
+
+        input[type="text"] {
+            width: calc(100% - 20px);
+            padding: 10px;
+            margin-top: 5px;
+            margin-bottom: 10px;
+            border: 1px solid #ccc;
+            border-radius: 4px;
+            box-sizing: border-box;
+        }
+
+        .option {
+            margin-bottom: 10px;
+        }
+
+        .option input[type="text"],
+        .option input[type="radio"] {
+            vertical-align: middle;
+        }
+
+        .option label {
+            vertical-align: middle;
+            margin-left: 5px;
+        }
+
+        .button-container {
+            text-align: center;
+        }
+
+        button[type="submit"], button[type="button"] {
+            padding: 10px 20px;
+            background-color: #6c63ac;
+            color: #fff;
+            border: none;
+            border-radius: 4px;
+            cursor: pointer;
+            transition: background-color 0.3s;
+            margin-left: 10px;
+        }
+
+        button[type="submit"]:hover, button[type="button"]:hover {
+            background-color: #564c88;
+        }
+
+    </style>
+</head>
+<body>
+    <div class="container">
+        <h2>Create Question</h2>
+        <div id="questionForm">
+            <div class="form-group">
+                <label for="question">Question:</label>
+                <input type="text" id="question" name="question" required />
+            </div>
+            <div class="option">
+                <label for="option1">Option 1:</label>
+                <input type="text" class="option-text content-opt1" name="option" required />
+                <input type="radio" id="option1" name="answer" value="Option 1" />
+            </div>
+            <div class="option">
+                <label for="option2">Option 2:</label>
+                <input type="text" class="option-text content-opt2" name="option" required />
+                <input type="radio" id="option2" name="answer" value="Option 2" />
+            </div>
+            <div class="option">
+                <label for="option3">Option 3:</label>
+                <input type="text" class="option-text content-opt3" name="option" required />
+                <input type="radio" id="option3" name="answer" value="Option 3" />
+            </div>
+            <div class="option">
+                <label for="option4">Option 4:</label>
+                <input type="text" class="option-text content-opt4" name="option" required />
+                <input type="radio" id="option4" name="answer" value="Option 4" />
+            </div>
+            <div class="button-container">
+                <button id = "updateBtn" type="submit">Update</button>
+                <button type="button" onclick="window.history.back()">Back</button>
+            </div>
+        </div>
+    </div>
+
+
+    <script>
+     document.addEventListener("DOMContentLoaded",()=>{
+     const updateButton = document.querySelector("#updateBtn");
+     updateButton.addEventListener("click",async ()=>{
+               await updateQuestion(getUserInput());
+
+
+            });
+     })
+
+
+     async function myFetch(url, options) {
+       try {
+        const response = await fetch(url, options);
+          return response;
+          } catch (error) {
+           console.log("2", error.message);
+           alert(error.message);
+          }
+        }
+
+
+           function getUserInput() {
+               const contentQuestion = document.querySelector("#question");
+               const isCorrectOption1 = document.querySelector("#option1");
+               const contentOption1 = document.querySelector(".content-opt1");
+
+               const isCorrectOption2 = document.querySelector("#option2");
+               const contentOption2 = document.querySelector(".content-opt2");
+
+               const isCorrectOption3 = document.querySelector("#option3");
+               const contentOption3 = document.querySelector(".content-opt3");
+
+               const isCorrectOption4 = document.querySelector("#option4"); // Corrected here
+               const contentOption4 = document.querySelector(".content-opt4");
+
+               return { contentQuestion, isCorrectOption1, isCorrectOption2, isCorrectOption3, isCorrectOption4, contentOption1, contentOption2, contentOption3, contentOption4 };
+           }
+
+
+        async function sendQuestionData(data) {
+              const idQuestion = localStorage.getItem("idQuestion");
+              console.log("phuc",idQuestion);
+              const url = `http://localhost:8080/QuesApp/auth/questions?id=${idQuestion}`;
+              const options = {
+                method: "PUT",
+                headers: {
+                  "Content-Type": "application/json",
+                },
+                body: JSON.stringify(data),
+              };
+
+              try {
+                const response = await myFetch(url, options);
+                const responseData = await response.json();
+                return responseData;
+              } catch (error) {
+                console.log("phuc");
+                alert(error.message);
+              }
+            }
+
+
+            async function updateQuestion(inputUser) {
+
+
+                  const contentQues = inputUser.contentQuestion;
+
+                  const isCorrectOpt1 = inputUser.isCorrectOption1;
+                  const contentOpt1 = inputUser.contentOption1;
+
+                  const isCorrectOpt2 = inputUser.isCorrectOption2;
+                  const contentOpt2 = inputUser.contentOption2;
+
+                  const isCorrectOpt3 = inputUser.isCorrectOption3;
+                  const contentOpt3 = inputUser.contentOption3;
+
+                  const isCorrectOpt4 = inputUser.isCorrectOption4;
+                  const contentOpt4 = inputUser.contentOption4;
+
+
+                  if (contentQues && isCorrectOpt1 && isCorrectOpt2 && isCorrectOpt3 && isCorrectOpt4 && contentOpt1 && contentOpt2 && contentOpt3 && contentOpt4) {
+                    const question = {
+                          content: contentQues.value,
+                          answers: [
+                            { contentOption: contentOpt1.value, isCorrect: isCorrectOpt1.checked },
+                            { contentOption: contentOpt2.value, isCorrect: isCorrectOpt2.checked },
+                            { contentOption: contentOpt3.value, isCorrect: isCorrectOpt3.checked },
+                            { contentOption: contentOpt4.value, isCorrect: isCorrectOpt4.checked },
+                          ]
+                    };
+
+                    try {
+                      const questionData = await sendQuestionData(question);
+                      console.log("lc", questionData);
+                      if (questionData.success) {
+                        alert(questionData.message);
+                        const urlListQuestionPage = "http://localhost:8080/QuesApp/listQuestions";
+                        window.location.href = urlListQuestionPage;
+                      } else {
+                        throw new Error(questionData.message);
+                      }
+                    } catch (error) {
+                      alert(error.message);
+                    }
+                  } else {
+                    console.error("Không thể tìm thấy các phần tử input.");
+                  }
+                }
+
+
+
+     </script>
+</body>
+</html>
Index: src/main/java/com/example/mySQLImplDao/ExamImplDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/mySQLImplDao/ExamImplDao.java b/src/main/java/com/example/mySQLImplDao/ExamImplDao.java
new file mode 100644
--- /dev/null	(date 1709685249775)
+++ b/src/main/java/com/example/mySQLImplDao/ExamImplDao.java	(date 1709685249775)
@@ -0,0 +1,208 @@
+package com.example.mySQLImplDao;
+
+import com.example.DataSource.ConnectionPool;
+import com.example.ExceptionHandling.DuplicateUserException;
+import com.example.dao.ExamDao;
+import com.example.dao.SubjectDao;
+import com.example.entity.Exam;
+import com.example.entity.Question;
+import com.example.entity.Result;
+import com.example.entity.Subject;
+import com.example.utility.Helper;
+
+import java.sql.*;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ExamImplDao implements ExamDao {
+
+
+    @Override
+    public boolean deleteAllExamByIdSubject(int idSubject) {
+        String query = "DELETE FROM exams WHERE id_subject = ?";
+        try(Connection connection = ConnectionPool.getDataSource().getConnection();
+            PreparedStatement preparedStatement = connection.prepareStatement(query)){
+            preparedStatement.setInt(1,idSubject);
+            int rowAffected = preparedStatement.executeUpdate();
+            if(rowAffected > 0) return true;
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Delete Exam failed", e);
+        }
+        return false;    }
+
+    @Override
+    public List<Exam> findAllExamSubmitted(List<Result> listResults) {
+        // SELECT * FROM results WHERE id_result IN (?, ? , ? , v.v)
+        String query = "SELECT * FROM exams WHERE id_exam" + Helper.supportINClause(listResults);
+        List<Exam> exams = new ArrayList<>();
+
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            for (int i = 0; i < listResults.size(); i++) {
+                preparedStatement.setInt(i + 1, listResults.get(i).getIdExam());
+            }
+
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    int idExam = resultSet.getInt("id_exam");
+                    int idSubject = resultSet.getInt("id_subject");
+                    String nameExam = resultSet.getString("name_exam");
+                    int timeLimit = resultSet.getInt("time_limit");
+                    var exam = new Exam(idExam,nameExam,timeLimit,idSubject);
+                    exams.add(exam);
+                }
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Error finding exams corresponding to results due to a database error", e);
+        }
+
+        return exams;
+    }
+
+    @Override
+    public List<Exam> findAllExamOfUser(int idUser) {
+        String query = "SELECT * FROM exams INNER JOIN subjects ON exams.id_subject = subjects.id_subject INNER JOIN users ON subject.id_user = users.id_user WHERE users.id_user = ?";
+        List<Exam> exams = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setInt(1, idUser);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    var exam = new Exam();
+                    exam.setNameExam(resultSet.getString("name_exam"));
+                    exam.setTimeLimit(resultSet.getInt("time_limit"));
+                    exam.setIdSubject(resultSet.getInt("id_subject"));
+                    exam.setIdExam(resultSet.getInt("id_exam"));
+                    exams.add(exam);
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding exams by id user due to a database error", e);
+        }
+
+        return exams;
+    }
+
+    @Override
+    public List<Exam> findAllExamOfSubject(int idSubject) {
+        String query = "SELECT * FROM exams WHERE id_subject = ?";
+        List<Exam> exams = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setInt(1, idSubject);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    var exam = new Exam();
+                    exam.setNameExam(resultSet.getString("name_exam"));
+                    exam.setTimeLimit(resultSet.getInt("time_limit"));
+                    exam.setIdSubject(resultSet.getInt("id_subject"));
+                    exam.setIdExam(resultSet.getInt("id_exam"));
+                    exams.add(exam);
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding exams by id subject due to a database error", e);
+        }
+
+        return exams;
+    }
+
+
+
+    @Override
+    public Exam create(Exam exam) throws DuplicateUserException {
+        String query = "INSERT INTO exams (id_subject, name_exam, time_limit) VALUES (?, ?, ?)";
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
+            preparedStatement.setInt(1, exam.getIdSubject());
+            preparedStatement.setString(2, exam.getNameExam());
+            preparedStatement.setInt(3, exam.getTimeLimit());
+            preparedStatement.executeUpdate();
+
+
+            try (ResultSet resultSet = preparedStatement.getGeneratedKeys()) {
+                if (resultSet.next()) {
+                    // 1 is the column index of the generated key
+                    exam.setIdExam(resultSet.getInt(1));
+                } else {
+                    throw new SQLException("Creating exam, no ID obtained.");
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Create exam failed due to a database error", e);
+        }
+        return exam;
+    }
+
+    @Override
+    public Exam updateById(int id, Exam exam) {
+        return null;
+    }
+
+    @Override
+    public boolean deleteById(int idExam) {
+        String query = "DELETE FROM exams WHERE id_exam = ?";
+        try(Connection connection = ConnectionPool.getDataSource().getConnection();
+            PreparedStatement preparedStatement = connection.prepareStatement(query)){
+            preparedStatement.setInt(1,idExam);
+            int rowAffected = preparedStatement.executeUpdate();
+            if(rowAffected > 0) return true;
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Delete Exam failed", e);
+        }
+        return false;
+    }
+
+    @Override
+    public List<Exam> findAll() {
+        String query = "SELECT * FROM exams";
+        List<Exam> exams = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    var exam = new Exam();
+                    exam.setNameExam(resultSet.getString("name_exam"));
+                    exam.setTimeLimit(resultSet.getInt("time_limit"));
+                    exam.setIdSubject(resultSet.getInt("id_subject"));
+                    exam.setIdExam(resultSet.getInt("id_exam"));
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding all exams due to a database error", e);
+        }
+
+        return exams;
+    }
+
+    @Override
+    public Exam findById(int id) {
+        String query = "SELECT * FROM exams WHERE id_exam = ?";
+        Exam exam = null;
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setInt(1, id);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    exam = new Exam();
+                    exam.setNameExam(resultSet.getString("name_exam"));
+                    exam.setTimeLimit(resultSet.getInt("time_limit"));
+                    exam.setIdSubject(resultSet.getInt("id_subject"));
+                    exam.setIdExam(id);
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding exam by id due to a database error", e);
+        }
+
+        return exam;
+    }
+}
Index: src/main/java/com/example/middleware/RateLimiter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/middleware/RateLimiter.java b/src/main/java/com/example/middleware/RateLimiter.java
new file mode 100644
--- /dev/null	(date 1706549125153)
+++ b/src/main/java/com/example/middleware/RateLimiter.java	(date 1706549125153)
@@ -0,0 +1,60 @@
+package com.example.middleware;
+
+import com.example.utility.ResponseUtility;
+import com.example.utility.TokenBucketAlgorithm;
+
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.annotation.WebFilter;
+import java.io.IOException;
+
+
+@WebFilter("/*")
+public class RateLimiter implements Filter {
+    private TokenBucketAlgorithm tokenBucketAlgorithm;
+
+    @Override
+    public void init(FilterConfig filterConfig) throws ServletException {
+        // Gia su he thong phuc vu 100_000 users va trong luc cao diem la 5000 users truy cap cung luc
+        // So luon request moi user thuc hien cao nhat khoang 5 request/s
+        // Do do vao gio cao diem bucketSize toi da la 5000 * 5 = 25_000 RPS
+        // RefillRate se duoc dat gia tri sao cho moi nguoi dung co the co the thuc hien 5 request tren s
+        int bucketSize = 30_000;
+        int refillRate = 25_000;
+        tokenBucketAlgorithm = new TokenBucketAlgorithm(bucketSize, refillRate);
+    }
+
+    @Override
+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
+            throws IOException, ServletException {
+        if (tokenBucketAlgorithm.tryConsumeToken()) {
+            chain.doFilter(request, response);
+        } else {
+            // khi bucket khong con token thi lam cham request cua nguoi dung lai chu khong reject
+            try {
+                // lam cham di 1 giay
+                Thread.sleep(1000);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+            chain.doFilter(request, response);
+
+
+//            HttpServletRequest httpServletRequest = (HttpServletRequest) request;
+//            HttpServletResponse httpServletResponse = (HttpServletResponse) response;
+//
+//            ((HttpServletResponse) response).setStatus(429);
+//            ResponseUtility.sendJsonResponse(httpServletResponse, "Request rate exceeded. Please try again later.",429);
+        }
+    }
+
+    @Override
+    public void destroy() {
+//        scheduledExecutorService.shutdown();
+
+    }
+}
Index: src/main/java/com/example/mySQLImplDao/SubjectImplDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/mySQLImplDao/SubjectImplDao.java b/src/main/java/com/example/mySQLImplDao/SubjectImplDao.java
new file mode 100644
--- /dev/null	(date 1708272704967)
+++ b/src/main/java/com/example/mySQLImplDao/SubjectImplDao.java	(date 1708272704967)
@@ -0,0 +1,208 @@
+package com.example.mySQLImplDao;
+
+import com.example.DataSource.ConnectionPool;
+import com.example.dao.SubjectDao;
+import com.example.entity.Exam;
+import com.example.entity.Subject;
+import com.example.utility.Helper;
+
+import java.sql.*;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class SubjectImplDao implements SubjectDao {
+
+
+    @Override
+    public List<Subject> findAllSubjectFromExam(List<Exam> listExam) {
+        String query = "SELECT * FROM subjects WHERE id_subject" + Helper.supportINClause(listExam);
+        List<Subject> subjects = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            for (int i = 0; i < listExam.size(); i++) {
+                preparedStatement.setInt(i + 1, listExam.get(i).getIdExam());
+            }
+
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    int idSubject = resultSet.getInt("id_subject");
+                    String nameSubject = resultSet.getString("name_subject");
+                    int idUser = resultSet.getInt("id_user");
+                    var subject = new Subject(nameSubject,idSubject,idUser);
+                    subjects.add(subject);
+                }
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Error finding subjects corresponding to exam due to a database error", e);
+        }
+
+        return subjects;
+    }
+
+    @Override
+    public List<Subject> findAllSubjetsOfUser(int idUser) {
+        String query = "SELECT * FROM subjects WHERE id_user = ?";
+        List<Subject> subjects = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setInt(1, idUser);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    var subject = new Subject();
+                    subject.setId(resultSet.getInt("id_subject"));
+                    subject.setNameSubject(resultSet.getString("name_subject"));
+                    subject.setIdUser(resultSet.getInt("id_user"));
+                    subjects.add(subject);
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding subjects by id user due to a database error", e);
+        }
+
+        return subjects;
+    }
+    @Override
+    public Subject create(Subject subject) {
+        String query = "INSERT INTO subjects (name_subject, id_user) VALUES (?, ?)";
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
+            preparedStatement.setString(1, subject.getNameSubject());
+            preparedStatement.setInt(2, subject.getIdUser());
+
+            int affectedRows = preparedStatement.executeUpdate();
+            if (affectedRows == 0) {
+                throw new SQLException("Creating subject failed, no rows affected.");
+            }
+
+            try (ResultSet resultSet = preparedStatement.getGeneratedKeys()) {
+                if (resultSet.next()) {
+                    // 1 is the id column of subjects table
+                    subject.setId(resultSet.getInt(1));
+                } else {
+                    throw new SQLException("Creating subject failed, no ID obtained.");
+                }
+            }
+        } catch (SQLException e) {
+            throw new RuntimeException("Error creating subject due to a database error", e);
+        }
+        return subject;
+    }
+
+
+    @Override
+    public Subject findById(int id) {
+        String query = "SELECT * FROM subjects WHERE id_subject = ?";
+        Subject subject = new Subject();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setInt(1, id);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    subject.setId(resultSet.getInt("id_subject"));
+                    subject.setNameSubject(resultSet.getString("name_subject"));
+                    subject.setIdUser(resultSet.getInt("id_user"));
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding subject by id due to a database error", e);
+        }
+
+        return subject;
+    }
+
+    @Override
+    public Subject updateById(int idOldSubject, Subject newSubject) {
+        String query = "UPDATE subjects SET name_subject = ? WHERE id_subject = ?";
+        String newSubjectName = newSubject.getNameSubject();
+        var oldSubject = findById(idOldSubject);
+        int idUser = oldSubject.getIdUser();
+
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+
+            preparedStatement.setString(1, newSubjectName);
+            preparedStatement.setInt(2, idOldSubject);
+
+
+            int rowsAffected = preparedStatement.executeUpdate();
+
+            if (rowsAffected > 0) {
+                return new Subject(newSubjectName,idOldSubject,idUser);
+            }
+
+        } catch (Exception e) {
+            throw new RuntimeException("Update subject by id failed", e);
+        }
+        return null;
+    }
+
+    @Override
+    public boolean deleteById(int id) {
+        String query = "DELETE FROM subjects WHERE id_subject = ?";
+        try(Connection connection = ConnectionPool.getDataSource().getConnection();
+            PreparedStatement preparedStatement = connection.prepareStatement(query)){
+            preparedStatement.setInt(1,id);
+            int rowAffected = preparedStatement.executeUpdate();
+            if(rowAffected > 0) return true;
+        }
+        catch (Exception e) {
+            throw new RuntimeException("Delete subject failed", e);
+        }
+        return false;
+    }
+
+    @Override
+    public List<Subject> findAll() {
+        String query = "SELECT * FROM subjects";
+        List<Subject> subjects = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+
+            ResultSet resultSet = preparedStatement.executeQuery();
+            while (resultSet.next()) {
+                int id = resultSet.getInt("id_subject");
+                String name = resultSet.getString("name_subject");
+                int idUser = resultSet.getInt("id_user");
+                    var subject = new Subject(name,id,idUser);
+                    subjects.add(subject);
+                }
+        }
+         catch (Exception e) {
+            throw new RuntimeException("Found all subjects failed due to a database error", e);
+        }
+
+        return subjects;
+    }
+
+
+
+
+    @Override
+    public Subject findByName(String name, int userId) {
+        String query = "SELECT * FROM subjects WHERE name_subject = ? AND id_user = ?";
+        Subject subject = null;
+
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setString(1, name);
+            preparedStatement.setInt(2, userId);
+
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    subject = new Subject();
+                    subject.setId(resultSet.getInt("id_subject"));
+                    subject.setNameSubject(resultSet.getString("name_subject"));
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding subject by name and user ID due to a database error", e);
+        }
+
+        return subject;
+    }
+
+
+}
Index: src/main/java/com/example/APIcontroller/SubjectAPIController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/APIcontroller/SubjectAPIController.java b/src/main/java/com/example/APIcontroller/SubjectAPIController.java
new file mode 100644
--- /dev/null	(date 1709685131426)
+++ b/src/main/java/com/example/APIcontroller/SubjectAPIController.java	(date 1709685131426)
@@ -0,0 +1,163 @@
+package com.example.APIcontroller;
+
+
+import com.example.ExceptionHandling.DuplicateSubjectException;
+import com.example.mySQLImplDao.ExamImplDao;
+import com.example.utility.Helper;
+import com.example.utility.ResponseUtility;
+import com.example.utility.Validate;
+import com.example.entity.Subject;
+import com.example.mySQLImplDao.SubjectImplDao;
+import com.example.service.SubjectService;
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
+import java.io.IOException;
+import java.util.List;
+
+@WebServlet(urlPatterns = "/auth/subjects")
+public class SubjectAPIController extends HttpServlet {
+
+    private final SubjectService subjectService = new SubjectService(new SubjectImplDao(), new ExamImplDao());
+    private final ObjectMapper mapper = new ObjectMapper();
+
+    @Override
+    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+
+        HttpSession session = request.getSession(false);
+        if(session == null){
+            ResponseUtility.sendJsonResponse(response, "Unauthorized. Please login.", null,HttpServletResponse.SC_UNAUTHORIZED,false);
+            return;
+        }
+        Integer idUser = (Integer) session.getAttribute("id_user");
+
+        Subject subject = mapper.readValue(request.getReader(), Subject.class);
+        subject.setIdUser(idUser);
+
+        if (Validate.isInvalidSubjectUserData(subject)) {
+            ResponseUtility.sendJsonResponse(response, "Invalid Input User!", null,HttpServletResponse.SC_BAD_REQUEST,false);
+            return;
+        }
+
+        try {
+            Subject resultSubject  = subjectService.createSubjectOfUser(subject);
+            ResponseUtility.sendJsonResponse(response,null,resultSubject, HttpServletResponse.SC_CREATED,true);
+        }
+        catch (DuplicateSubjectException e){
+            ResponseUtility.sendJsonResponse(response, "Subject already exists for user " + subject.getIdUser(),null, HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+
+        }
+        catch (Exception e) {
+            ResponseUtility.sendJsonResponse(response, e.toString(), null,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+        }
+    }
+
+
+
+
+
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+
+
+        HttpSession session = request.getSession(false);
+
+        Integer idUser = (Integer) session.getAttribute("id_user");
+
+        String nameParameter = request.getParameter("name");
+        try {
+            if (nameParameter != null) {
+                Subject subject = subjectService.getSubjectUserByName(nameParameter, idUser);
+                if (subject == null) {
+                    ResponseUtility.sendJsonResponse(response, "Subject not found", null,HttpServletResponse.SC_NOT_FOUND,false);
+                    return;
+                }
+                ResponseUtility.sendJsonResponse(response, null,subject, HttpServletResponse.SC_OK,true);
+
+            } else {
+                List<Subject> subjects = subjectService.getAllSubjectsByUser(idUser);
+                ResponseUtility.sendJsonResponse(response, null,subjects, HttpServletResponse.SC_OK,true);
+
+            }
+        } catch (Exception e) {
+            ResponseUtility.sendJsonResponse(response, e.toString(),null, HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+        }
+    }
+
+
+
+    @Override
+    protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+
+        String idParameter = request.getParameter("id");
+
+        try {
+            if (idParameter == null || idParameter.isEmpty()) {
+                ResponseUtility.sendJsonResponse(response, "Invalid or missing 'id' parameter. Please provide a valid integer id.", null,HttpServletResponse.SC_BAD_REQUEST,false);
+                return;
+            }
+
+            int id = Helper.parseId(idParameter);
+            if (id == -1 || !subjectService.deleteSubjectById(id)) {
+                ResponseUtility.sendJsonResponse(response, "Subject with id " + id + " not found.", null,HttpServletResponse.SC_NOT_FOUND,false);
+                return;
+            }
+
+            ResponseUtility.sendJsonResponse(response, "Delete subject witd id " + id + " successful", null,HttpServletResponse.SC_NO_CONTENT,true);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+
+            ResponseUtility.sendJsonResponse(response, "Error deleting subjects", null,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+        }
+    }
+
+
+
+
+    @Override
+    protected void doPut(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+
+        String idParameter = request.getParameter("id");
+        Subject updatedSubject = mapper.readValue(request.getReader(), Subject.class);
+
+        try {
+            if (idParameter == null || idParameter.isEmpty()) {
+                ResponseUtility.sendJsonResponse(response, "Invalid or missing 'id' parameter. Please provide a valid integer id.", null,HttpServletResponse.SC_BAD_REQUEST,false);
+                return;
+            }
+
+            int id = Helper.parseId(idParameter);
+            if (id == -1) {
+                ResponseUtility.sendJsonResponse(response, "Invalid 'id' parameter. Please provide a valid integer id.", null,HttpServletResponse.SC_BAD_REQUEST,false);
+                return;
+            }
+            Subject newSubject = subjectService.updateSubjectById(id, updatedSubject);
+
+            if (newSubject != null) {
+                ResponseUtility.sendJsonResponse(response, "Subject with id " + id +" updated successful",newSubject, HttpServletResponse.SC_OK,true);
+
+            } else {
+                ResponseUtility.sendJsonResponse(response, "Subject with id " + id + " not found.", null,HttpServletResponse.SC_NOT_FOUND,false);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            ResponseUtility.sendJsonResponse(response, "Error updating subjects", null,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+        }
+    }
+}
+
+
Index: src/main/java/com/example/utility/Encryption.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/utility/Encryption.java b/src/main/java/com/example/utility/Encryption.java
new file mode 100644
--- /dev/null	(date 1706266074016)
+++ b/src/main/java/com/example/utility/Encryption.java	(date 1706266074016)
@@ -0,0 +1,13 @@
+package com.example.utility;
+import org.mindrot.jbcrypt.BCrypt;
+
+public class Encryption {
+        public static String encryptPassword(String password) {
+            return BCrypt.hashpw(password, BCrypt.gensalt());
+        }
+
+        public static boolean checkPassword(String password, String hashedPassword) {
+            return BCrypt.checkpw(password, hashedPassword);
+        }
+    }
+
Index: src/main/java/com/example/dao/SubjectDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/dao/SubjectDao.java b/src/main/java/com/example/dao/SubjectDao.java
new file mode 100644
--- /dev/null	(date 1709685176622)
+++ b/src/main/java/com/example/dao/SubjectDao.java	(date 1709685176622)
@@ -0,0 +1,17 @@
+package com.example.dao;
+
+import com.example.entity.Exam;
+import com.example.entity.Subject;
+
+import java.util.List;
+
+
+public interface SubjectDao extends Dao<Subject> {
+    Subject findByName(String name, int idUser);
+    List<Subject> findAllSubjetsOfUser(int idUser);
+
+    List<Subject> findAllSubjectFromExam(List<Exam> listExam);
+
+
+
+}
Index: src/main/java/com/example/middleware/HandleNotFound404.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/middleware/HandleNotFound404.java b/src/main/java/com/example/middleware/HandleNotFound404.java
new file mode 100644
--- /dev/null	(date 1709485684313)
+++ b/src/main/java/com/example/middleware/HandleNotFound404.java	(date 1709485684313)
@@ -0,0 +1,49 @@
+package com.example.middleware;
+
+import com.example.utility.ResponseUtility;
+
+import javax.servlet.*;
+import javax.servlet.annotation.WebFilter;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.util.regex.Pattern;
+
+
+@WebFilter("/*")
+public class HandleNotFound404 implements Filter {
+    private Pattern validURLPattern;
+    @Override
+    public void init(FilterConfig filterConfig) throws ServletException {
+        String regexPattern = "^/QuesApp(/auth/do/exams\\?id_subject=\\d+&id_exam=\\d+|/auth/do/exams|/auth/exams|/exams|/auth/exams\\?id_subject=\\d+|/auth/history|/auth/questions|/auth/questions\\?id=\\d+|/auth/questions\\?subject=\\d+|/auth/questions\\?ids=\\d+(,\\d+)*|/auth/subjects|/auth/subjects(\\?id=\\d+|=\\d+)?|/login|/register" +
+                "|/|/signIn|/signUp|/home|/history|/subjects|/listQuestions|/formUpdateSubject|/exams|/addQuestionToExam|/createQuestionForm|/updateQuestionForm|/createExamForm|/doExam|/updateExamForm)$";
+
+
+        validURLPattern = Pattern.compile(regexPattern);
+
+    }
+
+    @Override
+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
+            throws IOException, ServletException {
+        HttpServletRequest httpServletRequest = (HttpServletRequest) request;
+        HttpServletResponse httpServletResponse = (HttpServletResponse) response;
+
+
+        String requestedURI = httpServletRequest.getServletContext().getContextPath() + httpServletRequest.getServletPath();
+        boolean isValidURL = validURLPattern.matcher(requestedURI).matches();
+
+        if (isValidURL) {
+            chain.doFilter(request, response);
+        } else {
+            httpServletResponse.setContentType("application/json");
+            httpServletResponse.setCharacterEncoding("UTF-8");
+            ResponseUtility.sendJsonResponse(httpServletResponse,"URL not found: " + requestedURI , null,HttpServletResponse.SC_NOT_FOUND,false);
+        }
+    }
+
+    @Override
+    public void destroy() {
+    }
+}
+
Index: src/main/java/com/example/utility/Helper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/utility/Helper.java b/src/main/java/com/example/utility/Helper.java
new file mode 100644
--- /dev/null	(date 1708271041995)
+++ b/src/main/java/com/example/utility/Helper.java	(date 1708271041995)
@@ -0,0 +1,34 @@
+package com.example.utility;
+
+import com.example.entity.History;
+
+import java.util.List;
+
+public class Helper {
+    public static int parseId(String idParameter) {
+        try {
+            return Integer.parseInt(idParameter);
+        } catch (NumberFormatException e) {
+            return -1;
+        }
+    }
+
+    public static <T> String supportINClause(List<T> lists) {
+        if (lists.isEmpty()) {
+            throw new IllegalArgumentException("Cannot generate IN clause for empty list");
+        }
+
+        StringBuilder inClause = new StringBuilder(" IN (");
+        for (int i = 0; i < lists.size(); i++) {
+            inClause.append("?");
+            if (i < lists.size() - 1) {
+                inClause.append(",");
+            }
+        }
+
+        inClause.append(")");
+
+        return inClause.toString();
+    }
+
+}
Index: src/main/java/com/example/DTO/AnswerUserDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/DTO/AnswerUserDTO.java b/src/main/java/com/example/DTO/AnswerUserDTO.java
new file mode 100644
--- /dev/null	(date 1706030851785)
+++ b/src/main/java/com/example/DTO/AnswerUserDTO.java	(date 1706030851785)
@@ -0,0 +1,38 @@
+package com.example.DTO;
+
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+
+
+public class AnswerUserDTO {
+
+    private int idQuestion;
+    private int selectedAnswerId;
+
+    public int getIdQuestion() {
+        return idQuestion;
+    }
+
+    public void setIdQuestion(int idQuestion) {
+        this.idQuestion = idQuestion;
+    }
+
+    public int getSelectedAnswerId() {
+        return selectedAnswerId;
+    }
+
+    public void setSelectedAnswerId(int selectedAnswerId) {
+        this.selectedAnswerId = selectedAnswerId;
+    }
+
+    @JsonCreator
+    public AnswerUserDTO(@JsonProperty("idQuestion") int idQuestion,@JsonProperty("selectedAnswerId") int selectedAnswerId) {
+        this.idQuestion = idQuestion;
+        this.selectedAnswerId = selectedAnswerId;
+
+    }
+
+}
+
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1704717089540)
+++ b/.idea/uiDesigner.xml	(date 1704717089540)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/com/example/viewController/SubjectController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/viewController/SubjectController.java b/src/main/java/com/example/viewController/SubjectController.java
new file mode 100644
--- /dev/null	(date 1708744647772)
+++ b/src/main/java/com/example/viewController/SubjectController.java	(date 1708744647772)
@@ -0,0 +1,20 @@
+package com.example.viewController;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+
+@WebServlet(urlPatterns = "/subjects")
+public class SubjectController extends HttpServlet {
+
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/createSubjectForm.jsp");
+        dispatcher.forward(request, response);
+    }
+}
Index: src/main/java/com/example/viewController/AddQuestionToExamController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/viewController/AddQuestionToExamController.java b/src/main/java/com/example/viewController/AddQuestionToExamController.java
new file mode 100644
--- /dev/null	(date 1708847123972)
+++ b/src/main/java/com/example/viewController/AddQuestionToExamController.java	(date 1708847123972)
@@ -0,0 +1,18 @@
+package com.example.viewController;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+@WebServlet(urlPatterns = "/addQuestionToExam")
+public class AddQuestionToExamController extends HttpServlet {
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/addQuestionToExam.jsp");
+        dispatcher.forward(request, response);
+    }
+}
Index: src/main/webapp/views/createQuestionForm.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/createQuestionForm.jsp b/src/main/webapp/views/createQuestionForm.jsp
new file mode 100644
--- /dev/null	(date 1708962021879)
+++ b/src/main/webapp/views/createQuestionForm.jsp	(date 1708962021879)
@@ -0,0 +1,235 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8"
+    pageEncoding="UTF-8"%>
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Create Question</title>
+    <style>
+        body {
+            font-family: Arial, sans-serif;
+            background: linear-gradient(90deg, #c7c5f4, #776bcc);
+            margin: 0;
+            padding: 0;
+        }
+
+        .container {
+            max-width: 800px;
+            margin: 50px auto;
+            padding: 20px;
+            background-color: rgba(255, 255, 255, 0.9);
+            border-radius: 8px;
+            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
+        }
+
+        h2 {
+            text-align: center;
+            color: #6c63ac;
+        }
+
+        .form-group {
+            margin-bottom: 20px;
+        }
+
+        label {
+            font-weight: bold;
+            color: #6c63ac;
+            display: block;
+        }
+
+        input[type="text"] {
+            width: calc(100% - 20px);
+            padding: 10px;
+            margin-top: 5px;
+            margin-bottom: 10px;
+            border: 1px solid #ccc;
+            border-radius: 4px;
+            box-sizing: border-box;
+        }
+
+        .option {
+            margin-bottom: 10px;
+        }
+
+        .option input[type="text"],
+        .option input[type="radio"] {
+            vertical-align: middle;
+        }
+
+        .option label {
+            vertical-align: middle;
+            margin-left: 5px;
+        }
+
+        .button-container {
+            text-align: center;
+        }
+
+        button[type="submit"], button[type="button"] {
+            padding: 10px 20px;
+            background-color: #6c63ac;
+            color: #fff;
+            border: none;
+            border-radius: 4px;
+            cursor: pointer;
+            transition: background-color 0.3s;
+            margin-left: 10px;
+        }
+
+        button[type="submit"]:hover, button[type="button"]:hover {
+            background-color: #564c88;
+        }
+
+    </style>
+</head>
+<body>
+    <div class="container">
+        <h2>Create Question</h2>
+        <div id="questionForm">
+            <div class="form-group">
+                <label for="question">Question:</label>
+                <input type="text" id="question" name="question" required />
+            </div>
+            <div class="option">
+                <label for="option1">Option 1:</label>
+                <input type="text" class="option-text content-opt1" name="option" required />
+                <input type="radio" id="option1" name="answer" value="Option 1" />
+            </div>
+            <div class="option">
+                <label for="option2">Option 2:</label>
+                <input type="text" class="option-text content-opt2" name="option" required />
+                <input type="radio" id="option2" name="answer" value="Option 2" />
+            </div>
+            <div class="option">
+                <label for="option3">Option 3:</label>
+                <input type="text" class="option-text content-opt3" name="option" required />
+                <input type="radio" id="option3" name="answer" value="Option 3" />
+            </div>
+            <div class="option">
+                <label for="option4">Option 4:</label>
+                <input type="text" class="option-text content-opt4" name="option" required />
+                <input type="radio" id="option4" name="answer" value="Option 4" />
+            </div>
+            <div class="button-container">
+                <button id = "createBtn" type="submit">Create</button>
+                <button type="button" onclick="window.history.back()">Back</button>
+            </div>
+        </div>
+    </div>
+
+
+    <script>
+     document.addEventListener("DOMContentLoaded",()=>{
+     const createButton = document.querySelector("#createBtn");
+     createButton.addEventListener("click",async ()=>{
+               await createQuestion(getUserInput());
+
+
+            });
+     })
+
+
+     async function myFetch(url, options) {
+       try {
+        const response = await fetch(url, options);
+          return response;
+          } catch (error) {
+           console.log("2", error.message);
+           alert(error.message);
+          }
+        }
+
+
+           function getUserInput() {
+               const contentQuestion = document.querySelector("#question");
+               const isCorrectOption1 = document.querySelector("#option1");
+               const contentOption1 = document.querySelector(".content-opt1");
+
+               const isCorrectOption2 = document.querySelector("#option2");
+               const contentOption2 = document.querySelector(".content-opt2");
+
+               const isCorrectOption3 = document.querySelector("#option3");
+               const contentOption3 = document.querySelector(".content-opt3");
+
+               const isCorrectOption4 = document.querySelector("#option4"); // Corrected here
+               const contentOption4 = document.querySelector(".content-opt4");
+
+               return { contentQuestion, isCorrectOption1, isCorrectOption2, isCorrectOption3, isCorrectOption4, contentOption1, contentOption2, contentOption3, contentOption4 };
+           }
+
+
+        async function sendQuestionData(data) {
+              const idSubject = localStorage.getItem("idSubject");
+              const url = `http://localhost:8080/QuesApp/auth/questions?subject=${idSubject}`;
+              const options = {
+                method: "POST",
+                headers: {
+                  "Content-Type": "application/json",
+                },
+                body: JSON.stringify(data),
+              };
+
+              try {
+                const response = await myFetch(url, options);
+                const responseData = await response.json();
+                return responseData;
+              } catch (error) {
+                console.log("phuc");
+                alert(error.message);
+              }
+            }
+
+
+            async function createQuestion(inputUser) {
+
+
+                  const contentQues = inputUser.contentQuestion;
+
+                  const isCorrectOpt1 = inputUser.isCorrectOption1;
+                  const contentOpt1 = inputUser.contentOption1;
+
+                  const isCorrectOpt2 = inputUser.isCorrectOption2;
+                  const contentOpt2 = inputUser.contentOption2;
+
+                  const isCorrectOpt3 = inputUser.isCorrectOption3;
+                  const contentOpt3 = inputUser.contentOption3;
+
+                  const isCorrectOpt4 = inputUser.isCorrectOption4;
+                  const contentOpt4 = inputUser.contentOption4;
+
+
+                  if (contentQues && isCorrectOpt1 && isCorrectOpt2 && isCorrectOpt3 && isCorrectOpt4 && contentOpt1 && contentOpt2 && contentOpt3 && contentOpt4) {
+                    const question = {
+                          content: contentQues.value,
+                          answers: [
+                            { contentOption: contentOpt1.value, isCorrect: isCorrectOpt1.checked },
+                            { contentOption: contentOpt2.value, isCorrect: isCorrectOpt2.checked },
+                            { contentOption: contentOpt3.value, isCorrect: isCorrectOpt3.checked },
+                            { contentOption: contentOpt4.value, isCorrect: isCorrectOpt4.checked },
+                          ]
+                    };
+
+                    try {
+                      const questionData = await sendQuestionData(question);
+                      console.log("lc", questionData);
+                      if (questionData.success) {
+                        alert(questionData.message);
+                        const urlListQuestionPage = "http://localhost:8080/QuesApp/listQuestions";
+                        window.location.href = urlListQuestionPage;
+                      } else {
+                        throw new Error(questionData.message);
+                      }
+                    } catch (error) {
+                      alert(error.message);
+                    }
+                  } else {
+                    console.error("Không thể tìm thấy các phần tử input.");
+                  }
+                }
+
+
+
+     </script>
+</body>
+</html>
Index: src/main/java/com/example/viewController/AuthController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/viewController/AuthController.java b/src/main/java/com/example/viewController/AuthController.java
new file mode 100644
--- /dev/null	(date 1708418281376)
+++ b/src/main/java/com/example/viewController/AuthController.java	(date 1708418281376)
@@ -0,0 +1,35 @@
+package com.example.viewController;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+
+@WebServlet(urlPatterns = {"/","/signIn","/signUp"})
+public class AuthController extends HttpServlet {
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        String servletPath = request.getServletPath();
+
+        if ("/signIn".equals(servletPath) || "/".equals(servletPath)) {
+            showLoginPage(request, response);
+        } else if ("/signUp".equals(servletPath)) {
+            showRegisterPage(request, response);
+        }
+    }
+
+    private void showLoginPage(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/login.jsp");
+        dispatcher.forward(request, response);
+    }
+
+    private void showRegisterPage(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/register.jsp");
+        dispatcher.forward(request, response);
+    }
+
+}
Index: src/main/java/com/example/viewController/HistoryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/viewController/HistoryController.java b/src/main/java/com/example/viewController/HistoryController.java
new file mode 100644
--- /dev/null	(date 1708419169797)
+++ b/src/main/java/com/example/viewController/HistoryController.java	(date 1708419169797)
@@ -0,0 +1,19 @@
+package com.example.viewController;
+
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+@WebServlet(urlPatterns = "/history")
+public class HistoryController extends HttpServlet {
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/histories.jsp");
+        dispatcher.forward(request, response);
+    }
+}
Index: src/main/java/com/example/viewController/CreateQuestionFormController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/viewController/CreateQuestionFormController.java b/src/main/java/com/example/viewController/CreateQuestionFormController.java
new file mode 100644
--- /dev/null	(date 1708847123966)
+++ b/src/main/java/com/example/viewController/CreateQuestionFormController.java	(date 1708847123966)
@@ -0,0 +1,18 @@
+package com.example.viewController;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+@WebServlet(urlPatterns = "/createQuestionForm")
+public class CreateQuestionFormController extends HttpServlet {
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/createQuestionForm.jsp");
+        dispatcher.forward(request, response);
+    }
+}
\ No newline at end of file
Index: src/main/webapp/views/createSubjectForm.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/createSubjectForm.jsp b/src/main/webapp/views/createSubjectForm.jsp
new file mode 100644
--- /dev/null	(date 1709313140979)
+++ b/src/main/webapp/views/createSubjectForm.jsp	(date 1709313140979)
@@ -0,0 +1,168 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Subject</title>
+    <style>
+
+     body {
+         font-family: "Arial", sans-serif;
+         background: linear-gradient(90deg, #c7c5f4, #776bcc);
+         margin: 0;
+         padding: 0;
+       }
+
+       .container {
+         max-width: 800px;
+         margin: 50px auto;
+         padding: 20px;
+         background-color: rgba(255, 255, 255, 0.9);
+         border-radius: 8px;
+         box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
+       }
+
+       h2 {
+         text-align: center;
+         color: #6c63ac;
+       }
+
+       .form-group {
+         margin-bottom: 20px;
+       }
+
+       label {
+         font-weight: bold;
+         color: #6c63ac;
+         display: block;
+       }
+
+       input[type="text"] {
+         width: calc(100% - 20px);
+         padding: 10px;
+         margin-top: 5px;
+         margin-bottom: 10px;
+         border: 1px solid #ccc;
+         border-radius: 4px;
+         box-sizing: border-box;
+       }
+
+       button[type="submit"] {
+         padding: 12px 24px; /* Điều chỉnh kích thước nút */
+         background-color: #6c63ac;
+         color: #fff;
+         border: none;
+         border-radius: 5px;
+         font-size: 16px; /* Đặt kích thước chữ cho nút */
+         cursor: pointer;
+         transition: background-color 0.3s;
+         display: block;
+         margin: 0 auto; /* Canh giữa nút */
+       }
+
+       button[type="submit"]:hover {
+         background-color: #564c88;
+       }
+
+
+     </style>
+
+</head>
+<body>
+    <div class="container">
+        <h2>Subject</h2>
+        <div id="subjectForm">
+            <div class="form-group">
+                <label for="subject">Name Subject:</label>
+                <input type="text" id="subject" name="subject" required />
+            </div>
+            <button type="submit"  id="createBtn">Create</button>
+        </div>
+    </div>
+
+    <script>
+
+
+    function getUserInput() {
+            const subjectInput = document.getElementById("subject");
+            return subjectInput ;
+            }
+
+        document.addEventListener("DOMContentLoaded", () => {
+            const createBtn = document.getElementById("createBtn");
+            createBtn.addEventListener("click", async (event) => {
+                event.preventDefault();
+                await createSubject(getUserInput());
+            });
+        });
+
+
+        async function myFetch(url, options) {
+          try {
+            const response = await fetch(url, options);
+            return response;
+          } catch (error) {
+            console.log("2", error.message);
+            alert(error.message);
+          }
+        }
+
+
+
+
+        async function sendUserData(data) {
+              const url = "http://localhost:8080/QuesApp/auth/subjects";
+
+              const options = {
+                method: "POST",
+                headers: {
+                  "Content-Type": "application/json",
+                },
+                body: JSON.stringify(data),
+              };
+
+              try {
+                const response = await myFetch(url, options);
+                const responseData = await response.json();
+                return responseData;
+              } catch (error) {
+                console.log("phuc");
+                alert(error.message);
+              }
+            }
+
+
+             async function createSubject(subjectInput) {
+                  const name = subjectInput;
+
+                  if(name) {
+                    const subject = {
+                      nameSubject : name.value
+                    };
+
+
+                    try {
+                      const responseSubject = await sendUserData(subject);
+                      console.log("lc", responseSubject);
+                      if (responseSubject.success) {
+                        const urlHomePage = "http://localhost:8080/QuesApp/home";
+                        window.location.href = urlHomePage;
+                      } else {
+                        throw new Error(responseSubject.message);
+                      }
+                    } catch (error) {
+                      console.log("phuc1");
+                      alert(error.message);
+                    }
+                  } else {
+                    console.error("Không thể tìm thấy các phần tử input.");
+                  }
+                }
+
+     </script>
+
+</body>
+
+
+</html>
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
new file mode 100644
--- /dev/null	(date 1706266162810)
+++ b/pom.xml	(date 1706266162810)
@@ -0,0 +1,89 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.example</groupId>
+  <artifactId>QuesApp</artifactId>
+  <packaging>war</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>QuesApp Maven Webapp</name>
+  <url>http://maven.apache.org</url>
+  <dependencies>
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>3.8.1</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>mysql</groupId>
+      <artifactId>mysql-connector-java</artifactId>
+      <version>8.0.23</version>
+    </dependency>
+
+    <dependency>
+      <groupId>javax.servlet</groupId>
+      <artifactId>javax.servlet-api</artifactId>
+      <version>4.0.1</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.slf4j</groupId>
+      <artifactId>slf4j-api</artifactId>
+      <version>1.7.32</version>
+    </dependency>
+
+    <dependency>
+      <groupId>ch.qos.logback</groupId>
+      <artifactId>logback-classic</artifactId>
+      <version>1.2.6</version>
+    </dependency>
+    <dependency>
+      <groupId>com.fasterxml.jackson.core</groupId>
+      <artifactId>jackson-core</artifactId>
+      <version>2.9.6</version>
+    </dependency>
+
+    <dependency>
+      <groupId>com.fasterxml.jackson.core</groupId>
+      <artifactId>jackson-annotations</artifactId>
+      <version>2.9.6</version>
+    </dependency>
+
+    <dependency>
+      <groupId>com.fasterxml.jackson.core</groupId>
+      <artifactId>jackson-databind</artifactId>
+      <version>2.9.6</version>
+    </dependency>
+    <dependency>
+      <groupId>com.mchange</groupId>
+      <artifactId>c3p0</artifactId>
+      <version>0.9.5.4</version>
+    </dependency>
+
+    <dependency>
+      <groupId>org.mindrot</groupId>
+      <artifactId>jbcrypt</artifactId>
+      <version>0.4</version>
+    </dependency>
+
+  </dependencies>
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.tomcat.maven</groupId>
+        <artifactId>tomcat7-maven-plugin</artifactId>
+        <version>2.2</version> <!-- Use the latest version compatible with Java 17 -->
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <version>3.8.1</version> <!-- Use the latest version -->
+        <configuration>
+          <source>17</source>
+          <target>17</target>
+        </configuration>
+      </plugin>
+    </plugins>
+  <finalName>QuesApp</finalName>
+  </build>
+</project>
Index: src/main/webapp/views/listExam.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/listExam.jsp b/src/main/webapp/views/listExam.jsp
new file mode 100644
--- /dev/null	(date 1709478606014)
+++ b/src/main/webapp/views/listExam.jsp	(date 1709478606014)
@@ -0,0 +1,491 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8"
+    pageEncoding="UTF-8"%>
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <link
+      rel="stylesheet"
+      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
+    />
+    <link href="
+    https://cdn.jsdelivr.net/npm/@icon/themify-icons@1.0.1-alpha.3/themify-icons.min.css
+    " rel="stylesheet">
+
+    <style>
+     body {
+       background: linear-gradient(90deg, #c7c5f4, #776bcc);
+       margin: 0;
+       font-family: "Raleway", sans-serif;
+       margin-top: 100px;
+     }
+
+     html {
+       font-size: 62.5%;
+     }
+
+    .header .home,
+             .header .logo-user {
+                    width: 40px;
+                    height: 40px;
+                    border-radius: 50%;
+                    margin: 0 5px;
+                    cursor: pointer;
+              }
+
+
+     .header,
+     .body,
+     .footer {
+       margin: auto;
+       padding: 20px;
+       width: 80%;
+       backdrop-filter: blur(5px);
+     }
+
+     .header {
+       display: flex;
+       justify-content: space-between;
+       align-items: center;
+       background: rgba(255, 255, 255, 0.7);
+     }
+
+     .header div {
+       width: 40px;
+       height: 40px;
+       background: #bcb6eb;
+       margin: 0 5px;
+       border-radius: 50%;
+     }
+
+     .header .ti-search {
+       font-size: 20px;
+       color: #757575;
+       border: 2px solid #757575;
+       border-radius: 50%;
+       padding: 10px;
+       transition: all 0.3s ease;
+       margin-right: 10px;
+     }
+
+     .header .ti-search:hover {
+       background-color: #6a679e;
+       color: #fff;
+     }
+
+     .header .icon {
+       font-size: 20px;
+       color: #757575;
+       font-weight: 550;
+       display: flex;
+       justify-content: center;
+       align-items: center;
+       line-height: 40px;
+       text-align: center;
+       transition: transform 0.3s ease, box-shadow 0.3s ease, color 0.3s ease;
+       border-radius: 50%;
+       position: relative;
+     }
+
+     .header .icon:hover {
+       box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
+       color: whitesmoke;
+     }
+
+     .header .icon:hover ~ div {
+       filter: blur(2px);
+     }
+
+     .header .icon[title]:hover::after {
+       content: attr(title);
+       position: absolute;
+       left: 50%;
+       transform: translateX(-50%) translateY(100%);
+       background-color: #6a679e;
+       color: white;
+       font-size: 12px;
+       z-index: 999;
+     }
+
+     .header .search {
+       flex-grow: 1;
+       height: 60px;
+       background: #fff;
+       border-radius: 30px;
+       margin: 0 5px;
+       display: flex;
+       align-items: center;
+     }
+
+     .header .search_input {
+       border: none;
+       outline: none;
+       background: none;
+       padding: 10px;
+       padding-left: 24px;
+       padding-right: 24px;
+       font-weight: 700;
+       width: 100%;
+       transition: 0.2s;
+       height: 40px;
+       text-align: center;
+       color: #5e5e5f;
+     }
+
+     .header .search_input:focus {
+       border-bottom: 2px solid #6a679e;
+     }
+
+     .header .search_input::placeholder {
+       color: #5e5e5f;
+       font-weight: 700;
+       opacity: 0.7;
+     }
+
+     .header .search:hover .search_input::placeholder {
+       opacity: 1;
+     }
+
+     .header .search:hover .search_input {
+       border-bottom: 2px solid #6a679e;
+     }
+
+     .header .logo-user {
+       overflow: hidden;
+     }
+
+     .header .logo-user img {
+       width: 100%;
+       height: 100%;
+       object-fit: cover;
+     }
+
+     .body {
+       height: auto;
+       background: rgba(255, 255, 255, 0.7);
+     }
+
+
+     .add-exam {
+       padding: 12px 20px;
+       background-color: #6c63ac;
+       color: #fff;
+       border: none;
+       border-radius: 5px;
+       cursor: pointer;
+       transition: background-color 0.3s, color 0.3s;
+       display: inline-flex;
+       align-items: center;
+       margin-left: 40px;
+       font-size: 1.6rem;
+     }
+
+     .add-exam:hover {
+       background: #564c88;
+     }
+
+     .list-exam {
+       margin-top: 20px;
+       font-size: 1.4rem;
+     }
+
+     .field-exam {
+       width: 100%;
+       border-collapse: collapse;
+     }
+
+     .field-exam th,
+     .field-exam td {
+       border: 1px solid #6c63ac;
+       padding: 10px;
+     }
+
+     .field-exam th {
+       background-color: #6c63ac;
+       color: white;
+       text-align: left;
+     }
+
+     .field-exam td {
+       background-color: #f2f2f2;
+     }
+
+     .field-exam tr:hover {
+       background-color: #e6e6e6;
+     }
+
+     .field-exam tr:hover td {
+       color: #6c63ac;
+     }
+
+     .exam {
+       font-size: 1.6rem;
+     }
+
+     .exam td,
+     .exam th {
+       padding: 12px;
+     }
+
+     .exam th {
+       background-color: #6c63ac;
+       color: white;
+       text-align: left;
+     }
+
+     .exam td {
+       background-color: #f2f2f2;
+     }
+
+     .exam tr:hover {
+       background-color: #e6e6e6;
+     }
+
+     .exam tr:hover td {
+       color: #6c63ac;
+     }
+
+     .action-buttons {
+       text-align: center;
+     }
+
+     .start-quiz-button,
+     .action-button {
+       padding: 8px 16px;
+       background-color: #6c63ac;
+       color: #fff;
+       border: none;
+       border-radius: 5px;
+       cursor: pointer;
+       transition: background-color 0.3s, color 0.3s;
+       margin-right: 5px;
+     }
+
+     .start-quiz-button:hover,
+     .action-button:hover {
+       background-color: #564c88;
+     }
+
+
+     </style>
+
+
+    <title>List Exam</title>
+  </head>
+
+  <body>
+    <div class="header">
+      <div class="home">
+        <i class="ti ti-home icon" title="Home"></i>
+      </div>
+      <div class="search">
+        <input
+          type="text"
+          class="search_input"
+          placeholder="Enter Name Your Subject"
+        />
+        <i class="ti ti-search"></i>
+      </div>
+      <div class="logo-user">
+        <i class="ti ti-user icon"></i>
+      </div>
+      </div>
+    </div>
+
+    <div class="body">
+      <div class="add-exam">
+        <i class="ti ti-plus icon"></i>
+      </div>
+
+      <div class="list-exam">
+        <table class="field-exam">
+          <thead>
+            <tr>
+              <th>ID</th>
+              <th>Name Exam</th>
+              <th>Number Question</th>
+              <th>Time</th>
+              <th>Action</th>
+            </tr>
+          </thead>
+          <tbody class="exam">
+
+          </tbody>
+        </table>
+      </div>
+    </div>
+    <script>
+      // home button
+
+        document.addEventListener("DOMContentLoaded", () => {
+        const homeButton = document.querySelector(".home");
+        homeButton.addEventListener("click",  () => {
+        const urlHomePage = "http://localhost:8080/QuesApp/home";
+        window.location.href = urlHomePage;
+            });
+        });
+
+
+      // addExam button
+      document.addEventListener("DOMContentLoaded", () => {
+          const addExamButton = document.querySelector(".add-exam");
+          addExamButton.addEventListener("click",  () => {
+          const createExamFormPage = "http://localhost:8080/QuesApp/createExamForm";
+          window.location.href = createExamFormPage;
+              });
+          });
+
+
+      // render infor exam
+
+      document.addEventListener("DOMContentLoaded",async () => {
+            await renderExams();
+            await engageExam();
+          });
+
+
+
+           async function myFetch(url, options) {
+             try {
+               const response = await fetch(url, options);
+               console.log("phuc",response);
+               return response;
+             } catch (error) {
+               console.log("2", error.message);
+               alert(error.message);
+             }
+           }
+
+      async function getExamData(idSubject) {
+          const url = `http://localhost:8080/QuesApp/auth/exams?id_subject=${idSubject}`;
+
+          const options = {
+            method: "GET",
+            headers: {
+              "Content-Type": "application/json",
+            },
+          };
+
+          try {
+            const response = await myFetch(url, options);
+            const responseData = await response.json();
+            return responseData;
+          } catch (error) {
+            alert(error.message);
+          }
+        }
+
+        async function renderExams() {
+                try {
+                  const idSubject = localStorage.getItem("idSubject");
+                  const exams = await getExamData(idSubject);
+                  const data = exams.data;
+                  const ExamContainer = document.querySelector(".exam");
+                  ExamContainer.innerHTML ="";
+
+                  // id
+                  let id = 1;
+
+                  data.forEach((exam) => {
+                    // row
+                    const rowElement = document.createElement("tr");
+                    rowElement.classList.add("row-exam")
+                    rowElement.setAttribute("data",exam.idExam);
+
+                     rowElement.innerHTML = `
+                            <td>${id++}</td>
+                            <td>${exam.nameExam}</td>
+                            <td>${exam.numberQuestion}</td>
+                            <td>${exam.timeLimit / 60} minutes</td>
+                            <td class="action-buttons">
+                            <button class="action-button ti ti-trash icon delete"></button>
+                            <button class="start-quiz-button">Take</button>
+                            </td>
+                          `;
+
+
+                    // append
+                    ExamContainer.appendChild(rowElement);
+                  });
+                   console.log(exams);
+                          } catch (error) {
+                            alert(error.message);
+                          }
+                        }
+
+
+       //engange function
+
+       async function engageExam(){
+       const exams = document.querySelectorAll(".row-exam");
+          exams.forEach(exam => {
+              const idExam = exam.getAttribute('data');
+              exam.addEventListener("click", async (event) => {
+                  const clickedElement = event.target;
+                  if (clickedElement.classList.contains("delete")|| clickedElement.parentElement.classList.contains("delete")) {
+                      event.stopImmediatePropagation();
+                      await deleteExamById(idExam);
+                  } else if (clickedElement.classList.contains("update")|| clickedElement.parentElement.classList.contains("update")) {
+                      event.stopImmediatePropagation();
+                      console.log(idExam,"ronadlo")
+                      localStorage.setItem("idExam",idExam);
+                      const formUpdateExamUrlPage = "http://localhost:8080/QuesApp/updateExamForm";
+                      window.location.href = formUpdateExamUrlPage;
+
+                  } else if(clickedElement.classList.contains("start-quiz-button")|| clickedElement.parentElement.classList.contains("start-quiz-button")) {
+                      localStorage.setItem("idExam",idExam);
+                      const takeExamUrlPage = "http://localhost:8080/QuesApp/doExam";
+                      window.location.href = takeExamUrlPage;
+                  }
+              });
+          });
+
+
+       }
+
+    // delete button
+    // send Id exam to delete
+    async function sendIdExamToDelete(idExam){
+            const url = `http://localhost:8080/QuesApp/auth/exams?id_exam=${idExam}`;
+            const options = {
+            method: "DELETE",
+            headers: {
+               "Content-Type": "application/json",
+               },
+             };
+
+             try {
+                  const response = await myFetch(url, options);
+                  if (response.status === 204) {
+                        return { success: true, message: `Delete exam with id ${idExam} successful`};
+                          }
+                  else{
+                  const responseData = await response.json();
+                  return { success: false, message: responseData.message };
+                  }
+                  } catch (error) {
+                  alert(error.message);
+                  }
+      }
+
+      async function deleteExamById(idExam){
+        try{
+            const messageAfterDelete = await sendIdExamToDelete(idExam);
+            if (messageAfterDelete.success) {
+                alert(messageAfterDelete.message);
+                location.reload();
+                } else {
+                throw new Error(messageAfterDelete.message);
+                }
+        }
+        catch(error){
+        alert(error.message)
+        }
+      }
+      </script>
+
+  </body>
+
+
+</html>
Index: src/main/java/com/example/viewController/ListExamController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/viewController/ListExamController.java b/src/main/java/com/example/viewController/ListExamController.java
new file mode 100644
--- /dev/null	(date 1708845939707)
+++ b/src/main/java/com/example/viewController/ListExamController.java	(date 1708845939707)
@@ -0,0 +1,18 @@
+package com.example.viewController;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+@WebServlet(urlPatterns = "/exams")
+public class ListExamController extends HttpServlet {
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/listExam.jsp");
+        dispatcher.forward(request, response);
+    }
+}
Index: src/main/java/com/example/middleware/AccessCors.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/middleware/AccessCors.java b/src/main/java/com/example/middleware/AccessCors.java
new file mode 100644
--- /dev/null	(date 1708113954506)
+++ b/src/main/java/com/example/middleware/AccessCors.java	(date 1708113954506)
@@ -0,0 +1,38 @@
+package com.example.middleware;
+
+import javax.servlet.*;
+import javax.servlet.annotation.WebFilter;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+@WebFilter(urlPatterns = "/*")
+public class AccessCors implements Filter {
+    @Override
+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain) throws IOException, ServletException {
+        HttpServletResponse response = (HttpServletResponse) servletResponse;
+        HttpServletRequest request = (HttpServletRequest) servletRequest;
+
+        response.addHeader("Access-Control-Allow-Origin", "*");
+        response.addHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE, HEAD");
+        response.addHeader("Access-Control-Allow-Headers", "X-PINGOTHER, Origin, X-Requested-With, Content-Type, Accept, Session-Id");
+        response.addHeader("Access-Control-Max-Age", "1728000");
+        if ("OPTIONS".equalsIgnoreCase(request.getMethod())) {
+            response.setStatus(HttpServletResponse.SC_OK);
+            return;
+
+        }
+        chain.doFilter(request, response);
+
+
+
+    }
+
+    @Override
+    public void init(FilterConfig filterConfig) throws ServletException {
+    }
+
+    @Override
+    public void destroy() {
+    }
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1704689684747)
+++ b/.gitignore	(date 1704689684747)
@@ -0,0 +1,38 @@
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### IntelliJ IDEA ###
+.idea/modules.xml
+.idea/jarRepositories.xml
+.idea/compiler.xml
+.idea/libraries/
+*.iws
+*.iml
+*.ipr
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: src/main/webapp/views/addQuestionToExam.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/addQuestionToExam.jsp b/src/main/webapp/views/addQuestionToExam.jsp
new file mode 100644
--- /dev/null	(date 1709286035902)
+++ b/src/main/webapp/views/addQuestionToExam.jsp	(date 1709286035902)
@@ -0,0 +1,233 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <title>List of Questions</title>
+    <style>
+    body {
+      font-family: Arial, sans-serif;
+      background: linear-gradient(90deg, #c7c5f4, #776bcc);
+      margin: 0;
+      padding: 0;
+    }
+
+    .container {
+      max-width: 800px;
+      margin: 50px auto;
+      padding: 20px;
+      background-color: rgba(255, 255, 255, 0.9);
+      border-radius: 8px;
+      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
+    }
+
+    h2 {
+      text-align: center;
+      color: #6c63ac;
+      margin-bottom: 20px;
+    }
+
+    .question-list {
+      margin-bottom: 20px;
+    }
+
+    .question-item {
+      display: flex;
+      align-items: center;
+      justify-content: space-between;
+      background-color: rgba(255, 255, 255, 0.7);
+      padding: 15px;
+      margin-bottom: 10px;
+      border-radius: 5px;
+    }
+
+    .text-question {
+      font-size: 1.2rem;
+    }
+
+    .checkbox-label {
+      width: 20px;
+      height: 20px;
+      border: 1px solid #ccc;
+      border-radius: 3px;
+      display: inline-block;
+      cursor: pointer;
+    }
+
+    .checkbox {
+      display: none;
+    }
+
+    .checkbox:checked + .checkbox-label {
+      background-color: #6c63ac;
+    }
+
+    .checkbox:checked + .checkbox-label::after {
+      font-size: 14px;
+      color: white;
+    }
+
+    button {
+      width: 100%;
+      padding: 10px;
+      background-color: #6c63ac;
+      color: #fff;
+      border: none;
+      border-radius: 4px;
+      cursor: pointer;
+      transition: background-color 0.3s;
+      margin-top: 10px;
+    }
+
+    button:hover {
+      background-color: #8e86d8;
+    }
+
+
+    </style>
+
+  </head>
+  <body>
+    <div class="container">
+      <h2>From Add Question</h2>
+      <div class="question-list">
+
+      </div>
+      <button id="addAllQuestionsSelectedBtn">Add All Questions Selected</button>
+      <button id="addAllQuestionsBtn">Select All Questions</button>
+    </div>
+
+    <script>
+
+     // render ra tat ca cau hoi
+     document.addEventListener("DOMContentLoaded",async ()=>{
+        await renderListQuestion();
+     })
+
+     async function myFetch(url, options) {
+           try {
+             const response = await fetch(url, options);
+             return response;
+           } catch (error) {
+             alert(error.message);
+           }
+         }
+
+
+     async function getQuestionsData(idSubject) {
+           const url = `http://localhost:8080/QuesApp/auth/questions?subject=${idSubject}`;
+
+           const options = {
+             method: "GET",
+             headers: {
+               "Content-Type": "application/json",
+             },
+           };
+
+           try {
+             const response = await myFetch(url, options);
+             const responseData = await response.json();
+             return responseData;
+           } catch (error) {
+             alert(error.message);
+           }
+         }
+
+     async function renderListQuestion() {
+         try {
+             const idSubject = localStorage.getItem("idSubject");
+             const questions = await getQuestionsData(idSubject);
+             const data = questions.data;
+             console.log("phuc", data);
+
+             const contentContainer = document.querySelector(".question-list");
+             contentContainer.innerHTML = "";
+
+             let numQuestion = 1;
+
+             data.forEach(question => {
+                 const questionItem = document.createElement('div');
+                 questionItem.classList.add('question-item');
+
+                 const questionText = document.createElement('span');
+                 questionText.classList.add('text-question');
+                 questionText.textContent = `Question ${numQuestion}: ${question.content}`;
+
+                 const checkbox = document.createElement('input');
+                 checkbox.type = 'checkbox';
+                 checkbox.classList.add('checkbox');
+                 checkbox.id = `question${numQuestion}`;
+                 checkbox.setAttribute("data",question.idQuestion);
+
+                 const label = document.createElement('label');
+                 label.htmlFor = `question${numQuestion}`;
+                 label.classList.add('checkbox-label');
+
+                 questionItem.appendChild(questionText);
+                 questionItem.appendChild(checkbox);
+                 questionItem.appendChild(label);
+
+                 contentContainer.appendChild(questionItem);
+
+                 ++numQuestion;
+             });
+         } catch (error) {
+             alert(error.message);
+         }
+     }
+
+
+     // addAllQuestionsSelectedBtn
+     document.addEventListener("DOMContentLoaded", () => {
+         // Add event listener for the button to select all questions
+         const addAllQuestionsSelectedButton = document.getElementById("addAllQuestionsSelectedBtn");
+         addAllQuestionsSelectedButton.addEventListener("click", addAllSelectedQuestions);
+     });
+
+
+    function addAllSelectedQuestions() {
+         // luu tat ca id cua cau hoi duoc chon vao mot mang
+        const selectedQuestionIds = [];
+
+        const checkboxes = document.querySelectorAll('.checkbox');
+        checkboxes.forEach(checkbox => {
+            if (checkbox.checked) {
+                selectedQuestionIds.push(checkbox.getAttribute('data'));
+            }
+        });
+
+
+        // luu vao localStorage de khi quay tro ve trang truoc co the dua vao day de goi API
+        localStorage.setItem('selectedQuestionIds', JSON.stringify(selectedQuestionIds));
+
+
+        // sau khi an them thi quay tro ve trang truoc
+        const createExamFormUrlPage = "http://localhost:8080/QuesApp/createExamForm";
+        window.location.href = createExamFormUrlPage;
+    }
+
+
+
+
+
+     // addAllQuestionsBtn
+     document.addEventListener('DOMContentLoaded', () => {
+         const selectAllButton = document.getElementById('addAllQuestionsBtn');
+         selectAllButton.addEventListener('click', () => {
+             const checkboxes = document.querySelectorAll('.checkbox');
+             checkboxes.forEach(checkbox => {
+                 checkbox.checked = !checkbox.checked;
+                 checkbox.dispatchEvent(new Event('change'));
+             });
+         });
+     });
+
+
+
+
+
+
+    </script>
+  </body>
+</html>
Index: src/main/java/com/example/DTO/ExamQuestionDetailsDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/DTO/ExamQuestionDetailsDTO.java b/src/main/java/com/example/DTO/ExamQuestionDetailsDTO.java
new file mode 100644
--- /dev/null	(date 1709313263080)
+++ b/src/main/java/com/example/DTO/ExamQuestionDetailsDTO.java	(date 1709313263080)
@@ -0,0 +1,47 @@
+package com.example.DTO;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+
+import java.util.List;
+
+public class ExamQuestionDetailsDTO {
+    private String nameExam;
+    private int timeLimit;
+    private List<QuestionAnswerDTO> questionAnswerDTOS;
+
+
+
+
+    @JsonCreator
+    public ExamQuestionDetailsDTO(@JsonProperty("nameExam") String nameExam,@JsonProperty("timeLimit") int timeLimit, @JsonProperty("questions") List<QuestionAnswerDTO> questionAnswerDTOS) {
+        this.nameExam = nameExam;
+        this.timeLimit = timeLimit;
+        this.questionAnswerDTOS = questionAnswerDTOS;
+    }
+
+    public String getNameExam() {
+        return nameExam;
+    }
+
+    public void setNameExam(String nameExam) {
+        this.nameExam = nameExam;
+    }
+
+    public int getTimeLimit() {
+        return timeLimit;
+    }
+
+    public void setTimeLimit(int timeLimit) {
+        this.timeLimit = timeLimit;
+    }
+
+    public List<QuestionAnswerDTO> getQuestionAnswerDTOS() {
+        return questionAnswerDTOS;
+    }
+
+    public void setQuestionAnswerDTOS(List<QuestionAnswerDTO> questionAnswerDTOS) {
+        this.questionAnswerDTOS = questionAnswerDTOS;
+    }
+}
Index: src/main/webapp/views/updateSubjectForm.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/updateSubjectForm.jsp b/src/main/webapp/views/updateSubjectForm.jsp
new file mode 100644
--- /dev/null	(date 1709708848159)
+++ b/src/main/webapp/views/updateSubjectForm.jsp	(date 1709708848159)
@@ -0,0 +1,191 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Subject</title>
+    <style>
+
+     body {
+         font-family: "Arial", sans-serif;
+         background: linear-gradient(90deg, #c7c5f4, #776bcc);
+         margin: 0;
+         padding: 0;
+       }
+
+       .container {
+         max-width: 800px;
+         margin: 50px auto;
+         padding: 20px;
+         background-color: rgba(255, 255, 255, 0.9);
+         border-radius: 8px;
+         box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
+       }
+
+       h2 {
+         text-align: center;
+         color: #6c63ac;
+       }
+
+       .form-group {
+         margin-bottom: 20px;
+       }
+
+       label {
+         font-weight: bold;
+         color: #6c63ac;
+         display: block;
+       }
+
+       input[type="text"] {
+         width: calc(100% - 20px);
+         padding: 10px;
+         margin-top: 5px;
+         margin-bottom: 10px;
+         border: 1px solid #ccc;
+         border-radius: 4px;
+         box-sizing: border-box;
+       }
+
+       button[type="submit"],
+        {
+         padding: 12px 24px; /* Điều chỉnh kích thước nút */
+         background-color: #6c63ac;
+         color: #fff;
+         border: none;
+         border-radius: 5px;
+         font-size: 16px; /* Đặt kích thước chữ cho nút */
+         cursor: pointer;
+         transition: background-color 0.3s;
+         display: block;
+         margin: 0 auto; /* Canh giữa nút */
+       }
+
+       button[type="submit"]:hover {
+         background-color: #564c88;
+       }
+
+
+        button[type="button"] {
+            padding: 12px 24px;
+            background-color: #6c63ac;
+            color: #fff;
+            border: none;
+            border-radius: 5px;
+            font-size: 16px;
+            cursor: pointer;
+            transition: background-color 0.3s;
+            display: block;
+            margin: 10px auto; /* Canh giữa nút và thêm khoảng cách dưới */
+        }
+
+        button[type="button"]:hover {
+            background-color: #564c88;
+        }
+
+
+     </style>
+
+</head>
+<body>
+    <div class="container">
+        <h2>Subject</h2>
+        <div id="subjectForm">
+            <div class="form-group">
+                <label for="subject">Name Subject:</label>
+                <input type="text" id="subject" name="subject" required />
+            </div>
+            <button type="button"  id="updateBtn">Update</button>
+            <button type="button" onclick="window.history.back()">Back</button>
+
+        </div>
+    </div>
+
+    <script>
+
+
+    function getUserInput() {
+            const subjectInput = document.getElementById("subject");
+            return subjectInput ;
+            }
+
+        document.addEventListener("DOMContentLoaded", () => {
+            const createBtn = document.getElementById("updateBtn");
+            const idSubject = localStorage.getItem("idSubject");
+            console.log("test",idSubject);
+            createBtn.addEventListener("click", async (event) => {
+                event.preventDefault();
+                await updateSubject(getUserInput(),idSubject);
+            });
+        });
+
+
+        async function myFetch(url, options) {
+          try {
+            const response = await fetch(url, options);
+            return response;
+          } catch (error) {
+            console.log("2", error.message);
+            alert(error.message);
+          }
+        }
+
+        async function sendUserDataForUpdate(idSubject,data){
+                    const url = `http://localhost:8080/QuesApp/auth/subjects?id=${idSubject}`;
+                      const options = {
+                        method: "PUT",
+                        headers: {
+                          "Content-Type": "application/json",
+                        },
+                        body: JSON.stringify(data),
+                      };
+
+                      try {
+                        const response = await myFetch(url, options);
+                        const responseData = await response.json();
+                        return responseData;
+                      } catch (error) {
+                        console.log("phuc");
+                        alert(error.message);
+                      }
+                    }
+
+
+
+
+                     async function updateSubject(subjectInput,idSubject) {
+                          const name = subjectInput;
+
+                          if(name) {
+                            const subject = {
+                              nameSubject : name.value
+                            };
+
+                            try {
+                              const responseSubject = await sendUserDataForUpdate(idSubject,subject);
+                              console.log("lc", responseSubject);
+                              localStorage.removeItem("idSubject");
+                              if (responseSubject.success) {
+                              alert(responseSubject.message);
+                                const urlHomePage = "http://localhost:8080/QuesApp/home";
+                                window.location.href = urlHomePage;
+                              } else {
+                                throw new Error(responseSubject.message);
+                              }
+                            } catch (error) {
+                              console.log("phuc1");
+                              alert(error.message);
+                            }
+                          } else {
+                            console.error("Không thể tìm thấy các phần tử input.");
+                          }
+                        }
+
+
+     </script>
+
+</body>
+
+
+</html>
Index: src/main/java/com/example/viewController/UpdateSubjectFormController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/viewController/UpdateSubjectFormController.java b/src/main/java/com/example/viewController/UpdateSubjectFormController.java
new file mode 100644
--- /dev/null	(date 1709221212634)
+++ b/src/main/java/com/example/viewController/UpdateSubjectFormController.java	(date 1709221212634)
@@ -0,0 +1,20 @@
+package com.example.viewController;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+
+@WebServlet(urlPatterns = "/formUpdateSubject")
+public class UpdateSubjectFormController extends HttpServlet {
+
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/updateSubjectForm.jsp");
+        dispatcher.forward(request, response);
+    }
+}
Index: src/main/webapp/views/register.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/register.jsp b/src/main/webapp/views/register.jsp
new file mode 100644
--- /dev/null	(date 1708418024531)
+++ b/src/main/webapp/views/register.jsp	(date 1708418024531)
@@ -0,0 +1,317 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
+<!DOC TYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
+    <title>Sign Up</title>
+
+    <style>* {
+             box-sizing: border-box;
+             margin: 0;
+             padding: 0;
+             font-family: "Raleway", sans-serif;
+           }
+
+           body {
+             background: linear-gradient(90deg, #c7c5f4, #776bcc);
+             margin: 0;
+           }
+
+           .container {
+             display: flex;
+             align-items: center;
+             justify-content: center;
+             min-height: 100vh;
+           }
+
+           .screen {
+             background: linear-gradient(90deg, #5d54a4, #7c78b8);
+             position: relative;
+             height: 600px;
+             width: 360px;
+             box-shadow: 0px 0px 24px #5c5696;
+           }
+
+           .screen__content {
+             z-index: 1;
+             position: relative;
+             height: 100%;
+           }
+
+           .screen__background {
+             position: absolute;
+             top: 0;
+             left: 0;
+             right: 0;
+             bottom: 0;
+             z-index: 0;
+             -webkit-clip-path: inset(0 0 0 0);
+             clip-path: inset(0 0 0 0);
+           }
+
+           .screen__background__shape {
+             transform: rotate(45deg);
+             position: absolute;
+           }
+
+           .screen__background__shape1 {
+             height: 520px;
+             width: 520px;
+             background: #fff;
+             top: -50px;
+             right: 120px;
+             border-radius: 0 72px 0 0;
+           }
+
+           .screen__background__shape2 {
+             height: 220px;
+             width: 220px;
+             background: #6c63ac;
+             top: -172px;
+             right: 0;
+             border-radius: 32px;
+           }
+
+           .screen__background__shape3 {
+             height: 540px;
+             width: 190px;
+             background: linear-gradient(270deg, #5d54a4, #6a679e);
+             top: -24px;
+             right: 0;
+             border-radius: 32px;
+           }
+
+           .screen__background__shape4 {
+             height: 400px;
+             width: 200px;
+             background: #7e7bb9;
+             top: 420px;
+             right: 50px;
+             border-radius: 60px;
+           }
+
+           .login,
+           .register {
+             width: 320px;
+             padding: 30px;
+             padding-top: 156px;
+           }
+
+           .login__field,
+           .register__field {
+             padding: 20px 0px;
+             position: relative;
+           }
+
+           .login__icon {
+             position: absolute;
+             top: 30px;
+             color: #7875b5;
+           }
+
+           .login__input,
+           .register__input {
+             border: none;
+             border-bottom: 2px solid #d1d1d4;
+             background: none;
+             padding: 10px;
+             padding-left: 24px;
+             font-weight: 700;
+             width: 75%;
+             transition: 0.2s;
+             color: #5e5e5f;
+           }
+
+           .login__input:active,
+           .login__input:focus,
+           .login__input:hover,
+           .register__input:active,
+           .register__input:focus,
+           .register__input:hover {
+             outline: none;
+             border-bottom-color: #6a679e;
+           }
+
+           .login__submit,
+           .register__submit {
+             background: #fff;
+             font-size: 14px;
+             margin-top: 30px;
+             padding: 16px 20px;
+             border-radius: 26px;
+             border: 1px solid #d4d3e8;
+             text-transform: uppercase;
+             font-weight: 700;
+             display: flex;
+             align-items: center;
+             width: 100%;
+             color: #4c489d;
+             box-shadow: 0px 2px 2px #5c5696;
+             cursor: pointer;
+             transition: 0.2s;
+           }
+
+           .login__submit:active,
+           .login__submit:focus,
+           .login__submit:hover,
+           .register__submit:active,
+           .register__submit:focus,
+           .register__submit:hover {
+             border-color: #6a679e;
+             outline: none;
+           }
+
+           .button__icon {
+             font-size: 24px;
+             margin-left: auto;
+             color: #7875b5;
+           }
+
+           .social-login {
+             position: absolute;
+             height: 140px;
+             width: 160px;
+             text-align: center;
+             bottom: 0px;
+             right: 0px;
+             color: #fff;
+           }
+
+           .social-icons {
+             display: flex;
+             align-items: center;
+             justify-content: center;
+           }
+
+           .social-login__icon {
+             padding: 20px 10px;
+             color: #fff;
+             text-decoration: none;
+             text-shadow: 0px 0px 8px #7875b5;
+           }
+
+           .social-login__icon:hover {
+             transform: scale(1.5);
+           }
+ </style>
+
+</head>
+<body>
+<div class="container">
+    <div class="screen">
+        <div class="screen__content">
+            <form class="register" action="your-servlet-url" method="post">
+                <div class="register__field">
+                    <i class="register__icon fas fa-user"></i>
+                    <input type="text" class="register__input" name="name" placeholder="What's your name ?">
+                </div>
+                <div class="register__field">
+                    <i class="register__icon fas fa-envelope"></i>
+                    <input type="email" class="register__input" name="email" placeholder="What's your email ?">
+                </div>
+                <div class="register__field">
+                    <i class="register__icon fas fa-lock"></i>
+                    <input type="password" class="register__input" name="password" placeholder="Password">
+                </div>
+                <button class="button register__submit" type="submit">
+                    <span class="button__text">Register</span>
+                    <i class="button__icon fas fa-chevron-right"></i>
+                </button>
+            </form>
+        </div>
+        <div class="screen__background">
+            <span class="screen__background__shape screen__background__shape4"></span>
+            <span class="screen__background__shape screen__background__shape3"></span>
+            <span class="screen__background__shape screen__background__shape2"></span>
+            <span class="screen__background__shape screen__background__shape1"></span>
+        </div>
+    </div>
+</div>
+<script> document.addEventListener("DOMContentLoaded", () => {
+           const registerButton = document.querySelector(".register__submit");
+
+           registerButton.addEventListener("click", function (event) {
+             event.preventDefault();
+             registerUser(getUserInput());
+           });
+         });
+
+         function getUserInput() {
+           const nameInput = document.querySelector(
+             '.register__input[placeholder="What\'s your name ?"]'
+           );
+           const emailInput = document.querySelector(
+             '.register__input[placeholder="What\'s your email ?"]'
+           );
+           const passwordInput = document.querySelector(
+             '.register__input[placeholder="Password"]'
+           );
+
+           return { nameInput, emailInput, passwordInput };
+         }
+
+         async function myFetch(url, options) {
+           try {
+             const response = await fetch(url, options);
+             return response;
+           } catch (error) {
+             console.log(error.message);
+             alert(error.message);
+           }
+         }
+
+         async function sendUserInput(data) {
+           const url = "http://localhost:8080/QuesApp/register";
+
+           const options = {
+             method: "POST",
+             headers: {
+               "Content-Type": "application/json",
+             },
+             body: JSON.stringify(data),
+           };
+
+           try {
+             const response = await myFetch(url, options);
+             const responseData = await response.json();
+             return responseData;
+             // alert(responseData.message);
+           } catch (error) {
+             alert(error.message);
+           }
+         }
+
+         async function registerUser(inputUser) {
+           const name = inputUser.nameInput;
+           const email = inputUser.emailInput;
+           const password = inputUser.passwordInput;
+
+           if (name && email && password) {
+             const user = {
+               email: email.value,
+               userName: name.value,
+               password: password.value,
+             };
+
+             try {
+               const registerSuccessfully = await sendUserInput(user);
+               if (registerSuccessfully.success) {
+               alert(registerSuccessfully.message);
+                const urlLoginPage = "http://localhost:8080/QuesApp/signIn";
+                window.location.href = urlLoginPage;
+
+               } else {
+                 throw new Error(registerSuccessfully.message);
+               }
+             } catch (error) {
+               alert(error.message);
+             }
+           } else {
+             console.error("Không thể tìm thấy các phần tử input.");
+           }
+         }
+</script>
+</body>
+</html>
Index: src/main/java/com/example/dao/AnswerDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/dao/AnswerDao.java b/src/main/java/com/example/dao/AnswerDao.java
new file mode 100644
--- /dev/null	(date 1708967274766)
+++ b/src/main/java/com/example/dao/AnswerDao.java	(date 1708967274766)
@@ -0,0 +1,11 @@
+package com.example.dao;
+
+import com.example.entity.Answer;
+
+import java.util.List;
+
+public interface AnswerDao extends Dao<Answer>{
+    List<Answer> findAllAnswerByQuestion(int idQuestion);
+    boolean deleteAllAnswerByQuestion(int idQuestion);
+
+}
Index: src/main/java/com/example/mySQLImplDao/QuestionImplDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/mySQLImplDao/QuestionImplDao.java b/src/main/java/com/example/mySQLImplDao/QuestionImplDao.java
new file mode 100644
--- /dev/null	(date 1709278610357)
+++ b/src/main/java/com/example/mySQLImplDao/QuestionImplDao.java	(date 1709278610357)
@@ -0,0 +1,241 @@
+package com.example.mySQLImplDao;
+
+import com.example.DataSource.ConnectionPool;
+import com.example.dao.QuestionDao;
+import com.example.entity.Question;
+import com.example.entity.Result;
+import com.example.utility.Helper;
+
+import java.sql.*;
+import java.util.ArrayList;
+import java.util.List;
+
+public class QuestionImplDao implements QuestionDao {
+
+    @Override
+    public List<Question> findAlQuestionsByListId(List<Integer> listIds) {
+        String query = "SELECT * FROM questions WHERE id_question" + Helper.supportINClause(listIds);
+
+        List<Question> questions = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            for (int i = 0; i < listIds.size(); i++) {
+                preparedStatement.setInt(i + 1, listIds.get(i));
+            }
+
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    Question question = new Question();
+                    question.setIdQuestion(resultSet.getInt("id_question"));
+                    question.setContent(resultSet.getString("content"));
+                    question.setIdSubject(resultSet.getInt("id_subject"));
+                    questions.add(question);
+                }
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Error finding list questions due to a database error", e);
+        }
+
+        return questions;
+    }
+
+
+    @Override
+    public List<Question> findAllQuestionOfExam(int idExam) {
+        String query = "SELECT * FROM questions JOIN questions_exams ON questions.id_question = questions_exams.id_question WHERE questions_exams.id_exam = ?";
+        List<Question> questions = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setInt(1, idExam);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    Question question = new Question();
+                    question.setIdQuestion(resultSet.getInt("id_question"));
+                    question.setContent(resultSet.getString("content"));
+                    question.setIdSubject(resultSet.getInt("id_subject"));
+                    questions.add(question);
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding questions of exam due to a database error", e);
+        }
+        return questions;
+    }
+
+
+    @Override
+    public void removeQuestionFromExam(int idQuestion, int idExam) {
+        String query = "DELETE FROM questions_exams WHERE id_question = ? AND id_exam = ?";
+
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement statement = connection.prepareStatement(query)) {
+
+            statement.setInt(1, idQuestion);
+            statement.setInt(2, idExam);
+            statement.executeUpdate();
+
+        } catch (Exception e) {
+            throw new RuntimeException(e.getMessage());
+        }
+    }
+
+    @Override
+    public void addQuestionsToExam(List<Integer> idQuestions, int idExam) {
+        String query = "INSERT INTO questions_exams (id_question, id_exam) VALUES (?, ?)";
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement statement = connection.prepareStatement(query)) {
+
+            for (int idQuestion : idQuestions) {
+                statement.setInt(1, idQuestion);
+                statement.setInt(2, idExam);
+                statement.addBatch();
+            }
+            statement.executeBatch();
+        } catch (Exception e) {
+            throw new RuntimeException(e.getMessage());
+        }
+    }
+
+
+
+    @Override
+    public List<Question> findAllQuestionBySubject(int idSubject) {
+        String query = "SELECT * FROM questions WHERE id_subject = ?";
+        List<Question> questions = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setInt(1, idSubject);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    int idQuestion = resultSet.getInt("id_question");
+                    String content = resultSet.getString("content");
+                    var question = new Question(idQuestion,content,idSubject);
+                    questions.add(question);
+                }
+            }
+        } catch (Exception e) {
+
+            throw new RuntimeException("Error finding question by subject due to a database error", e);
+        }
+
+        return questions;
+    }
+
+    @Override
+    public Question create(Question question) {
+        String query = "INSERT INTO questions (content, id_subject) VALUES (?, ?)";
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
+            preparedStatement.setString(1, question.getContent());
+            preparedStatement.setInt(2, question.getIdSubject());
+
+            int affectedRows = preparedStatement.executeUpdate();
+
+            if (affectedRows == 0) {
+                throw new SQLException("Creating question failed, no rows affected.");
+            }
+
+            try (ResultSet resultSet = preparedStatement.getGeneratedKeys()) {
+                if (resultSet.next()) {
+                    // 1 is the column index of the generated key
+                    question.setIdQuestion(resultSet.getInt(1));
+                } else {
+                    throw new SQLException("Creating question failed, no ID obtained.");
+                }
+            }
+        } catch (SQLException e) {
+            throw new RuntimeException("Create question failed due to a database error", e);
+        }
+        return question;
+    }
+
+
+
+    @Override
+    public Question findById(int id) {
+        String query = "SELECT * FROM questions WHERE id_question = ?";
+        Question question = null;
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setInt(1, id);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    question = new Question();
+                    question.setIdQuestion(resultSet.getInt("id_question"));
+                    question.setContent(resultSet.getString("content"));
+                    question.setIdSubject(resultSet.getInt("id_subject"));
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding question by id due to a database error", e);
+        }
+
+        return question;
+    }
+
+    @Override
+    public Question updateById(int idOldQuestion, Question newQuestion) {
+        String query = "UPDATE questions SET content = ? WHERE id_question = ?";
+        String newQuestionContent= newQuestion.getContent();
+
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement prepareStatement = connection.prepareStatement(query)) {
+
+            prepareStatement.setString(1, newQuestionContent);
+            prepareStatement.setInt(2, idOldQuestion);
+
+            int rowsAffected = prepareStatement.executeUpdate();
+
+            Question question = findById(idOldQuestion);
+            int idSubject = question.getIdSubject();
+
+            if (rowsAffected > 0) {
+                return new Question(idOldQuestion,newQuestionContent,idSubject);
+            }
+
+        } catch (Exception e) {
+            throw new RuntimeException(e.getMessage());
+        }
+        return null;
+    }
+
+    @Override
+    public boolean deleteById(int idQuestion) {
+        String query = "DELETE FROM questions WHERE id_question = ?";
+        try(Connection connection = ConnectionPool.getDataSource().getConnection();
+            PreparedStatement preparedStatement = connection.prepareStatement(query)){
+            preparedStatement.setInt(1,idQuestion);
+            int rowAffected = preparedStatement.executeUpdate();
+            if(rowAffected > 0) return true;
+        }
+        catch (Exception e) {
+            throw new RuntimeException("Delete question failed", e);
+        }
+        return false;
+    }
+
+    @Override
+    public List<Question> findAll() {
+        String query = "SELECT * FROM questions";
+        List<Question> questions = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+
+            ResultSet resultSet = preparedStatement.executeQuery();
+            while (resultSet.next()) {
+                int idQuestion = resultSet.getInt("id_question");
+                int idSubject = resultSet.getInt("id_subject");
+                String content = resultSet.getString("content");
+                var question = new Question(idQuestion,content,idSubject);
+                questions.add(question);
+            }
+        }
+        catch (Exception e) {
+            throw new RuntimeException("Found all questions failed due to a database error", e);
+        }
+
+        return questions;
+    }
+}
Index: src/main/java/com/example/dao/QuestionDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/dao/QuestionDao.java b/src/main/java/com/example/dao/QuestionDao.java
new file mode 100644
--- /dev/null	(date 1709278060594)
+++ b/src/main/java/com/example/dao/QuestionDao.java	(date 1709278060594)
@@ -0,0 +1,18 @@
+package com.example.dao;
+
+import com.example.entity.Question;
+
+import java.util.List;
+
+public interface QuestionDao extends Dao<Question> {
+    List<Question> findAllQuestionBySubject(int idSubject);
+
+    List<Question> findAllQuestionOfExam(int idExam);
+
+    void addQuestionsToExam(List<Integer> idQuestions,int idExam);
+
+    void removeQuestionFromExam(int idQuestion,int idExam);
+
+    List<Question> findAlQuestionsByListId(List<Integer> listIds);
+
+}
Index: src/main/java/com/example/APIcontroller/AuthenticationAPIController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/APIcontroller/AuthenticationAPIController.java b/src/main/java/com/example/APIcontroller/AuthenticationAPIController.java
new file mode 100644
--- /dev/null	(date 1708418281355)
+++ b/src/main/java/com/example/APIcontroller/AuthenticationAPIController.java	(date 1708418281355)
@@ -0,0 +1,78 @@
+package com.example.APIcontroller;
+
+import com.example.ExceptionHandling.DuplicateUserException;
+import com.example.utility.ResponseUtility;
+import com.example.utility.Validate;
+import com.example.entity.User;
+import com.example.mySQLImplDao.UserImplDao;
+import com.example.service.AuthService;
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.*;
+import java.io.IOException;
+
+@WebServlet(urlPatterns = {"/login","/register"})
+public class AuthenticationAPIController extends HttpServlet {
+    private final AuthService authService = new AuthService(new UserImplDao());
+    private final ObjectMapper mapper = new ObjectMapper();
+
+
+    @Override
+    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
+        response.setContentType("application/json");
+
+
+        String servletPath = request.getServletPath();
+
+        if ("/login".equals(servletPath)) handleLogin(request, response);
+         else if ("/register".equals(servletPath)) handleRegister(request, response);
+         else ResponseUtility.sendJsonResponse(response, "Invalid endpoint",null,HttpServletResponse.SC_BAD_REQUEST,false);
+    }
+
+    private void handleLogin(HttpServletRequest request, HttpServletResponse response) throws IOException {
+        User user = mapper.readValue(request.getReader(), User.class);
+
+        if (Validate.isInvalidLoginUserData(user)) {
+            ResponseUtility.sendJsonResponse(response, "Invalid Input User!", null,HttpServletResponse.SC_BAD_REQUEST,false);
+            return;
+        }
+
+        try {
+            int idUser = authService.loginAndGetIdUser(user.getEmail(), user.getPassword());
+            if (idUser != -1) {
+                HttpSession session = request.getSession();
+                session.setAttribute("id_user", idUser);
+                ResponseUtility.sendJsonResponse(response, "Login successful", null, HttpServletResponse.SC_OK,true);
+
+
+
+            } else {
+                ResponseUtility.sendJsonResponse(response, "Login failed. Invalid email or password.",null, HttpServletResponse.SC_UNAUTHORIZED,false);
+            }
+        } catch (Exception e) {
+            ResponseUtility.sendJsonResponse(response, "Login failed",null, HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+        }
+    }
+
+
+    private void handleRegister(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
+
+        // test
+        User user = mapper.readValue(request.getReader(), User.class);
+        if (Validate.isInvalidRegisterUserData(user)) {
+            ResponseUtility.sendJsonResponse(response, "Invalid Input User!", null, HttpServletResponse.SC_BAD_REQUEST,false);
+            return;
+        }
+
+        try {
+            authService.register(user);
+            ResponseUtility.sendJsonResponse(response, "Registration successful", null,HttpServletResponse.SC_CREATED,true);
+        } catch (DuplicateUserException e) {
+            ResponseUtility.sendJsonResponse(response, "Duplicate key error. This user already exists.", null,HttpServletResponse.SC_CONFLICT,false);
+        } catch (Exception e) {
+            ResponseUtility.sendJsonResponse(response, "Registration failed", null,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+        }
+    }
+}
Index: src/main/webapp/views/histories.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/views/histories.jsp b/src/main/webapp/views/histories.jsp
new file mode 100644
--- /dev/null	(date 1708969066411)
+++ b/src/main/webapp/views/histories.jsp	(date 1708969066411)
@@ -0,0 +1,328 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
+<!DOC TYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
+    <link href="
+    https://cdn.jsdelivr.net/npm/@icon/themify-icons@1.0.1-alpha.3/themify-icons.min.css
+    " rel="stylesheet">
+    <style>
+ body {
+   background: linear-gradient(90deg, #c7c5f4, #776bcc);
+   margin: 0;
+   font-family: "Raleway", sans-serif;
+   margin-top: 100px;
+ }
+
+ html {
+   font-size: 62.5%;
+ }
+
+
+    .header .home,
+    .header .logo-user {
+           width: 40px;
+           height: 40px;
+           border-radius: 50%;
+           margin: 0 5px;
+           cursor: pointer;
+     }
+
+
+ .header,
+ .body,
+ .footer {
+   margin: auto;
+   padding: 20px;
+   width: 80%;
+   backdrop-filter: blur(5px);
+ }
+
+ .header {
+   display: flex;
+   justify-content: space-between;
+   align-items: center;
+   background: rgba(255, 255, 255, 0.7);
+ }
+
+ .header div {
+   width: 40px;
+   height: 40px;
+   background: #bcb6eb;
+   margin: 0 5px;
+   border-radius: 50%;
+ }
+
+ .header .ti-search {
+   font-size: 20px;
+   color: #757575;
+   border: 2px solid #757575;
+   border-radius: 50%;
+   padding: 10px;
+   transition: all 0.3s ease;
+   margin-right: 10px;
+ }
+
+ .header .ti-search:hover {
+   background-color: #6a679e;
+   color: #fff;
+ }
+
+ .header .icon {
+   font-size: 20px;
+   color: #757575;
+   font-weight: 550;
+   display: flex;
+   justify-content: center;
+   align-items: center;
+   line-height: 40px;
+   text-align: center;
+   transition: transform 0.3s ease, box-shadow 0.3s ease, color 0.3s ease;
+   border-radius: 50%;
+   position: relative;
+ }
+
+ .header .icon:hover {
+   box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
+   color: whitesmoke;
+ }
+
+ .header .icon:hover ~ div {
+   filter: blur(2px);
+ }
+
+ .header .icon[title]:hover::after {
+   content: attr(title);
+   position: absolute;
+   left: 50%;
+   transform: translateX(-50%) translateY(100%);
+   background-color: #6a679e;
+   color: white;
+   font-size: 12px;
+   z-index: 999;
+ }
+
+ .header .search {
+   flex-grow: 1;
+   height: 60px;
+   background: #fff;
+   border-radius: 30px;
+   margin: 0 5px;
+   display: flex;
+   align-items: center;
+ }
+
+ .header .search_input {
+   border: none;
+   outline: none;
+   background: none;
+   padding: 10px;
+   padding-left: 24px;
+   padding-right: 24px;
+   font-weight: 700;
+   width: 100%;
+   transition: 0.2s;
+   height: 40px;
+   text-align: center;
+   color: #5e5e5f;
+ }
+
+ .header .search_input:focus {
+   border-bottom: 2px solid #6a679e;
+ }
+
+ .header .search_input::placeholder {
+   color: #5e5e5f;
+   font-weight: 700;
+   opacity: 0.7;
+ }
+
+ .header .search:hover .search_input::placeholder {
+   opacity: 1;
+ }
+
+ .header .search:hover .search_input {
+   border-bottom: 2px solid #6a679e;
+ }
+
+ .header .logo-user {
+   overflow: hidden;
+ }
+
+ .header .logo-user img {
+   width: 100%;
+   height: 100%;
+   object-fit: cover;
+ }
+
+ .body {
+   height: auto;
+   background: rgba(255, 255, 255, 0.7);
+ }
+
+ .list-history {
+   margin-top: 20px;
+   font-size: 1.4rem;
+ }
+
+ .field-history {
+   width: 100%;
+   border-collapse: collapse;
+ }
+
+ .field-history th,
+ .field-history td {
+   border: 1px solid #6c63ac;
+   padding: 10px;
+ }
+
+ .field-history th {
+   background-color: #6c63ac;
+   color: white;
+   text-align: left;
+ }
+
+ .field-history td {
+   background-color: #f2f2f2;
+ }
+
+ .field-history tr:hover {
+   background-color: #e6e6e6;
+ }
+
+ .field-history tr:hover td {
+   color: #6c63ac;
+ }
+
+ .history {
+   font-size: 1.4rem;
+ }
+
+
+
+     </style>
+    <title>History</title>
+</head>
+<body>
+    <div class="header">
+        <div class="home">
+            <i class="ti ti-home icon" title="Home"></i>
+        </div>
+        <div class="search">
+            <input type="text" class="search_input" placeholder="Enter Name Your Subject">
+            <i class="ti ti-search"></i>
+        </div>
+        <div class="logo-user">
+                <i class="ti ti-user icon"></i>
+        </div>
+    </div>
+
+    <div class="body">
+        <div class="list-history">
+            <table class="field-history">
+                <thead class= "column-history">
+                    <tr>
+                        <th>ID</th>
+                        <th>Subject</th>
+                        <th>Name Exam</th>
+                        <th>Time</th>
+                        <th>Result</th>
+                        <th>Start Time</th>
+                        <th>End Time</th>
+                    </tr>
+                    <tbody class= "history">
+
+                   </tbody>
+                </thead>
+            </table>
+        </div>
+    </div>
+    <script>
+
+
+ document.addEventListener(
+      "DOMContentLoaded",
+      async () => await renderHistories()
+    );
+
+
+        async function myFetch(url, options) {
+          try {
+            const response = await fetch(url, options);
+            return response;
+          } catch (error) {
+            console.log("2", error.message);
+            alert(error.message);
+          }
+        }
+
+     async function getHistoryData() {
+        const url = "http://localhost:8080/QuesApp/auth/history";
+        const options = {
+          method: "GET",
+          headers: {
+            "Content-Type": "application/json",
+          },
+        };
+
+        try {
+          const response = await myFetch(url, options);
+          const responseData = await response.json();
+          return responseData;
+        } catch (error) {
+          alert(error.message);
+        }
+      }
+
+      async function renderHistories() {
+        try {
+          const histories = await getHistoryData();
+          const data = histories.data;
+          const historiesContainer = document.querySelector(".history");
+          historiesContainer.innerHTML ="";
+
+          // id
+          let id = 1;
+
+          data.forEach((history) => {
+            // row
+            const rowElement = document.createElement("tr");
+
+             rowElement.innerHTML = `
+                    <td>${id++}</td>
+                    <td>${history.nameSubject}</td>
+                    <td>${history.nameExam}</td>
+                    <td>${history.timeLimit / 60} minutes</td>
+                    <td>${history.score}/10</td>
+                    <td>${history.startTime}</td>
+                    <td>${history.endTime}</td>
+                  `;
+
+
+            // append
+            historiesContainer.appendChild(rowElement);
+          });
+
+
+          console.log(histories);
+        } catch (error) {
+          alert(error.message);
+        }
+      }
+
+      // home
+      document.addEventListener("DOMContentLoaded", () => {
+         const homeButton = document.querySelector(".home");
+         homeButton.addEventListener("click", async () => {
+         const urlHomePage = "http://localhost:8080/QuesApp/home";
+         window.location.href = urlHomePage;
+         });
+       });
+
+
+
+     </script>
+</body>
+</html>
Index: src/main/java/com/example/mySQLImplDao/AnswerimplDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/mySQLImplDao/AnswerimplDao.java b/src/main/java/com/example/mySQLImplDao/AnswerimplDao.java
new file mode 100644
--- /dev/null	(date 1709050235050)
+++ b/src/main/java/com/example/mySQLImplDao/AnswerimplDao.java	(date 1709050235050)
@@ -0,0 +1,168 @@
+package com.example.mySQLImplDao;
+
+import com.example.DataSource.ConnectionPool;
+import com.example.dao.AnswerDao;
+import com.example.entity.Answer;
+
+import java.sql.*;
+import java.util.ArrayList;
+import java.util.List;
+
+public class AnswerimplDao implements AnswerDao {
+    @Override
+    public Answer create(Answer answer) {
+        String query = "INSERT INTO answers (content, is_correct, id_question) VALUES (?, ?, ?)";
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
+            preparedStatement.setString(1, answer.getContentOption());
+            preparedStatement.setBoolean(2, answer.isCorrect());
+            preparedStatement.setInt(3, answer.getIdQuestion());
+            preparedStatement.executeUpdate();
+
+
+            try (ResultSet resultSet = preparedStatement.getGeneratedKeys()) {
+                if (resultSet.next()) {
+                    // 1 is the column index of the generated key
+                    answer.setIdAnswer(resultSet.getInt(1));
+                } else {
+                    throw new SQLException("Creating answer failed, no ID obtained.");
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("Create answer failed due to a database error", e);
+        }
+        return answer;
+    }
+
+
+
+    @Override
+    public List<Answer> findAllAnswerByQuestion(int idQuestion) {
+        String query = "SELECT * FROM answers WHERE id_question = ?";
+        List<Answer> result = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setInt(1, idQuestion);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    int idAnswer = resultSet.getInt("id_answer");
+                    String content = resultSet.getString("content");
+                    boolean isCorrect = resultSet.getBoolean("is_correct");
+                    var answer = new Answer(idAnswer,content,isCorrect,idQuestion);
+                    result.add(answer);
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding answer by question due to a database error", e);
+        }
+
+        return result;
+
+    }
+
+    @Override
+    public Answer updateById(int idOldAnswer, Answer newAnswer) {
+        String query = "UPDATE answers SET content = ?, is_correct = ? WHERE id_answer = ?";
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)){
+             String newContent = newAnswer.getContentOption();
+             boolean newIsCorrect = newAnswer.isCorrect();
+
+             // get id question of answer
+             Answer oldAnswer = findById(idOldAnswer);
+             if(oldAnswer!= null){
+                 int idQuestion = oldAnswer.getIdQuestion();
+                 preparedStatement.setString(1,newContent);
+                 preparedStatement.setBoolean(2,newIsCorrect);
+                 preparedStatement.setInt(3,idOldAnswer);
+
+                 int rowsAffected = preparedStatement.executeUpdate();
+                 if (rowsAffected > 0) return new Answer(idOldAnswer,newContent,newIsCorrect,idQuestion);
+             }
+             else throw new RuntimeException();
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException();
+        }
+        return null;
+
+    }
+
+    @Override
+    public boolean deleteById(int idAnswer) {
+        String query = "DELETE FROM answers WHERE id_answer = ?";
+        try(Connection connection = ConnectionPool.getDataSource().getConnection();
+            PreparedStatement preparedStatement = connection.prepareStatement(query)){
+            preparedStatement.setInt(1,idAnswer);
+            int rowAffected = preparedStatement.executeUpdate();
+            if(rowAffected > 0) return true;
+        }
+        catch (Exception e) {
+            throw new RuntimeException("Delete answer failed", e);
+        }
+        return false;
+    }
+
+
+    @Override
+    public boolean deleteAllAnswerByQuestion(int idQuestion) {
+        String query = "DELETE FROM answers WHERE id_question = ?";
+        try(Connection connection = ConnectionPool.getDataSource().getConnection();
+            PreparedStatement preparedStatement = connection.prepareStatement(query)){
+            preparedStatement.setInt(1,idQuestion);
+            int rowAffected = preparedStatement.executeUpdate();
+            if(rowAffected > 0) return true;
+        }
+        catch (Exception e) {
+            throw new RuntimeException("Delete answers failed", e);
+        }
+        return false;
+    }
+
+    @Override
+    public List<Answer> findAll() {
+        String query = "SELECT * FROM answers";
+        List<Answer> answers = new ArrayList<>();
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                while (resultSet.next()) {
+                    var answer = new Answer();
+                    answer.setIdAnswer(resultSet.getInt("id_answer"));
+                    answer.setContentOption(resultSet.getString("content"));
+                    answer.setCorrect(resultSet.getBoolean("is_correct"));
+                    answer.setIdQuestion(resultSet.getInt("id_question"));
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding all answers due to a database error", e);
+        }
+
+        return answers;
+    }
+
+
+    @Override
+    public Answer findById(int idAnswer) {
+        String query = "SELECT * FROM answers WHERE id_answer = ?";
+        Answer answer = null;
+        try (Connection connection = ConnectionPool.getDataSource().getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setInt(1, idAnswer);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    answer = new Answer();
+                    answer.setIdAnswer(resultSet.getInt("id_answer"));
+                    answer.setContentOption(resultSet.getString("content"));
+                    answer.setCorrect(resultSet.getBoolean("is_correct"));
+                    answer.setIdQuestion(resultSet.getInt("id_question"));
+                }
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Error finding answer by id due to a database error", e);
+        }
+
+        return answer;
+    }
+}
Index: src/main/java/com/example/utility/RestAPIResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/utility/RestAPIResponse.java b/src/main/java/com/example/utility/RestAPIResponse.java
new file mode 100644
--- /dev/null	(date 1707929033419)
+++ b/src/main/java/com/example/utility/RestAPIResponse.java	(date 1707929033419)
@@ -0,0 +1,41 @@
+package com.example.utility;
+
+public class RestAPIResponse {
+    private int status;
+    private String message;
+    private Object data;
+
+    private boolean isSuccess;
+
+    public boolean isSuccess() {
+        return isSuccess;
+    }
+
+    public void setIsSuccess(boolean success) {
+        this.isSuccess = success;
+    }
+
+    public int getStatus() {
+        return status;
+    }
+
+    public void setStatus(int status) {
+        this.status = status;
+    }
+
+    public String getMessage() {
+        return message;
+    }
+
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+    public Object getData() {
+        return data;
+    }
+
+    public void setData(Object data) {
+        this.data = data;
+    }
+}
Index: src/main/java/com/example/middleware/AuthenticationFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/middleware/AuthenticationFilter.java b/src/main/java/com/example/middleware/AuthenticationFilter.java
new file mode 100644
--- /dev/null	(date 1708148768407)
+++ b/src/main/java/com/example/middleware/AuthenticationFilter.java	(date 1708148768407)
@@ -0,0 +1,40 @@
+package com.example.middleware;
+
+import com.example.utility.ResponseUtility;
+
+import javax.servlet.*;
+import javax.servlet.annotation.WebFilter;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
+import java.io.IOException;
+
+@WebFilter("/auth/*")
+public class AuthenticationFilter implements Filter {
+
+    @Override
+    public void init(FilterConfig filterConfig) throws ServletException {
+    }
+
+    @Override
+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
+            throws IOException, ServletException {
+        HttpServletRequest httpRequest = (HttpServletRequest) request;
+        HttpServletResponse httpResponse = (HttpServletResponse) response;
+        httpResponse.setContentType("application/json");
+        httpResponse.setCharacterEncoding("UTF-8");
+
+
+        HttpSession session = httpRequest.getSession(false);
+
+        if (session != null && session.getAttribute("id_user") != null) {
+            chain.doFilter(request, response);
+        } else {
+            ResponseUtility.sendJsonResponse(httpResponse, "Unauthorized. Please login.", null,HttpServletResponse.SC_UNAUTHORIZED,false);
+        }
+    }
+
+    @Override
+    public void destroy() {
+    }
+}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1704689693428)
+++ b/.idea/vcs.xml	(date 1704689693428)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1707150409060)
+++ b/.idea/misc.xml	(date 1707150409060)
@@ -0,0 +1,13 @@
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="17" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1704689692366)
+++ b/.idea/.gitignore	(date 1704689692366)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: src/main/java/com/example/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/entity/User.java b/src/main/java/com/example/entity/User.java
new file mode 100644
--- /dev/null	(date 1705677127238)
+++ b/src/main/java/com/example/entity/User.java	(date 1705677127238)
@@ -0,0 +1,58 @@
+package com.example.entity;
+
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+public class User {
+    private String userName;
+    private String email;
+    private String password;
+
+    private int id_user;
+    public User() {
+    }
+
+    public int getId_user() {
+        return id_user;
+    }
+
+    public void setId_user(int id_user) {
+        this.id_user = id_user;
+    }
+
+    @JsonCreator
+    public User(@JsonProperty("email") String email,
+                @JsonProperty("password") String password,
+                @JsonProperty("userName") String userName,
+                @JsonProperty("id_user") int id_user){
+        this.email = email;
+        this.password = password;
+        this.userName = userName;
+        this.id_user = id_user;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public String getUserName() {
+        return userName;
+    }
+
+    public void setUserName(String userName) {
+        this.userName = userName;
+    }
+}
Index: src/main/java/com/example/APIcontroller/QuestionAPIController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/APIcontroller/QuestionAPIController.java b/src/main/java/com/example/APIcontroller/QuestionAPIController.java
new file mode 100644
--- /dev/null	(date 1709307980629)
+++ b/src/main/java/com/example/APIcontroller/QuestionAPIController.java	(date 1709307980629)
@@ -0,0 +1,145 @@
+package com.example.APIcontroller;
+
+
+import com.example.DTO.QuestionAnswerDTO;
+import com.example.ExceptionHandling.DuplicateSubjectException;
+import com.example.mySQLImplDao.AnswerimplDao;
+import com.example.mySQLImplDao.QuestionImplDao;
+import com.example.service.QuestionService;
+import com.example.utility.Helper;
+import com.example.utility.ResponseUtility;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+@WebServlet(urlPatterns = "/auth/questions")
+public class QuestionAPIController extends HttpServlet {
+
+    private final QuestionService questionService = new QuestionService(new QuestionImplDao(), new AnswerimplDao());
+    private final ObjectMapper mapper = new ObjectMapper();
+
+    @Override
+    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+
+        int idSubject = Helper.parseId(request.getParameter("subject"));
+
+        QuestionAnswerDTO questionAnswerDTO = mapper.readValue(request.getReader(), QuestionAnswerDTO.class);
+
+
+        try {
+           QuestionAnswerDTO resultQuestionAnswerDTO =  questionService.createQuestionOfSubject(idSubject,questionAnswerDTO);
+            ResponseUtility.sendJsonResponse(response, "Create question successful!",resultQuestionAnswerDTO, HttpServletResponse.SC_CREATED,true);
+        } catch (IllegalArgumentException e) {
+            ResponseUtility.sendJsonResponse(response, "Invalid input data. " + e.getMessage(),null, HttpServletResponse.SC_BAD_REQUEST,true);
+        } catch (DuplicateSubjectException e) {
+            ResponseUtility.sendJsonResponse(response, "Duplicate subject error: " + e.getMessage(),null, HttpServletResponse.SC_CONFLICT,false);
+        } catch (RuntimeException e) {
+            ResponseUtility.sendJsonResponse(response, "Error creating question and answers: " + e.getMessage(),null, HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+        }
+    }
+
+
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+
+
+        String idParameter = request.getParameter("ids");
+        List<Integer> listIdQuestions = null;
+
+        if (idParameter != null && !idParameter.isEmpty()){
+            String[] idStrings = idParameter.split(",");
+            listIdQuestions = Arrays.stream(idStrings)
+                    .map(Integer::parseInt)
+                    .toList();
+        }
+        try {
+            List<QuestionAnswerDTO> questionAnswerDTO;
+
+            if (listIdQuestions != null && !listIdQuestions.isEmpty()) {
+                questionAnswerDTO = questionService.getAllQuestionSelectedToAddExam(listIdQuestions);
+            } else {
+                int idSubject = Integer.valueOf(request.getParameter("subject"));
+                questionAnswerDTO = questionService.findAllQuestionsOfSubject(idSubject);
+            }
+
+            ResponseUtility.sendJsonResponse(response, null,questionAnswerDTO, HttpServletResponse.SC_OK,true);
+        } catch (IllegalArgumentException e) {
+            ResponseUtility.sendJsonResponse(response, "Invalid input data. " + e.getMessage(), null,HttpServletResponse.SC_BAD_REQUEST,false);
+        } catch (DuplicateSubjectException e) {
+            ResponseUtility.sendJsonResponse(response, "Duplicate subject error: " + e.getMessage(), null,HttpServletResponse.SC_CONFLICT,false);
+        } catch (RuntimeException e) {
+            e.printStackTrace();
+            ResponseUtility.sendJsonResponse(response, "Error retrieving questions of subject: " + e.getMessage(),null, HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+        }
+
+    }
+
+    @Override
+    protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+        String idQuestion = request.getParameter("id");
+
+        try {
+            if(idQuestion == null || idQuestion.isEmpty()){
+                ResponseUtility.sendJsonResponse(response, "Invalid or missing 'id' parameter. Please provide a valid integer id.",null, HttpServletResponse.SC_BAD_REQUEST,false);
+                return;
+            }
+            int id = Helper.parseId(idQuestion);
+            if(id== -1|| !questionService.deleteQuestionById(id)){
+                ResponseUtility.sendJsonResponse(response, "Question with id " + id + " not found.", null,HttpServletResponse.SC_NOT_FOUND,false);
+                return;
+            }
+            ResponseUtility.sendJsonResponse(response, "Delete question with id " + id + " successful", null,HttpServletResponse.SC_NO_CONTENT,true);
+
+        }
+        catch (Exception e){
+            ResponseUtility.sendJsonResponse(response,"Error deleting question",null,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+
+        }
+
+    }
+
+    @Override
+    protected void doPut(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        response.setContentType("application/json");
+        response.setCharacterEncoding("UTF-8");
+
+        String idQuestion = request.getParameter("id");
+        try {
+            if(idQuestion == null|| idQuestion.isEmpty()){
+                ResponseUtility.sendJsonResponse(response, "Invalid or missing 'id' parameter. Please provide a valid integer id.", null,HttpServletResponse.SC_BAD_REQUEST,false);
+                return;
+            }
+            int id = Helper.parseId(idQuestion);
+            if (id == -1) {
+                ResponseUtility.sendJsonResponse(response, "Invalid 'id' parameter. Please provide a valid integer id.", null,HttpServletResponse.SC_BAD_REQUEST,false);
+                return;
+            }
+
+            QuestionAnswerDTO questionAnswerDTO = mapper.readValue(request.getReader(),QuestionAnswerDTO.class);
+            QuestionAnswerDTO resQuestionAnswerDTO = questionService.updateQuestionById(id,questionAnswerDTO);
+            if(resQuestionAnswerDTO != null){
+                ResponseUtility.sendJsonResponse(response,"Update question with id " + id + " successful!",resQuestionAnswerDTO,HttpServletResponse.SC_OK,true);
+            }
+            else {
+                ResponseUtility.sendJsonResponse(response, "Question with id " + id + " not found.",null, HttpServletResponse.SC_NOT_FOUND,false);
+            }
+        }
+        catch (Exception e){
+            ResponseUtility.sendJsonResponse(response,"Updating question failed",null,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,false);
+        }
+
+    }
+}
Index: src/main/java/com/example/service/QuestionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/service/QuestionService.java b/src/main/java/com/example/service/QuestionService.java
new file mode 100644
--- /dev/null	(date 1709279167190)
+++ b/src/main/java/com/example/service/QuestionService.java	(date 1709279167190)
@@ -0,0 +1,159 @@
+package com.example.service;
+
+import com.example.DTO.QuestionAnswerDTO;
+import com.example.dao.AnswerDao;
+import com.example.dao.QuestionDao;
+import com.example.entity.Answer;
+import com.example.entity.Question;
+import java.util.List;
+
+public class QuestionService {
+    private final QuestionDao questionDao;
+
+    private final AnswerDao answerDao;
+
+
+    public QuestionService(QuestionDao questionDao, AnswerDao answerDao) {
+        this.questionDao = questionDao;
+        this.answerDao = answerDao;
+    }
+
+    public QuestionAnswerDTO createQuestionOfSubject(int idSubject,QuestionAnswerDTO questionAnswerDTO) {
+        try {
+            // Convert DTO to model
+            List<Answer> answers = questionAnswerDTO.getAnswers();
+            Question question = questionAnswerDTO.convertDtoToQuestion();
+            question.setIdSubject(idSubject);
+
+            // Validate input data
+            validateQuestionAndAnswers(question, answers);
+
+            // Question must have 1 correct answer
+            int correctAnswersCount = (int) answers.stream().filter(Answer::isCorrect).count();
+            if (correctAnswersCount != 1) {
+                throw new IllegalArgumentException("Question must have exactly 1 correct answer.");
+            }
+
+            try {
+                Question questionCurrent = questionDao.create(question);
+                for (var answer : answers) {
+                    // validate answer
+                    if (answer.getContentOption() == null || answer.getContentOption().isEmpty()) {
+                        throw new IllegalArgumentException("Answer content cannot be null or empty.");
+                    }
+                    answer.setIdQuestion(questionCurrent.getIdQuestion());
+                    Answer answerCurrent = answerDao.create(answer);
+                    if(answerCurrent == null) throw new RuntimeException("Question created failed");
+                }
+                return new QuestionAnswerDTO(questionCurrent.getContent(),answers,questionCurrent.getIdQuestion());
+            } catch (Exception e) {
+                throw new RuntimeException("Error creating question and answers in the database.", e);
+            }
+        } catch (IllegalArgumentException e) {
+            throw new RuntimeException("Invalid input data.", e);
+        }
+    }
+
+    private void validateQuestionAndAnswers(Question question, List<Answer> answers) {
+        // Question must have 4 answer
+        if (question == null || question.getContent() == null || answers == null || answers.size() != 4) {
+            throw new IllegalArgumentException("Invalid question or answers.");
+        }
+    }
+
+
+
+    public List<QuestionAnswerDTO> findAllQuestionsOfSubject(int idSubject) {
+        List<Question> allQuestions = questionDao.findAllQuestionBySubject(idSubject);
+
+        return allQuestions.stream()
+                .map(question -> {
+                    int idQuestion = question.getIdQuestion();
+                    List<Answer> answerOfQuestion = answerDao.findAllAnswerByQuestion(idQuestion);
+                    return new QuestionAnswerDTO(question.getContent(),answerOfQuestion,idQuestion);
+                }).toList();
+    }
+
+
+
+    // ver 1
+//    public List<QuestionAnswerDTO> findAllQuestionsOfSubject(int idSubject){
+//        List<Question> allQuestions = questionDao.findAllQuestionBySubject(idSubject);
+//        List<QuestionAnswerDTO> allQuestionOfSubject = new ArrayList<>();
+//
+//        for(var question : allQuestions){
+//                int idQuestion = question.getIdQuestion();
+//                List<Answer> answerOfQuestion = answerDao.findAllAnswerByQuestion(idQuestion);
+//                QuestionAnswerDTO questionAnswerDTO = new QuestionAnswerDTO(question.getContent(),answerOfQuestion);
+//                allQuestionOfSubject.add(questionAnswerDTO);
+//        }
+//        return allQuestionOfSubject;
+//    }
+
+
+
+    public QuestionAnswerDTO updateQuestionById(int idOldQuestion,QuestionAnswerDTO questionAnswerDTO){
+        try{
+            // GET old question and old answers
+            Question question = questionDao.findById(idOldQuestion);
+            List<Answer> answers = answerDao.findAllAnswerByQuestion(idOldQuestion);
+
+            //GET content new question and update question
+            Question newQuestion = questionAnswerDTO.convertDtoToQuestion();
+
+            // GET content new answers and update old answer
+            List<Answer> newAnswers = questionAnswerDTO.getAnswers();
+
+            // Validate
+            validateQuestionAndAnswers(question, answers);
+
+            int correctAnswersCount = (int) newAnswers.stream().filter(Answer::isCorrect).count();
+            if (correctAnswersCount != 1) {
+                throw new IllegalArgumentException("Question must have exactly 1 correct answer.");
+            }
+
+
+            // Update
+            question.setContent(newQuestion.getContent());
+            questionDao.updateById(idOldQuestion,question);
+
+            for(int i = 0; i < newAnswers.size();++i){
+                // validate answer
+                if (newAnswers.get(i).getContentOption() == null || newAnswers.get(i).getContentOption().isEmpty()) {
+                    throw new IllegalArgumentException("Answer content cannot be null or empty.");
+                }
+                String newContentAnswer = newAnswers.get(i).getContentOption();
+                boolean isCorrectAnswer = newAnswers.get(i).isCorrect();
+                answers.get(i).setContentOption(newContentAnswer);
+                answers.get(i).setCorrect(isCorrectAnswer);
+                int idAnswer = answers.get(i).getIdAnswer();
+                answerDao.updateById(idAnswer,answers.get(i));
+            }
+            return new QuestionAnswerDTO(question.getContent(),answers,idOldQuestion);
+
+        }
+        catch (IllegalArgumentException e){
+            throw e;
+        }
+        catch (Exception e){
+            throw new RuntimeException("Update failed Question due to database error");
+        }
+    }
+
+    public boolean deleteQuestionById(int idQuestion){
+        return answerDao.deleteAllAnswerByQuestion(idQuestion) && questionDao.deleteById(idQuestion);
+    }
+
+
+    public List<QuestionAnswerDTO> getAllQuestionSelectedToAddExam(List<Integer> listIds){
+        List<Question> questions = questionDao.findAlQuestionsByListId(listIds);
+        return questions.stream()
+                .map(question -> {
+                    int idQuestion = question.getIdQuestion();
+                    List<Answer> answers = answerDao.findAllAnswerByQuestion(idQuestion);
+                    return new QuestionAnswerDTO(question.getContent(),answers,idQuestion);
+                }).toList();
+    }
+
+
+}
Index: src/main/java/com/example/ExceptionHandling/DuplicateSubjectException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/ExceptionHandling/DuplicateSubjectException.java b/src/main/java/com/example/ExceptionHandling/DuplicateSubjectException.java
new file mode 100644
--- /dev/null	(date 1705220257318)
+++ b/src/main/java/com/example/ExceptionHandling/DuplicateSubjectException.java	(date 1705220257318)
@@ -0,0 +1,7 @@
+package com.example.ExceptionHandling;
+
+public class DuplicateSubjectException extends RuntimeException {
+    public DuplicateSubjectException(String message) {
+        super(message);
+    }
+}
